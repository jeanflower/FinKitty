{"version":3,"sources":["utils.ts","localization/stringConstants.ts","stringUtils.ts","views/reactComponents/CashValueFormatter.tsx","views/reactComponents/DataGrid.tsx","views/reactComponents/GrowthFormatter.tsx","views/reactComponents/NameFormatter.tsx","views/reactComponents/ToFromValueFormatter.tsx","views/reactComponents/TriggerDateFormatter.tsx","views/reactComponents/Button.tsx","views/reactComponents/ReactiveTextArea.tsx","views/reactComponents/Input.jsx","views/reactComponents/AddDeleteEntryForm.tsx","views/chartPages.tsx","models/modelUtils.ts","views/reactComponents/ReportMatcherForm.tsx","views/tablePages.tsx","App.tsx","models/evaluations.ts","models/checks.ts","models/versioningUtils.ts","models/exampleModels.ts","contexts/auth0-context.js","models/category.ts","models/charting.ts","views/reactComponents/AddDeleteTriggerForm.tsx","views/reactComponents/TriggerOptionList.tsx","views/reactComponents/DateSelectionRow.tsx","views/reactComponents/AddDeleteTransactionForm.tsx","views/screenshotsPage.tsx","views/loginPage.tsx","views/overviewPage.tsx","views/reactComponents/AddDeleteIncomeForm.tsx","views/incomesPage.tsx","views/reactComponents/AddDeleteExpenseForm.tsx","views/expensesPage.tsx","views/reactComponents/AddDeleteAssetForm.tsx","views/assetsPage.tsx","views/reactComponents/AddDeleteDebtForm.tsx","views/debtsPage.tsx","database/REST_db.ts","database/database.ts","diffModels.ts","database/loadSaveModel.ts","views/reactComponents/AddDeleteSettingForm.tsx","views/reactComponents/ReplaceWithJSONForm.tsx","views/reactComponents/NewModelForm.tsx","serviceWorker.ts","index.tsx","views/catWait.gif","views/sampleAssetGraph.png","views/sampleExpenseGraph.png","views/sampleTaxGraph.png","views/cat.png"],"names":["Context","cpi","cpiHint","roiEnd","roiEndHint","roiStart","roiStartHint","birthDate","birthDateHint","valueFocusDate","valueFocusDateHint","viewFrequency","annually","monthly","viewDetail","total","coarse","fine","assetChartFocus","debtChartFocus","expenseChartFocus","incomeChartFocus","taxChartFocusPerson","taxChartFocusType","taxChartShowNet","chartViewType","incomeTax","net","crystallizedPension","cgt","pension","pensionSS","pensionDB","pensionTransfer","moveTaxFreePart","taxFree","transferCrystallizedPension","conditional","revalueInc","revalueExp","homeView","lc","expensesView","incomesView","transactionsView","assetsView","debtsView","triggersView","settingsView","taxView","reportView","overview","doLog","log","obj","console","showObj","JSON","stringify","getMonthlyGrowth","annualPercentage","annualScale","logAnnualScale","Math","exp","lessThan","a","b","startsWith","toLowerCase","makeDateFromString","input","dateMomentObject","moment","dateObject","toDate","Number","isNaN","getTime","Date","getNumberAndWordParts","re","RegExp","numberParts","match","numberPart","undefined","wordPart","length","parseFloat","substring","removeNumberPart","parts","makeIncomeLiabilityFromNameAndNI","name","NI","includes","makeIncomeTaxTag","person","makeNationalInsuranceTag","makeNetIncomeTag","makeCGTTag","makeNetGainTag","makeBooleanFromString","s","makeStringFromBoolean","makeBooleanFromYesNo","result","value","checksOK","lcInput","makeYesNoFromBoolean","isNumber","num","makeGrowthFromString","settings","isSetting","numFound","replace","makeStringFromGrowth","makeCashValueFromString","x","parseDirectly","makeQuantityFromString","floor","makeValueAbsPropFromString","absolute","lastPartForUnits","numWordSplit","noCommas","parseNum","parseCashValue","getStartQuantity","w","model","assets","filter","NAME","QUANTITY","makeTwoDP","toFixed","makeStringFromValueAbsProp","assetName","tname","pcVal","strVal","endsWith","makeStringFromCashValue","currency","n","negative","parseTriggerForOperator","triggerName","opSymbol","triggers","recursionLevel","numChange","split","secondPartNW","firstPartDate","findMatchedTriggerDate","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","minusOp","plusOp","matched","trigger","checkTriggerDateRecursive","DATE","dateTry","checkTriggerDate","getTriggerDate","checkResult","dateFormatOptions","weekday","year","month","day","makeDateTooltip","date","toLocaleDateString","usesWholeWord","existing","checkWord","usesNumberValueWord","parsed","usesSeparatedString","numMatches","forEach","getSpecialWord","checkForWordClashInModel","replacement","messageWord","settingMessages","map","VALUE","triggerMessages","assetMessages","START","GROWTH","LIABILITY","PURCHASE_PRICE","incomeMessages","incomes","END","VALUE_SET","expenseMessages","expenses","transactionMessages","transactions","FROM","FROM_VALUE","TO","TO_VALUE","STOP_DATE","message","replaceNumberValueString","old","replaceSeparatedString","substr","replaceWholeString","CashValueFormatter","isNumberString","this","props","OverlayTrigger","placement","overlay","Tooltip","className","React","Component","DataGrid","sortedIndices","rows","row","state","colSortIndex","sortDirection","handleSort","i","sortColumn","slice","sort","aVal","bVal","columns","aTimeVal","bTimeVal","aIsDate","bIsDate","paVal","pbVal","toUpperCase","ai","bi","setState","column","key","deleteFunction","icon","callback","sortHandler","rowGetter","bind","rowsCount","onGridRowsUpdated","handleGridRowsUpdated","minHeight","enableCellSelect","enableRowSelect","onGridSort","getCellActions","GrowthFormatter","SimpleFormatter","SettingFormatter","rawValue","tidyValue","nwp","ToFromValueFormatter","TriggerDateFormatter","tableValue","asDate","showTime","toLocaleString","makeDateTooltipLocal","Button","type","onClick","action","id","disabled","title","makeButton","ReactiveTextArea","style","display","readOnly","identifier","Input","htmlFor","onChange","onBlur","placeholder","InputRow","onSubmit","AddDeleteEntryForm","getValue","handleValue","add","e","target","preventDefault","submitFunction","showAlert","getTaxType","getViewSetting","getTaxShowNet","setViewSettingNameVal","val","setViewSetting","refreshData","makeFilterButton","buttonName","context","refreshModel","isCategory","Income","Expense","Asset","Debt","highlightButton","persist","toggleViewFilter","filtersList","items","buttons","data","aCP","bCP","aP","bP","categories","cat","CATEGORY","indexOf","push","unshift","categoryButtons","role","coarseFineList","viewTypes","selectedCoarseFineView","getCoarseFineView","viewType","getDefaultChartSettings","modelSettings","getSettings","isSmall","height","toolTip","content","legend","fontFamily","fontWeight","horizontalAlign","verticalAlign","axisX","labelFormatter","label","getSmallerChartSettings","width","text","makeBarChart","chartSettings","viewSettings","options","plugins","displayLegend","position","animation","duration","responsive","maintainAspectRatio","scales","stacked","ticks","index","values","l","labels","d","dateFormat","y","makeContainedBarChart","Container","incomesChart","incomesChartData","noDataToDisplayFragment","word","getStartDate","updateStartDate","getEndDate","updateEndDate","hasData","IS_A_DEBT","incomesChartDiv","incomesChartDivWithButtons","expensesChart","expensesChartData","expensesChartDiv","expensesChartDivWithButtons","assetViewTypeList","selectedAssetView","getAssetChartView","assetsOrDebtsChartDiv","assetChartData","isDebt","assetsOrDebtsChartDivWithButtons","dataDumpName","taxButtonList","liabilityPeople","words","findIndex","getLiabilityPeople","taxChartDiv","taxChartData","Col","taxDiv","getDisplay","taxChartDivWithButtons","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","ChartTooltip","Legend","ReportMatcherForm","defaultState","sourceMatcher","reportMatcher","sourceExcluder","submit","handleMatcherChange","handleExcluderChange","setReportKey","collapsibleFragment","fragment","Accordion","defaultActiveKey","Card","Header","Toggle","as","variant","eventKey","Collapse","Body","handleExpenseGridRowsUpdated","args","expense","fromRowData","cellKey","oldValue","updated","parsedGrowsWithCPI","GROWS_WITH_CPI","parsedValue","parsedGrowth","expenseForSubmission","CPI_IMMUNE","RECURRENCE","checks","checkExpense","submitExpense","clashCheck","attemptRename","handleIncomeGridRowsUpdated","income","incValue","incomeForSubmission","checkIncome","submitIncome","handleTriggerGridRowsUpdated","forSubmit","checkTrigger","submitTrigger","handleAssetGridRowsUpdated","asset","matchedAsset","parsedQuantity","parsedPurchasePrice","parsedIsADebt","parsedCanBeNegative","CAN_BE_NEGATIVE","valueForSubmission","submitAsset","getTransactionName","prefix","handleTransactionGridRowsUpdated","gridData","parseFrom","transactionType","TYPE","parseTo","find","isADebt","isAnAssetOrAssets","isAnIncome","isAnExpense","tName","oldtName","transaction","FROM_ABSOLUTE","TO_ABSOLUTE","checkTransaction","submitTransaction","handleSettingGridRowsUpdated","editSetting","HINT","minimalModel","defaultColumn","editable","resizable","sortable","getAssetOrDebtCols","cols","formatter","concat","growthName","addIndices","unindexedResult","elt","assetsOrDebtsForTable","displayValue","dbStringValue","liability","assetsOrDebtsTableDiv","rowData","arguments","deleteAsset","getDisplayName","transactionsForTable","unindexedRows","t","fromValueEntry","toNumber","toValueEntry","makeTransactionCols","transactionsTableDiv","contents","headingText","deleteTransaction","transactionFilteredTable","debtsDivWithHeadings","debtData","assetsDivWithHeadings","assetData","triggersTableDivWithHeading","trigData","triggersForTable","deleteTrigger","triggersTableDiv","incomesTableDivWithHeading","incData","incomesForTable","deleteIncome","incomesTableDiv","expensesTableDivWithHeading","expData","expensesForTable","deleteExpense","expensesTableDiv","settingsToExcludeFromTableView","settingsForTable","settingsTables","constSettings","adjustSettings","deleteSetting","customSettingsTable","adjustSettingsTable","settingsTableDiv","parseRecurrenceString","recurrence","frequency","count","lastChar","firstPart","generateSequenceOfDates","roi","addPreDate","freq","mFreq","yFreq","preDate","start","Error","initialCount","numstepsAdvanced","thisDate","end","nextDate","momentType","sortByDate","arrayOfDatedThings","ad","bd","aIsCash","bIsCash","aIsAssetStart","bIsAssetStart","aIsAsset","bIsAsset","aIsCP","bIsCP","evaluationType","getNumberValue","expectValue","printLogs","get","growthData","growths","checkAssertion","g","adjustForCPI","scale","growth","traceEvaluation","itemGrowth","cpiVal","adaptedGrowth","applyCPI","monthlyGrowth","periodicGrowth","powerByNumMonths","source","valueForWordPart","nextLevel","getQuantity","setValue","evaluations","newValue","callerID","set","numberVal","baseVal","valForEvaluations","evaln","q","applyQuantity","getYearOfTaxYear","getMonthOfTaxYear","TAX_MAP","noTaxBand","lowTaxBand","adjustNoTaxBand","highTaxBand","lowTaxRate","highTaxRate","topTaxRate","noNIBand","lowNIBand","lowNIRate","highNIRate","getTaxBands","startYearOfTaxYear","resultFromMap","topEndIncome","max","calculateIncomeTaxPayable","bands","sizeOfLowTaxBand","sizeOfHighTaxBand","incomeInLowTaxBand","incomeInHighTaxBand","incomeInTopTaxBand","amountLiable","rate","calculateNIPayable","sizeOfLowNIBand","incomeInLowNIBand","incomeInHighNIBand","adjustCash","amount","cashValue","scaleBy","sumTaxDue","taxDueList","tx","payIncomeTax","startOfTaxYear","alreadyPaid","totalTaxDue","sumNI","niDue","sum","nd","logAnnualNIPayments","nIMonthlyPaymentsPaid","payCGT","gain","CGTDue","calculateCGTPayable","OptimizeIncomeTax","liableIncome","liableIncomeInTaxYear","unusedAllowance","keys","valueKey","wds","amountToTransfer","pensionVal","personAmountMap","cashVal","settleUpTax","liableIncomeInTaxMonth","taxMonthlyPaymentsPaid","personNetIncome","Map","personNetGain","recalculatedNetIncome","recalculatedNetGain","liableIncomeTaxInTaxMonth","incomeTaxMonthlyPaymentsPaid","taxPaid","personsName","knownNetIncome","liableIncomeNIInTaxMonth","liableInTaxMonth","cgtPaid","knownNetGain","netIncTag","getTaxMonthDate","monthOfTaxYear","accumulateLiability","incomeValue","taxLiability","newLiability","liableNIInTaxMonth","handleIncome","pensionTransactions","liabilitiesMap","sourceDescription","amountForCashIncrement","amountForIncomeTax","amountForNI","pt","tFromValue","tToValue","amountFrom","amountForPension","pensionValue","liabilitiesMapKey","liabilityList","thisPerson","getRecurrentMoments","prepType","startSequenceFrom","startExpenseOrIncomeDate","rOIEndDate","endDate","newMoments","typeForMoment","startVal","from","to","numMonths","d1","d2","months","diffMonths","assetAllowedNegative","makeSourceForFromChange","processTransactionFromTo","fromWord","toWord","liabliitiesMap","fromChange","preFromValue","preToValue","fromHasQuantity","matchingAsset","assetNotAllowedNegative","numberUnits","unitValue","ceil","lowestFromChange","grain","granularChange","toChange","cgtFromImpact","cgtPreWhole","fromImpact","toImpact","cgtPreChange","calculateFromChange","numUnits","newNumUnits","calculateToChange","newFromValue","liabilities","cgtLiability","proportionSale","purchasePrice","proportionGain","cgtMap","currentcgtVal","newPurchasePrice","handleCGTLiability","oldVal","newToValue","makeSourceForToChange","processTransactionTo","change","newOverOldRatio","currentPurchaseValue","purchaseValue","updatePurchaseValue","processTransactionMoment","toVal","replaceCategoryWithAssetNames","wValue","prevValue","scaledNumberWordParts","newNumberPart","revalueApplied","fromWords","toWords","ValuesContainer","reportValues","includeInReport","report","fn","reportChange","newVal","qchange","qoldVal","qnewVal","toString","estateVal","reverse","getEvaluations","reporter","todaysAssetValues","todaysDebtValues","todaysIncomeValues","todaysExpenseValues","todaysSettingValues","checkData","reportData","roiStartDate","roiEndDate","allMoments","setIncludeInReport","cpiInitialVal","expenseGrowth","adaptedExpenseGrowth","power","logExpenseGrowth","expenseStart","shiftStartBackTo","expenseSetDate","numAdjustments","logIncomeGrowth","incomeStart","dbTransaction","sourceIncome","incomeSetDate","settingVal","adaptedAssetGrowth","logAssetGrowth","logAssetValueString","assetVal","assetStart","level","debug","parsedOK","getAssetMonthlyMoments","logAssetIncomeLiabilities","stop","transStop","getTransactionMoments","logPensionIncomeLiabilities","setSettingsData","setting","referencingPrices","referencingDates","ds","settingName","sd","ss","today","getTodaysDate","datedMoments","first","infMoments","NaN","pop","debtVal","category","assetQ","startDate","incomeVal","expenseVal","expenseFreq","momentsTaxYear","momentsTaxMonth","enteringNewTaxYear","enteringNewTaxMonth","niDueForYear","nIMonthTaxDue","niPaid","payNIEstimate","annualEstimate","estimateMonthTaxDue","estimatesPaid","payTaxEstimate","baseObj","infObj","startQ","tracedValue","logPurchaseValues","valueToScale","startValue","valueToStore","visiblePoundValue","growthObj","oldStoredNumberVal","changedToStoredValue","changeToVisibleCash","growthChangeScale","cPIChange","valToStore","storedVal","changeToCash","getReport","numberStringCache","numberStringCacheResult","outcome","checkTransactionWords","is","checkDate","checkAssetLiability","isValidValue","checkAsset","idx","checkIncomeLiability","incomeTaxName","niName","cashAssets","m","cashStarts","toDateString","valueSetDate","checkRecurrence","rec","checkRec","checkTransactionTo","assetsForChecking","ic","arrayLength","checkTransactionFrom","recognised","isAutogenType","isLiquidateAssetType","isPayOffDebtType","isRevalueAssetType","isRevalueDebtType","isRevalueIncomeType","isRevalueExpenseType","isCustomType","nameCheck","checkSettingAbsent","names","counts","reduce","acc","existingCount","checkNames","checkViewROI","dob","checkDateOfBirth","stringVal","checkCpi","mapForGuessSettingTypeForv2","getGuessSettingTypeForv2","mapResult","migrateFromV4","reactAppComponent","viewState","migrateViewSettingString","splice","version","changeSpecialWords","transactionChanges","incomeChanges","assetChanges","ch","oldPart","newPart","newWords","hasChanged","migrateOldVersions","getMinimalModelCopy","migrateFromV0","migrateFromV1","migrateFromV2","viewSetting","migrateFromV3","migrateFromV5","migrateFromV6","nameToPension","pensionName","fromName","mapEntry","migrateFromV7","makeModelFromJSONString","matches","parse","testName","simpleExpense","simpleIncome","simpleAsset","simpleTransaction","browserTestSettingsForMigration","undoModel","redoModel","setSetting","getTestModel01ForMigration","getTestModel02ForMigration","defaultModelSettingsForMigration","emptyModel","setROI","getModelCoarseAndFineForMigration","defaultModelSettings","getModelFutureExpenseForMigration","getThreeChryslerModelForMigration","definedBenefitsPension","makeModelFromJSON","definedContributionsPension","pensionExampleData","getTestModel","cleanUpDates","modelFromJSON","pr","fallbackVal","searchResult","hint","todaysDate","ok","isAnAsset","isATransaction","wordsNew","assetsWithCategory","markForUndo","modelClone","revertToUndoModel","targetModel","Object","assign","applyRedoToModel","attemptRenameLong","oldSpecialWord","newSpecialWord","simpleExampleData","simpleSetting","Auth0Context","createContext","Auth0Provider","auth0Client","isLoading","isAuthenticated","user","config","domain","process","client_id","redirect_uri","window","location","origin","initializeAuth0","createAuth0Client","search","handleRedirectCallback","getUser","history","replaceState","document","pathname","children","configObject","loginWithRedirect","loginForTesting","sub","getTokenSilently","getIdTokenClaims","logout","Provider","getCategoryFromItems","found","getCategorySub","foundTransaction","ViewSettings","pairs","kvPairs","show","dependents","supercategories","p","ctxt","makeContextFromString","makeEmptyDependents","makeEmptySuperCategories","ascendent","arr","v","addToSuperCategories","addToDependents","setInMapIfAbsent","setItemFromModel","settingValue","settingType","deps","dep","sups","sup","filterName","setViewFilter","migrateViewSetting","item","defaultValue","chartVal","mapVal","logMapOfMap","twoMap","key2","value2","logMapOfMapofMap","threeMap","key3","value3","totalChartDataPoints","dateNameValueMap","dates","totalValue","dateString","nameValueMap","mapValue","nvm","makeChartDataPoints","dateNameValueMapIncoming","itemsIncoming","negateValues","totalValues","chartDataPointMap","has","chartArray","twoDPstring","birthDateSetting","dataLabel","diff","age","ttip","allChartDataPoints","array","chartDataPoints","cdp","displayAs","debt","tax","shift","assetMatch","getShowItem","catMatch","displayWordAs","makeADTChartNames","allNames","assetChartNames","debtChartNames","assignCategories","allDates","categoryCache","categoryNames","Set","mapForChart","NVM","cache","cachedResult","firstPartCat","secondPart","secondPartCat","getCategory","existingVal","sources","filterIncomeOrExpenseItems","getDisplayType","nameToTypeMap","evalnType","checkEvalnType","makeChartData","evaluationsAndVals","expensesData","incomesData","taxData","incomeNames","expenseNames","assetNames","debtNames","detail","taxChartType","taxChartPerson","taxChartNetString","taxChartNet","getSettingsValues","showAllAssets","getShowAll","showAllDebts","showAllIncomes","showAllExpenses","showAssetAdditions","getChartViewType","showAssetReductions","showAssetValues","icTag","netIncomeTag","niTag","cgtTag","netGainTag","mapNamesToTypes","generateEvaluationDates","typeDateNameValueMap","assetOrDebtValueSources","prevEvalAssetValue","firstDateAfterEvaln","matchingIncome","ensureDateValueMapsExist","existingValue","assetOrDebtDateNameValueMap","doIncludeEvaln","tagData","tag","isIncome","isGain","isIncomeTax","isNationalInsurance","isNet","isCGT","deconstructTaxTag","rightType","rightPerson","assetOrDebtNameValueMap","mapKey","valueForChart","existingDelta","taxValueSources","focusItems","aDTAssetChartNames","aDTDebtChartNames","mapForTaxChart","expenseDateNameValueMap","incomeDateNameValueMap","AddDeleteTriggerForm","handleName","handleValueChange","delete","Row","doCheckBeforeOverwritingExistingData","checkFunction","TriggerOptionList","selectedItem","submitTriggerFunction","handleChange","optionData","newTriggerMade","nameString","prompt","od","DateSelectionRow","onChangeHandler","introLabel","setDateFunction","inputValue","makeDateTooltipForRow","inputName","assetOptions","AddDeleteTransactionForm","transactionFromSelectID","transactionToSelectID","FROM_INPUT_VALUE","TO_INPUT_VALUE","LIQUIDATE_FOR_CASH","handleNameChange","handleFromChange","handleToChange","handleFromValueChange","handleToValueChange","handleCategoryChange","handleRecurrenceChange","handleLiquidateForCashChange","handleDateChange","handleStopDateChange","setStopDate","parseResult","selector","getElementById","selectedIndex","fromAbsolute","fromValue","toAbsolute","toValue","parsedLiquidateYN","transactionName","resetSelect","screenshotsDiv","src","expensesGraph","alt","assetsGraph","taxGraph","navbarContent","isWaiting","rhContent","Navbar","expand","bg","sticky","Brand","href","WaitGif","FinKittyCat","toggle","suppressLegend","barData","chartsForOverview","debtChartData","selectedView","frequencyList","overviewDiv","chartDataExists","customContents","autogenContents","transactionsOverviewDiv","inputtingPension","incomeOptions","AddDeleteIncomeForm","incomeSourceSelectID","inputting","DB_INCOME_SOURCE","DB_CONTRIBUTION_AMOUNT","DB_ACCRUAL","DB_SS","DB_STOP_SOURCE","DB_START","DB_END","DB_TRANSFER_TO","DB_TRANSFER_PROPORTION","DB_TRANSFERRED_STOP","handleGrowthChange","handleGrowsWithCPIChange","handleLiabilityChange","revalue","handleDbpIncomeSourceChange","handleDbpSsChange","handleDbpAccrualChange","handleDbpTransferTo","handleDbpContAmount","handleDbpTransferProportion","handleValueSetChange","setValueSet","handleStartChange","setStart","handleEndChange","setEnd","handleDbpStartChange","setDbpStart","handleDbpEndChange","setDbpEnd","handleDbpStopSourceChange","setDbpStopSource","handleDbpTransferredStopChange","setDbpTransferredStop","setInputincome","setInputDBP","setInputRevalue","inputsForGeneralIncome","inputsForDefinedBenefitsPensionIncome","growthsEtc","revalueButton","parseVal","revalueIncomeTransaction","checkTransactionFunction","submitTransactionFunction","parseYNGrowsWithCPI","parseYNDBSS","inputLiability","liabilityMessage","incomeTaxWord","builtLiability2","newIncomeName1","pensionDbpIncome1","checkIncomeFunction","newIncomeName2","pensionDbpIncome2","submitIncomeFunction","pensionDbptran1","monthlyAccrualValue","pensionDbptran2","pensionDbptran3","builtLiability","addToMap","myMap","existingEntry","makeDataGrid","Array","entries","todaysIncomesTable","todaysValues","size","categorisedValues","AddDeleteExpenseForm","setInputExpense","twoExtraDates","newExpenseForm","goButton","revalueExpenseTransaction","parsedYN","FREQ","todaysExpensesTable","catName","AddDeleteAssetForm","GROWS_WITH_INFLATION","DCP_STOP","DCP_CRYSTALLIZE","DCP_SS","DCP_INCOME_SOURCE","DCP_CONTRIBUTION_AMOUNT","DCP_EMP_CONTRIBUTION_AMOUNT","DCP_TRANSFER_TO","DCP_TRANSFER_DATE","handleQuantityChange","handlePurchasePriceChange","handleDcpTransferTo","setDcpTransferDate","handleDcpTransferDateChange","inputPension","inputAsset","inputRevalue","setStop","handleStopChange","setCrystallize","handleCrystallizeChange","handleDcpIncomeSourceChange","handleDcpContAmount","handleDcpEmpContAmount","handleDcpSsChange","addFromButton","addFromForm","goButtons","ValueQuantityAndCategory","growthAndInflation","inputsForGeneralAsset","inputsForDCP","matchingItem","asset1Name","asset2Name","asset3Name","asset4Name","asset1","checkAssetFunction","asset2","asset3","asset4","parseYNSS","contPc","contEmpPc","toProp","submitAssetFunction","contributions","deleteAssetFunction","crystallizeTaxFree","crystallize","transfer","parsedYNCPI","quantityText","todaysAssetsTable","AddDeleteDebtForm","PAYMENT","handlePaymentChange","inputDebt","revalueTransaction","ValueAndCategory","todaysDebtsTable","url","restdb","userID","myHeaders","Headers","append","Promise","resolve","reject","requestOptions","method","headers","redirect","address","fetch","then","response","parsedResult","err","catch","error","modelName","urlencoded","URLSearchParams","body","modelCopy","getDB","diffItem","i1","i2","diffTriggers","it1","it2","t1","t2","diffIncomes","diffExpenses","e1","e2","diffAssets","a1","a2","diffTransactions","diffSettings","s1","s2","diffItems","is1","is2","diffFn","quickExit","model1Name","model2Name","matchedNames","matchedItems","diffModels","m1","m2","localCache","getModelNamesDB","modelNames","getModelNames","alert","loadModelFromDB","loadModel","logCache","fillCacheFromDB","getModel","cachedModels","status","isDirty","all","cm","cachedModel","dbModel","saveModelToCache","modelData","ensureModel","saveModelLSM","updateItemList","itemList","newData","submitItemLSM","inputItem","doCheckModelBeforeChange","submitExpenseLSM","expenseInput","submitIncomeLSM","incomeInput","submitTriggerLSM","submitAssetLSM","assetInput","submitTransactionLSM","saveModelToDBLSM","saveModel","submitSettingLSM","submitNewSettingLSM","matchingSettings","deleteModel","AddDeleteSettingForm","inputSetting","submitSettingFunction","ReplaceWithJSONForm","handleSubmit","overwriteWord","gotoOverview","evalWord","trim","toggleCheckOverwrite","eval","toggleOverview","doCheckOverwrite","confirm","newModel","replaceWithModel","CreateModelForm","newName","clonePropsModel","backupModel","exampleModels","copyModel","getExampleModel","exampleButtonList","backupName","currentModelName","backupText","blob","Blob","FileSaver","saveAs","cloneModel","views","view","colors","getColor","hex","exec","r","parseInt","hexToRgb","makeBarData","chartData","datasets","cd","c","round","backgroundColor","barPercentage","getUserID","modelString","alertText","toggleOption","modelAndStatus","gotModelOK","evalMode","getReporter","nameMatcher","getSettingValue","reportDefiner","matcher","excluder","nameRegex","sourceRegex","refreshDataInternal","refreshChart","sourceID","modelNamesData","setModel","toLocaleTimeString","textInput","inputObj","transactionInput","triggerInput","settingInput","settingWithBlanks","submitNewSetting","k","checkModelData","givenModel","deleteItemFromModel","oldItem","checkResponse","updateModelName","goToOverviewPage","checkOverwrite","userName","thisModelName","confirmBeforeReplace","AlertDismissibleExample","useState","setShow","Alert","dismissAction","AppContent","textToDisplay","aria-controls","Nav","Form","inline","statusButtonList","viewButtonList","rhsTopButtonList","rhsBottomButtonList","updateSettingValue","newDate","navbarDiv","homeDiv","settingsDiv","incomesDiv","expensesDiv","assetsDiv","debtsDiv","transactionsDiv","triggersDiv","reportDataTable","make2dpCanBeUndefined","makeQCanBeUndefined","CHANGE","OLD_VALUE","NEW_VALUE","QCHANGE","QOLD_VALUE","QNEW_VALUE","SOURCE","reportDiv","internalErrorDiv","actionOnSelect","idKey","modelList","gotNameOK","promptResponse","regex","modelNameForDelete","modelNameForDiff","otherModelName","otherModelAndStatus","otherModel","diffResult","fromModel","currentData","diffModel","navigator","clipboard","writeText","inputEnc","secret","decipherString","CryptoJS","AES","decrypt","enc","Utf8","newNameFromUser","getNewName","modelListForSelect","homeScreenButtons","todaysSettingsTable","estateText","event","logOutAction","makeUndoButton","makeRedoButton","makeSaveButton","it","viewIterator","next","viewValue","done","makeHelpText","numUndosAvailable","buttonTitle","undoTooltip","diffs","numRedosAvailable","redoTooltip","messageText","App","useContext","returnTo","loginPage","Boolean","hostname","ReactDOM","render","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a6937aa8.chunk.js","sourcesContent":["import { makeDateFromString } from './stringUtils';\n\nlet doLog = true;\nexport function log(obj: string) {\n  if (doLog) {\n    /* eslint-disable no-console */ // all console calls routed through here\n    // tslint:disable-next-line:no-console\n    console.log(obj);\n    /* eslint-enable no-console */\n  }\n}\nexport function suppressLogs() {\n  doLog = false;\n}\nexport function unSuppressLogs() {\n  doLog = true;\n}\n\nexport function printDebug(): boolean {\n  return false;\n}\n\nexport function showObj(obj: any) {\n  return JSON.stringify(obj, null, 4);\n}\n\nexport function endOfTime() {\n  return makeDateFromString('2100');\n}\n\n// Something like 12 as input (for 12%pa)\n// gives 0.009488... as output\n// Then x * (1.009488)^12 === x * 1.12\nexport function getMonthlyGrowth(annualPercentage: number) {\n  // log(`annual_percentage = ${annualPercentage}`);\n  const annualProportion = annualPercentage / 100.0;\n  const annualScale = annualProportion + 1.0;\n  const logAnnualScale = Math.log(annualScale);\n  const monthlyGrowth = Math.exp(logAnnualScale / 12.0) - 1.0;\n  // log(`calculated monthly growth = ${monthlyGrowth}, from annualPercentage = ${annualPercentage}`);\n  return monthlyGrowth;\n}\n\nexport enum Context {\n  Asset,\n  Debt,\n  Income,\n  Expense,\n}\n","export const NO_ASSET_NAME = '';\nexport const separator = '/';\nexport const dot = '.';\n// All models have a Cash asset and this is its name\nexport const CASH_ASSET_NAME = 'Cash';\n\n// All models used to have a taxPot which keeps a tally of payments for\n// income tax, NI, or CGT\n// useful to monitor and determine ways to\n// optimize the size or timing of payments.\nexport const taxPot = 'TaxPot';\n\n// All models have a value for CPI (can be zero),\n// which controls how values of incomes/expenses/assets\n// naturally grow over time\nexport const cpi = 'cpi';\nexport const cpiHint = 'Annual rate of inflation';\nexport const baseForCPI = 'base';\n\n// All models include these settings which control the view:\n// date range for charts\nexport const roiEnd = 'End of view range';\nexport const roiEndHint = 'Date at the end of range to be plotted';\nexport const roiStart = 'Beginning of view range';\nexport const roiStartHint = 'Date at the start of range to be plotted';\n// dates can be plotted as dates or as an age based on a given\n// date of birth (leave DOB as '' to see dates not ages)\nexport const birthDate = 'Date of birth';\nexport const birthDateHint = 'Date used for representing dates as ages';\n// The asset values table defaults to Today's value but you can set an\n// alternative date here\nexport const valueFocusDate = `Today's value focus date`;\nexport const valueFocusDateHint = `Date to use for 'today's value' tables (defaults to '' meaning today)`;\n// whether bars on the charts show monthly or annual values\nexport const viewFrequency = 'View frequency';\n// \"Data plotted 'monthly' or 'annually'\";\nexport const annually = 'Annually';\nexport const monthly = 'Monthly';\n// whether charts bundle items into categories\n// a coarse view uses categories and is simpler to look at\n// a detailed view ignores categories and represents everything\n// separately\nexport const viewDetail = 'View detail';\n//  \"View detail ('Categorised view' or 'Detailed view')\";\nexport const total = 'Totalled view';\nexport const coarse = 'Categorised view';\nexport const fine = 'Detailed view';\n// The asset chart can show all assets/expenses/incomes\n// (set focus to All)\n// or all things in a given category\n// or an individual named thing\nexport const assetChartFocus = 'Focus of assets chart';\n//  \"Assets chart can display a category, a single asset, or 'All'\";\nexport const debtChartFocus = 'Focus of debts chart';\n//  \"Debts chart can display a category, a single debt, or 'All'\";\nexport const expenseChartFocus = 'Focus of expenses chart';\n//  \"Expenses chart can display a category, a single expense, or 'All'\";\nexport const incomeChartFocus = 'Focus of incomes chart';\n//  \"Incomes chart can display a category, a single income, or 'All'\";\nexport const taxChartFocusPerson = 'Focus of tax chart, person';\n//  \"Tax chart can show data pertinent to a named individual or 'All'\";\nexport const taxChartFocusType = 'Focus of tax chart, type';\n//  \"Tax chart can show data for 'income', 'gain' or 'All'\";\nexport const taxChartShowNet = 'Tax chart, whether to include net income/gains';\n//  \"Show net can be 'Y', 'N', 'y', 'n', 'yes', 'no'\";\nexport const allItems = 'All';\n// Asset chart bars represent the value of the asset/debt\n// or the delta (additions, reductions or both)\nexport const chartViewType = 'Type of view for chart';\n//  \"Chart uses setting '+', '-', '+-' or 'val'\";\nexport const chartVals = 'val';\nexport const chartAdditions = '+';\nexport const chartReductions = '-';\nexport const chartDeltas = '+-';\n\n// The app ships with a sample model that covers some of the\n// types of assets, income, expenses and transactions.\n// The sample data can be loaded into a model.\nexport const exampleModelName = 'Simple';\n\n// Incomes can be liable to incomeTax or NI\n// concatenate with liable person's name\n// e.g. IncomeTaxJoe or NIJane\nexport const incomeTax = '(incomeTax)';\nexport const nationalInsurance = '(NI)';\nexport const taxableBenefit = 'TaxableBenefit';\nexport const income = 'income';\nexport const gain = 'gain';\nexport const net = '(net)';\n\nexport const cpPrefix = '-CP';\nexport const penPrefix = '-P';\n// Assets can of the form CrystallizedPension\n// and transfer to cash is liable to income tax for\n// the named owner\n// (i.e. named CrystallizedPensionJack)\n// generates income tax liability for Jack\nexport const crystallizedPension = `${cpPrefix}Taxable `;\n// Assets can be liable to CGT\n// CGT calculations depend upon a PurchasePrice having been set\n// for the asset. Then, upon sale, a gain can be calculated\n// and allowed for in CGT calculation\nexport const cgt = '(CGT)';\n\n// Some transactions behave in special ways regarding income tax\n// name them\n// PensionNorwich\n// (transfers here out of income reduce income tax liability),\n// or PensionSSNorwich\n// (transfers here out of income reduce income tax + NI liability),\n// or PensionDBTeachers\n// (amounts here take proportion of income and add to accruing benefit value)\n\nexport const pension = `${penPrefix}EN `;\nexport const pensionSS = `${penPrefix}SS `;\nexport const pensionDB = `${penPrefix}DB `;\nexport const pensionTransfer = `${penPrefix}T `;\nexport const moveTaxFreePart = `${cpPrefix}TaxFreeM `;\nexport const taxFree = `${cpPrefix}TaxFree `;\nexport const transferCrystallizedPension = `${cpPrefix}T `;\n\n// Transactions can be Conditional\n// (i.e. they're named ConditionalDoSomething)\n// the condition is that they only execute if the\n// target asset is negative\n// (so used to keep a cash float positive, fvor example)\nexport const conditional = 'Conditional';\n\n// Transactions can be Revalue\n// which simply replaces the value of an existing\n// asset/income/expense\n// with a new value obtained on a given date.\n// Supply no FROM, a name for TO\n// and an absolute value for TO\n// Useful for recalibrating a model back with true values.\nexport const revalue = 'Revalue';\n\n// Reported deltas on assets can be flagged as 'growth'\nexport const growth = 'growth';\n\n// Track quantities or discrete assets using this string\nexport const quantity = 'quantity';\n\n// Track purchase price of aasets liable to capital gains\nexport const purchase = 'Purchase';\n\n// Transaction types:\n//  Auto-generated (e.g. about pension)\nexport const autogen = 'auto';\n//  Custom transaction (are still staying as transactions)\nexport const custom = 'custom';\n//  Revalue incomes\nexport const revalueInc = 'revalueInc';\n//  Revalue expenses\nexport const revalueExp = 'revalueExp';\n//  Revalue assets\nexport const revalueAsset = 'revalueAsset';\n//  Revalue debts\nexport const revalueDebt = 'revalueDebt';\n//  Revalue settings\nexport const revalueSetting = 'revalueSetting';\n//  Liquidate assets to keep cash afloat\n// (Conditional sell to cash)\nexport const liquidateAsset = 'liquidateAsset';\n//  Use cash to pay off debts\n// (Conditional cash to debt)\nexport const payOffDebt = 'payOffDebt';\n\n// settings types\nexport const constType = 'const';\nexport const viewType = 'view';\nexport const adjustableType = 'adjustable';\n\nexport const EvaluateAllAssets = 'EvaluateAllAssets';\n\nexport const TestModel01 = 'TestModel01';\nexport const TestModel02 = 'TestModel02';\nexport const CoarseAndFine = 'CoarseAndFine';\nexport const FutureExpense = 'FutureExpense';\nexport const ThreeChryslerModel = 'ThreeChryslerModel';\nexport const MinimalModel = 'MinimalModel';\nexport const BenAndJerryModel = 'BenAndJerryModel';\n\nexport interface ViewType {\n  lc: string;\n}\nexport const homeView: ViewType = { lc: 'Home' };\nexport const expensesView: ViewType = { lc: 'Expenses' };\nexport const incomesView: ViewType = { lc: 'Incomes' };\nexport const transactionsView: ViewType = { lc: 'Transactions' };\nexport const assetsView: ViewType = { lc: 'Assets' };\nexport const debtsView: ViewType = { lc: 'Debts' };\nexport const triggersView: ViewType = { lc: 'Dates' };\nexport const settingsView: ViewType = { lc: 'Settings' };\nexport const taxView: ViewType = { lc: 'Tax' };\nexport const reportView: ViewType = { lc: 'Asset actions' };\n\nexport const expensesChart: ViewType = { lc: 'Expenses chart' };\nexport const incomesChart: ViewType = { lc: 'Incomes chart' };\nexport const assetsChart: ViewType = { lc: 'Assets chart' };\nexport const debtsChart: ViewType = { lc: 'Debts chart' };\n\nexport const overview: ViewType = { lc: 'Overview' };\n\nexport const defaultSourceMatcher = 'Buy|Sell';\nexport const defaultSourceExcluder = '';\n","import moment from 'moment';\nimport {\n  separator,\n  incomeTax,\n  nationalInsurance,\n  income,\n  net,\n  gain,\n  cgt,\n  revalue,\n  conditional,\n  pensionSS,\n  pensionTransfer,\n  pensionDB,\n  pension,\n  moveTaxFreePart,\n  crystallizedPension,\n  transferCrystallizedPension,\n} from './localization/stringConstants';\nimport { isSetting } from './models/modelUtils';\nimport { Setting, ModelData, Trigger } from './types/interfaces';\nimport { log } from './utils';\n\nexport function lessThan(a: string, b: string) {\n  if (a.startsWith('-') && !b.startsWith('-')) {\n    return 1;\n  }\n  if (!a.startsWith('-') && b.startsWith('-')) {\n    return -1;\n  }\n  if (a.toLowerCase() < b.toLowerCase()) {\n    return -1;\n  }\n  if (a.toLowerCase() > b.toLowerCase()) {\n    return 1;\n  }\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n}\n\nexport function makeDateFromString(input: string) {\n  // special-case parsing for DD/MM/YYYY\n  let dateMomentObject = moment(input, 'DD/MM/YYYY');\n  let dateObject = dateMomentObject.toDate(); // convert moment.js object to Date object\n  if (!Number.isNaN(dateObject.getTime())) {\n    // log(`converted ${input} into ${dateObject.toDateString()}`);\n    return dateObject;\n  }\n  dateMomentObject = moment(input, 'DD/MM/YY');\n  dateObject = dateMomentObject.toDate(); // convert moment.js object to Date object\n  if (!Number.isNaN(dateObject.getTime())) {\n    // log(`converted ${input} into ${dateObject.toDateString()}`);\n    return dateObject;\n  }\n\n  const result = new Date(input);\n  return result;\n}\n\nexport function getNumberAndWordParts(\n  input: string,\n): { numberPart: number | undefined; wordPart: string } {\n  // strip away any number part from the front of the\n  // string\n  const re = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)');\n  const numberParts = input.match(re);\n  // log(`number parts of ${input} are ${numberParts}`);\n\n  let numberPart = undefined;\n  let wordPart = input;\n  if (numberParts === null || numberParts.length === 0) {\n    // log(`no number part`);\n  } else {\n    numberPart = parseFloat(numberParts[0]);\n    wordPart = input.substring(numberParts[0].length);\n    // log(`numberPart = ${numberPart}, wordPart = ${wordPart}`);\n  }\n  // log(`from ${input}, numberPart = ${numberPart}, wordPart = ${wordPart}`);\n  return {\n    numberPart: numberPart,\n    wordPart: wordPart,\n  };\n}\n\nexport function removeNumberPart(input: string) {\n  const parts = getNumberAndWordParts(input);\n  if (parts.numberPart === undefined) {\n    return undefined;\n  } else {\n    return parts.wordPart;\n  }\n}\n\nexport function makeIncomeLiabilityFromNameAndNI(name: string, NI: boolean) {\n  if (name === '') {\n    return '';\n  }\n  if (name.includes(separator)) {\n    log(`Error: name ${name} can't contain ${separator}`);\n    return '';\n  }\n  if (NI) {\n    return name + incomeTax + separator + name + nationalInsurance;\n  } else {\n    return name + incomeTax;\n  }\n}\n\nexport function makeIncomeTaxTag(person: string) {\n  return person + ' ' + income + ' ' + incomeTax;\n}\nexport function makeNationalInsuranceTag(person: string) {\n  return person + ' ' + income + ' ' + nationalInsurance;\n}\nexport function makeNetIncomeTag(person: string) {\n  return person + ' ' + income + ' ' + net;\n}\nexport function makeCGTTag(person: string) {\n  return person + ' ' + gain + ' ' + cgt;\n}\nexport function makeNetGainTag(person: string) {\n  return person + ' ' + gain + ' ' + net;\n}\nexport function deconstructTaxTag(\n  tag: string,\n): {\n  isIncome: boolean;\n  isGain: boolean;\n  isIncomeTax: boolean;\n  isNationalInsurance: boolean;\n  isNet: boolean;\n  isCGT: boolean;\n  person: string;\n} {\n  const result = {\n    isIncome: false,\n    isGain: false,\n    isIncomeTax: false,\n    isNationalInsurance: false,\n    isNet: false,\n    isCGT: false,\n    person: '',\n  };\n  let s = tag;\n  if (s.includes(income)) {\n    result.isIncome = true;\n    if (s.includes(incomeTax)) {\n      result.isIncomeTax = true;\n      s = s.substring(0, s.length - incomeTax.length - 1);\n    } else if (s.includes(nationalInsurance)) {\n      result.isNationalInsurance = true;\n      s = s.substring(0, s.length - nationalInsurance.length - 1);\n    } else {\n      result.isNet = true;\n      s = s.substring(0, s.length - net.length - 1);\n    }\n    s = s.substring(0, s.length - income.length - 1);\n  } else {\n    result.isGain = true;\n    if (s.includes(cgt)) {\n      result.isCGT = true;\n      s = s.substring(0, s.length - cgt.length - 1);\n    } else {\n      result.isNet = true;\n      s = s.substring(0, s.length - net.length - 1);\n    }\n    s = s.substring(0, s.length - gain.length - 1);\n  }\n  result.person = s;\n  // log(`deconstruct ${tag} result = ${showObj(result)}`);\n  return result;\n}\nexport function makeBooleanFromString(s: string) {\n  const result = s === 'T' || s === 't' || s === 'True' || s === 'true';\n  // log(`convert ${s} to boolean and get ${result}`);\n  return result;\n}\n\nexport function makeStringFromBoolean(b: boolean) {\n  if (b) {\n    return 'T';\n  }\n  return 'F';\n}\n\nexport function makeBooleanFromYesNo(input: string) {\n  const result = {\n    value: true,\n    checksOK: true,\n  };\n  const lcInput = input.toLowerCase();\n  if (lcInput === 'y' || lcInput === 'yes') {\n    result.value = true;\n  } else if (lcInput === 'n' || lcInput === 'no') {\n    result.value = false;\n  } else {\n    result.checksOK = false;\n  }\n  return result;\n}\n\nexport function makeYesNoFromBoolean(b: boolean) {\n  if (b) {\n    return 'Yes';\n  }\n  return 'No';\n}\n\nfunction isNumber(input: string) {\n  const result = {\n    value: 0.0,\n    checksOK: true,\n  };\n  const wordAndNumber = getNumberAndWordParts(input);\n  if (wordAndNumber.wordPart !== '') {\n    // log(`isNumber = false for ${input}; returning ${result}`);\n    result.checksOK = false;\n    return result;\n  }\n  const num = parseFloat(input);\n  if (num === undefined || Number.isNaN(num)) {\n    result.checksOK = false;\n    return result;\n  }\n\n  result.value = num;\n  return result;\n}\n\nexport function makeGrowthFromString(input: string, settings: Setting[]) {\n  // log(`make growth value from string ${input}`);\n  const result = {\n    value: '',\n    checksOK: true,\n  };\n  if (input === '') {\n    result.checksOK = false;\n    return result;\n  }\n  const parseSetting = isSetting(input, settings);\n  if (parseSetting.numFound === 1) {\n    result.value = input;\n    return result;\n  }\n  const x = input.replace('%', '');\n  const num = isNumber(x);\n  if (!num.checksOK) {\n    result.checksOK = false;\n    return result;\n  }\n  result.value = `${num.value}`;\n  return result;\n}\n\nexport function makeStringFromGrowth(input: string, settings: Setting[]) {\n  // log(`format growth as string; input is ${input}`);\n  const parseGrowth = isSetting(input, settings);\n  if (parseGrowth.numFound === 1) {\n    return input;\n  }\n  const parseNum = isNumber(input);\n  if (parseNum.checksOK) {\n    return `${parseFloat(input)}%`;\n  }\n  return input;\n}\n\nexport function makeCashValueFromString(input: string) {\n  const result = {\n    value: 0.0,\n    checksOK: true,\n  };\n  let x = input.replace('£', '');\n  x = x.replace(',', '');\n  const parseDirectly = isNumber(x);\n  if (parseDirectly.checksOK) {\n    result.value = parseDirectly.value;\n  } else {\n    result.checksOK = false;\n  }\n  // log(`parsing ${input} as cash yields ${showObj(result)}`);\n  return result;\n}\n\nexport function makeQuantityFromString(input: string) {\n  const result = {\n    value: '',\n    checksOK: true,\n  };\n  if (input.length === 0) {\n    return result;\n  }\n  const parseDirectly = isNumber(input);\n  if (parseDirectly.checksOK) {\n    if (parseDirectly.value === Math.floor(parseDirectly.value)) {\n      result.value = `${parseDirectly.value}`;\n    } else {\n      result.checksOK = false;\n    }\n  } else {\n    result.checksOK = false;\n  }\n  // log(`parsing ${input} as quantity yields ${showObj(result)}`);\n  return result;\n}\n\nexport function makeValueAbsPropFromString(input: string) {\n  const result = {\n    absolute: true,\n    value: input,\n    checksOK: true,\n  };\n  if (input === '') {\n    result.value = '0.0';\n    return result;\n  }\n  const lastPartForUnits = input.substring(input.length - 6, input.length);\n  const numWordSplit = getNumberAndWordParts(input);\n  // log(`from ${input}, lastPartForUnits = ${lastPartForUnits}`);\n  // log(`from ${input}, numWordSplit = ${showObj(numWordSplit)}`);\n  if (lastPartForUnits === ' units') {\n    const numberPart = input.substring(0, input.length - 6);\n    const num = parseFloat(numberPart);\n    if (num !== undefined && !Number.isNaN(num)) {\n      result.value = numberPart;\n    } else {\n      result.checksOK = false;\n    }\n  } else if (\n    numWordSplit.numberPart !== undefined &&\n    numWordSplit.wordPart !== '%' &&\n    numWordSplit.wordPart !== ''\n  ) {\n    result.value = input;\n    result.checksOK = true;\n  } else if (input[input.length - 1] === '%') {\n    const numberPart = input.substring(0, input.length - 1);\n    const num = parseFloat(numberPart);\n    if (num !== undefined && !Number.isNaN(num)) {\n      result.absolute = false;\n      result.value = `${num / 100.0}`;\n    } else {\n      result.checksOK = false;\n    }\n  } else {\n    const noCommas = input.replace(',', '');\n    const parseNum = isNumber(noCommas);\n    if (!parseNum.checksOK) {\n      const parseCashValue = makeCashValueFromString(noCommas);\n      if (!parseCashValue.checksOK) {\n        result.checksOK = false;\n      } else {\n        result.value = `${parseCashValue.value}`;\n      }\n    } else {\n      result.value = `${parseNum.value}`;\n      // parses OK as a number\n    }\n  }\n  // log(`parsing ${input} makes result ${showObj(result)}`);\n  return result;\n}\n\nexport function getStartQuantity(w: string, model: ModelData) {\n  // log(`try to get a quantity for ${w}`);\n  const a = model.assets.filter(a => {\n    return a.NAME === w;\n  })[0];\n  if (a === undefined) {\n    // log(`no matched asset found`);\n    return undefined;\n  }\n  if (a.QUANTITY === '') {\n    return undefined;\n  }\n  const result = parseFloat(a.QUANTITY);\n  // log(`getStartQuantity for ${w} is ${result}`);\n  return result;\n}\n\nexport function makeTwoDP(x: number) {\n  const result = x.toFixed(2);\n  // log(`2dp input = ${x} result = ${result}`);\n  return result;\n}\n\nexport function makeStringFromValueAbsProp(\n  value: string,\n  absolute: boolean,\n  assetName: string,\n  model: ModelData,\n  tname: string,\n) {\n  let result = '';\n  // log(`value = ${value}`);\n  if (value.length === 0) {\n    return '0.0';\n  } else if (\n    !tname.startsWith(revalue) &&\n    getStartQuantity(assetName, model) !== undefined\n  ) {\n    // value should be an integer\n    result = value + ' units'; // TODO const string 'units'\n  } else if (!absolute) {\n    const pcVal = parseFloat(value) * 100;\n    let strVal = `${pcVal}`;\n    //log(`${strVal.substring(0, strVal.length - 1)}`);\n    if (\n      strVal.substring(0, strVal.length - 1).endsWith('0000000') ||\n      strVal.substring(0, strVal.length - 1).endsWith('9999999')\n    ) {\n      strVal = makeTwoDP(pcVal);\n      if (strVal.endsWith('.00')) {\n        strVal = strVal.substring(0, strVal.length - 3);\n      } else if (strVal.endsWith('0')) {\n        strVal = strVal.substring(0, strVal.length - 1);\n      }\n    } else {\n      strVal = `${pcVal}`;\n    }\n    result = `${strVal}%`;\n  } else {\n    result = value;\n  }\n  // log(`string for ${value} is ${result}`);\n  return result;\n}\nexport function makeStringFromCashValue(input: string, currency: string) {\n  // formatting from 34567.23 as £34,567.23\n  // log(`formatting ${input} as a cash value`);\n  if (input === '') {\n    return '';\n  }\n  let n = parseFloat(input);\n  const negative = n < 0;\n  if (negative) {\n    n *= -1;\n  }\n  let s = n.toFixed(2);\n  if (s.length > 6) {\n    s =\n      s.substring(0, s.length - 6) + ',' + s.substring(s.length - 6, s.length);\n  }\n  if (s.length > 10) {\n    s =\n      s.substring(0, s.length - 10) +\n      ',' +\n      s.substring(s.length - 10, s.length);\n  }\n  if (negative) {\n    return `-${currency}${s}`;\n  } else {\n    return `${currency}${s}`;\n  }\n}\nexport function makeStringFromFromToValue(input: string) {\n  if (input === '') {\n    return '';\n  }\n  if (input.substring(input.length - 6, input.length) === ' units') {\n    // TODO\n    return input;\n  } else if (input[input.length - 1] === '%') {\n    return input;\n  } else {\n    return makeStringFromCashValue(input, '£');\n  }\n}\n\nfunction parseTriggerForOperator(\n  triggerName: string,\n  opSymbol: string,\n  triggers: Trigger[],\n  recursionLevel: number,\n) {\n  let numChange = 0;\n  if (opSymbol === '-') {\n    numChange = -1;\n  } else if (opSymbol === '+') {\n    numChange = 1;\n  } else {\n    return undefined;\n  }\n\n  const parts = triggerName.split(opSymbol);\n  if (parts.length === 2) {\n    const secondPartNW = getNumberAndWordParts(parts[1]);\n    if (\n      secondPartNW.numberPart !== undefined &&\n      (secondPartNW.wordPart === 'd' ||\n        secondPartNW.wordPart === 'm' ||\n        secondPartNW.wordPart === 'y')\n    ) {\n      //no-use-before-define\n      /* eslint-disable */\n      const firstPartDate: Date | undefined = findMatchedTriggerDate(\n        parts[0],\n        triggers,\n        recursionLevel + 1,\n      );\n      /* eslint-enable */\n      if (firstPartDate !== undefined) {\n        if (secondPartNW.wordPart === 'd') {\n          firstPartDate.setDate(\n            firstPartDate.getDate() + numChange * secondPartNW.numberPart,\n          );\n        } else if (secondPartNW.wordPart === 'm') {\n          firstPartDate.setMonth(\n            firstPartDate.getMonth() + numChange * secondPartNW.numberPart,\n          );\n        } else if (secondPartNW.wordPart === 'y') {\n          firstPartDate.setFullYear(\n            firstPartDate.getFullYear() + numChange * secondPartNW.numberPart,\n          );\n        }\n        // log(`converted ${triggerName} into ${firstPartDate.toDateString()}`);\n        return firstPartDate;\n      }\n    }\n  }\n}\n\n// returns a date for a trigger, or undefined\nfunction findMatchedTriggerDate(\n  triggerName: string,\n  triggers: Trigger[],\n  recursionLevel: number,\n): Date | undefined {\n  if (recursionLevel > 100) {\n    //log(`infinite or too-complex recursion for dates - emergency stop`);\n    return undefined;\n  }\n  const minusOp = parseTriggerForOperator(\n    triggerName,\n    '-',\n    triggers,\n    recursionLevel,\n  );\n  if (minusOp !== undefined) {\n    return minusOp;\n  }\n  const plusOp = parseTriggerForOperator(\n    triggerName,\n    '+',\n    triggers,\n    recursionLevel,\n  );\n  if (plusOp !== undefined) {\n    return plusOp;\n  }\n  // log('look for '+triggerName+'in '+triggers.map(showObj))\n  const matched = triggers.filter(trigger => trigger.NAME === triggerName);\n  // log('matched = '+showObj(matched));\n  let result = undefined;\n  if (matched.length !== 0) {\n    // no-use-before-define\n    /* eslint-disable */\n    result = checkTriggerDateRecursive(\n      matched[0].DATE,\n      triggers,\n      recursionLevel + 1,\n    );\n    /* eslint-enable */\n\n    // log(`converted ${triggerName} into ${result.toDateString()}`);\n  }\n  return result;\n}\n\nfunction checkTriggerDateRecursive(\n  input: string,\n  triggers: Trigger[],\n  recursionLevel: number,\n) {\n  // log('first look for '+input+'in '+showObj(triggers));\n  /* eslint-disable no-use-before-define*/ // recursion\n  const matched = findMatchedTriggerDate(input, triggers, recursionLevel);\n  /* eslint-enable no-use-before-define*/\n\n  // log('matched = '+showObj(matched));\n  let result;\n  if (matched !== undefined) {\n    result = matched; // copy\n  } else {\n    const dateTry = makeDateFromString(input);\n    if (dateTry.getTime()) {\n      result = dateTry;\n    } else {\n      //log(`BUG : unrecognised date!!! ${input}, `\n      // `${showObj(triggers.length)}`);\n      result = undefined;\n    }\n  }\n  // log(`date for ${triggerName} is ${result.toDateString()}`);\n  return result;\n}\n\n// returns a date for a trigger or for a date string, or undefined for junk\nexport function checkTriggerDate(input: string, triggers: Trigger[]) {\n  return checkTriggerDateRecursive(input, triggers, 0);\n}\n\n// Suppresses any not-understood values and returns new Date()\nexport function getTriggerDate(triggerName: string, triggers: Trigger[]) {\n  // log(`triggers length is ${triggers.length}`);\n  const checkResult = checkTriggerDate(triggerName, triggers);\n  if (checkResult !== undefined) {\n    return checkResult;\n  }\n  return new Date();\n}\n\nexport const dateFormatOptions = {\n  weekday: undefined,\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n} as const;\n\n// returns a date string for a trigger, or '' for date or junk\nexport function makeDateTooltip(input: string, triggers: Trigger[]) {\n  // log(`triggers.length = ${triggers.length}`);\n  let result = '';\n  if (input !== '') {\n    const date = checkTriggerDate(input, triggers);\n    if (date !== undefined) {\n      result = date.toLocaleDateString(undefined, dateFormatOptions);\n    }\n  }\n  // log(`make date tooltip for ${input}: ${result}`);\n  return result;\n}\n\nexport function makeStringFromPurchasePrice(input: string, liability: string) {\n  if (!liability.includes(cgt)) {\n    return ''; // don't display irrelevant purchae price\n  } else {\n    return input;\n  }\n}\nexport function makePurchasePriceFromString(input: string) {\n  if (input === '') {\n    return '0';\n  } else {\n    return input;\n  }\n}\n\nfunction usesWholeWord(existing: string, checkWord: string) {\n  if (existing === checkWord) {\n    return true;\n  }\n  return false;\n}\nfunction usesNumberValueWord(existing: string, checkWord: string) {\n  const parsed = getNumberAndWordParts(existing);\n  if (parsed.wordPart && parsed.wordPart === checkWord) {\n    return true;\n  }\n  return false;\n}\nfunction usesSeparatedString(existing: string, checkWord: string) {\n  const parts = existing.split(separator);\n  let numMatches = 0;\n  parts.forEach(obj => {\n    if (obj === checkWord) {\n      numMatches += 1;\n    }\n  });\n  return numMatches > 0;\n}\n\nexport function getSpecialWord(name: string): string {\n  if (name.startsWith(revalue)) {\n    return revalue;\n  }\n  if (name.startsWith(conditional)) {\n    return conditional;\n  }\n  if (name.startsWith(pensionSS)) {\n    return pensionSS;\n  }\n  if (name.startsWith(pensionTransfer)) {\n    return pensionTransfer;\n  }\n  if (name.startsWith(pensionDB)) {\n    return pensionDB;\n  }\n  if (name.startsWith(pension)) {\n    return pension;\n  }\n  if (name.startsWith(moveTaxFreePart)) {\n    return moveTaxFreePart;\n  }\n  if (name.startsWith(crystallizedPension)) {\n    return crystallizedPension;\n  }\n  if (name.startsWith(transferCrystallizedPension)) {\n    return transferCrystallizedPension;\n  }\n  return '';\n}\n\nexport function checkForWordClashInModel(\n  model: ModelData,\n  replacement: string,\n  messageWord: string,\n): string {\n  const settingMessages = model.settings\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Setting '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.VALUE, replacement)) {\n        return `Setting '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  const triggerMessages = model.triggers\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Trigger '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  const assetMessages = model.assets\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Asset '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.START, replacement)) {\n        return `Asset '${obj.NAME}' has start ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.VALUE, replacement)) {\n        return `Asset '${obj.NAME}' has value ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.QUANTITY, replacement)) {\n        return `Asset '${obj.NAME}' has quantity ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.GROWTH, replacement)) {\n        return `Asset '${obj.NAME}' has growth ${messageWord} called ${replacement}`;\n      }\n      if (usesSeparatedString(obj.LIABILITY, replacement)) {\n        return `Asset '${obj.NAME}' has liability ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.PURCHASE_PRICE, replacement)) {\n        return `Asset '${obj.NAME}' has purchase price ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  const incomeMessages = model.incomes\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Income '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.START, replacement)) {\n        return `Income '${obj.NAME}' has start ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.END, replacement)) {\n        return `Income '${obj.NAME}' has end ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.VALUE, replacement)) {\n        return `Income '${obj.NAME}' has value ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.VALUE_SET, replacement)) {\n        return `Income '${obj.NAME}' has value set ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.GROWTH, replacement)) {\n        return `Income '${obj.NAME}' has growth ${messageWord} called ${replacement}`;\n      }\n      if (usesSeparatedString(obj.LIABILITY, replacement)) {\n        return `Income '${obj.NAME}' has liability ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  const expenseMessages = model.expenses\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Expense '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.START, replacement)) {\n        return `Expense '${obj.NAME}' has start ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.END, replacement)) {\n        return `Expense '${obj.NAME}' has end ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.VALUE, replacement)) {\n        return `Expense '${obj.NAME}' has value ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.VALUE_SET, replacement)) {\n        return `Expense '${obj.NAME}' has value set ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.GROWTH, replacement)) {\n        return `Expense '${obj.NAME}' has growth ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  const transactionMessages = model.transactions\n    .map(obj => {\n      if (usesWholeWord(obj.NAME, replacement)) {\n        return `Transaction '${obj.NAME}' has name ${messageWord} called ${replacement}`;\n      }\n      if (usesSeparatedString(obj.FROM, replacement)) {\n        return `Transaction '${obj.NAME}' has from ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.FROM_VALUE, replacement)) {\n        return `Transaction '${obj.NAME}' has from value ${messageWord} called ${replacement}`;\n      }\n      if (usesSeparatedString(obj.TO, replacement)) {\n        return `Transaction '${obj.NAME}' has to ${messageWord} called ${replacement}`;\n      }\n      if (usesNumberValueWord(obj.TO_VALUE, replacement)) {\n        return `Transaction '${obj.NAME}' has to value set ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.DATE, replacement)) {\n        return `Transaction '${obj.NAME}' has date ${messageWord} called ${replacement}`;\n      }\n      if (usesWholeWord(obj.STOP_DATE, replacement)) {\n        return `Transaction '${obj.NAME}' has stop date ${messageWord} called ${replacement}`;\n      }\n      return '';\n    })\n    .filter(obj => {\n      return obj.length > 0;\n    });\n  let message = `${settingMessages} ${triggerMessages} ${assetMessages} ${incomeMessages} ${expenseMessages} ${transactionMessages}`;\n  if (message.length <= 7) {\n    message = '';\n  }\n  return message;\n}\n\nexport function replaceNumberValueString(\n  value: string,\n  old: string,\n  replacement: string,\n) {\n  const parsed = getNumberAndWordParts(value);\n  if (parsed.wordPart === '') {\n    return value;\n  } else if (parsed.wordPart === old) {\n    return value.substring(0, value.length - old.length) + replacement;\n  } else {\n    return value;\n  }\n}\n\nexport function replaceSeparatedString(\n  value: string,\n  old: string,\n  replacement: string,\n) {\n  const parts = value.split(separator);\n  let result = '';\n  parts.forEach(obj => {\n    if (obj === old) {\n      result += replacement;\n    } else {\n      result += obj;\n    }\n    result += separator;\n  });\n  result = result.substr(0, result.length - separator.length);\n  return result;\n}\n\nexport function replaceWholeString(\n  value: string,\n  old: string,\n  replacement: string,\n) {\n  if (value !== old) {\n    return value;\n  } else {\n    return replacement;\n  }\n}\n","import React from 'react';\nimport { makeStringFromCashValue } from '../../stringUtils';\nimport { isNumberString } from '../../models/checks';\n// import { showObj } from ''../../utils''\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\ninterface CashValueFormatterProps {\n  name: string;\n  value: string;\n}\nclass CashValueFormatter extends React.Component<CashValueFormatterProps, {}> {\n  public render() {\n    let result: string;\n    if (isNumberString(this.props.value)) {\n      result = makeStringFromCashValue(this.props.value, '£');\n    } else {\n      result = this.props.value;\n    }\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip {...props}>{`${this.props.name}:${result}`}</Tooltip>\n        )}\n      >\n        <span className=\"float: right\">{result}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default CashValueFormatter;\n","import React from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport { log, printDebug, showObj } from '../../utils';\nimport { getTriggerDate } from '../../stringUtils';\nimport { Trigger } from '../../types/interfaces';\n/**\n * Samples:\n * https://adazzle.github.io/react-data-grid/examples.html#/all-features\n */\ninterface DataGridProps {\n  handleGridRowsUpdated: any; // TODO any\n  rows: any[]; // TODO any\n  columns: any[]; // TODO any\n  deleteFunction: ((name: string) => Promise<boolean>) | undefined;\n  triggers: Trigger[];\n}\ninterface DataGridState {\n  colSortIndex: string;\n  sortDirection: 'ASC' | 'DESC' | 'NONE';\n}\nclass DataGrid extends React.Component<DataGridProps, DataGridState> {\n  sortedIndices: number[];\n\n  public constructor(props: DataGridProps) {\n    super(props);\n    this.sortedIndices = props.rows.map(row => {\n      return row['index'];\n    });\n    // log(`row indices are ${props.rows.map((r)=>{return r['index'];})}`);\n    // log(`sortedIndices are ${this.sortedIndices}`);\n    this.state = {\n      colSortIndex: 'index',\n      sortDirection: 'NONE',\n    };\n    this.handleSort(this.state.colSortIndex, 'NONE');\n  }\n\n  public rowGetter(i: number) {\n    if (printDebug()) {\n      log(\n        `in rowgetter, this.props.rows indices = ${this.props.rows.map(r => {\n          return r['index'];\n        })}`,\n      );\n      log(`look for row i = ${i}`);\n      log(`this.sortedIndices = ${this.sortedIndices}`);\n    }\n\n    const result = this.props.rows.filter(row => {\n      return row['index'] === this.sortedIndices[i];\n    })[0];\n    //if(result == undefined){\n    //  log(`in rowgetter, result row ${i} has sorted index ${this.sortedIndices[i]} and row = undefined`);\n    //}\n    return result;\n  }\n  public getSize() {\n    return this.props.rows.length;\n  }\n\n  private handleSort(\n    sortColumn: string,\n    sortDirection: 'ASC' | 'DESC' | 'NONE',\n  ) {\n    //log(`this.props.rows.slice() indices = ${showObj(this.props.rows.slice().map((row)=>{\n    //  return row['index'];\n    //}))}`);\n\n    if (sortDirection === 'NONE') {\n      this.sortedIndices = this.props.rows\n        .slice()\n        .sort((a, b) => {\n          const ai = a['index'];\n          const bi = b['index'];\n          return ai < bi ? 1 : ai > bi ? -1 : 0;\n        })\n        .map(row => {\n          return row['index'];\n        });\n      // log(`unsortedIndices = ${showObj(this.sortedIndices)}`);\n      return;\n    }\n\n    this.sortedIndices = this.props.rows\n      .slice()\n      .sort((a, b) => {\n        // log(`sortColumn = ${sortColumn}`);\n        let aVal = a[sortColumn];\n        let bVal = b[sortColumn];\n        if (printDebug()) {\n          log(`aVal = ${showObj(aVal)}, bVal = ${showObj(bVal)}`);\n        }\n        if (aVal === undefined || bVal === undefined) {\n          aVal = a[this.props.columns[0]];\n          bVal = b[this.props.columns[0]];\n        }\n        if (\n          sortColumn === 'DATE' ||\n          sortColumn === 'START' ||\n          sortColumn === 'END' ||\n          sortColumn === 'VALUE_SET'\n        ) {\n          // log(`sortColumn is time-based`);\n          const aTimeVal = getTriggerDate(aVal, this.props.triggers).getTime();\n          const bTimeVal = getTriggerDate(bVal, this.props.triggers).getTime();\n          // this puts trigers seperate from dates\n          // const aTimeVal = new Date(aVal).getTime();\n          // const bTimeVal = new Date(bVal).getTime();\n          // log(`aTimeVal = ${aTimeVal}, bTimeVal = ${bTimeVal}`);\n          const aIsDate = !Number.isNaN(aTimeVal);\n          const bIsDate = !Number.isNaN(bTimeVal);\n          // log(`aIsDate = ${aIsDate}, bIsDate = ${bIsDate}`);\n          if (aIsDate && !bIsDate) {\n            // log('return 1');\n            return 1;\n          } else if (!aIsDate && bIsDate) {\n            // log('return -1');\n            return -1;\n          } else if (aIsDate && bIsDate) {\n            aVal = aTimeVal;\n            bVal = bTimeVal;\n          }\n          //log(`aVal = ${showObj(aVal)}, bVal = ${showObj(bVal)}`);\n        } else if (\n          sortColumn === 'VALUE' ||\n          sortColumn === 'FROM_VALUE' ||\n          sortColumn === 'TO_VALUE'\n        ) {\n          if (aVal.endsWith('%') && !bVal.endsWith('%')) {\n            return this.state.sortDirection === 'ASC' ? +1 : -1;\n          } else if (!aVal.endsWith('%') && bVal.endsWith('%')) {\n            return this.state.sortDirection === 'ASC' ? -1 : +1;\n          }\n          const paVal = parseFloat(aVal);\n          const pbVal = parseFloat(bVal);\n          if (Number.isNaN(paVal) && !Number.isNaN(pbVal)) {\n            return this.state.sortDirection === 'ASC' ? 1 : -1;\n          }\n          if (!Number.isNaN(paVal) && Number.isNaN(pbVal)) {\n            return this.state.sortDirection === 'ASC' ? -1 : +1;\n          } else if (!Number.isNaN(paVal) && !Number.isNaN(pbVal)) {\n            return paVal < pbVal\n              ? this.state.sortDirection === 'ASC'\n                ? +1\n                : -1\n              : paVal > pbVal\n              ? this.state.sortDirection === 'ASC'\n                ? -1\n                : +1\n              : 0;\n          }\n        } else if (sortColumn === 'index') {\n        } else if (aVal !== undefined && bVal !== undefined) {\n          aVal = aVal.toUpperCase();\n          bVal = bVal.toUpperCase();\n        }\n        // log(`aVal = ${aVal}, bVal = ${bVal}`);\n        if (aVal < bVal) {\n          if (this.state.sortDirection === 'ASC') {\n            return +1;\n          } else {\n            return -1;\n          }\n        } else if (aVal > bVal) {\n          if (this.state.sortDirection === 'ASC') {\n            return -1;\n          } else {\n            return +1;\n          }\n        } else {\n          return 0;\n        }\n      })\n      .map(row => {\n        return row['index'];\n      });\n  }\n\n  private sortHandler(\n    sortColumn: string,\n    sortDirection: 'ASC' | 'DESC' | 'NONE',\n  ) {\n    // log(`sortColumn = ${sortColumn}`);\n    // log(`sortDirection = ${sortDirection}`);\n    this.setState({\n      colSortIndex: sortColumn,\n      sortDirection: sortDirection,\n    });\n\n    // run the sort in the render function instead\n    // to ensure sortedIndices gets updated when needed\n    // this.handleSort(sortColumn, sortDirection);\n    // log(`sortedIndices = ${showObj(this.sortedIndices)}`);\n  }\n\n  private getCellActions(column: ReactDataGrid.Column<any>, row: any) {\n    // log(`get cell actions?`);\n    if (column.key === 'NAME' && this.props.deleteFunction !== undefined) {\n      // log(`add glyph`);\n      return [\n        {\n          icon: 'fa fa-trash',\n          callback: async () => {\n            if (this.props.deleteFunction !== undefined) {\n              await this.props.deleteFunction(row['NAME']);\n              this.sortHandler(\n                this.state.colSortIndex,\n                this.state.sortDirection,\n              );\n              //log(`this.props.rows.length = ${this.props.rows.length}`);\n              //log(`this.sortedIndices = ${this.sortedIndices}`);\n            }\n          },\n        },\n      ];\n    } else {\n      return [];\n    }\n  }\n\n  public render() {\n    this.handleSort(this.state.colSortIndex, this.state.sortDirection);\n    return (\n      <ReactDataGrid\n        columns={this.props.columns}\n        rowGetter={this.rowGetter.bind(this)}\n        rowsCount={this.props.rows.length}\n        onGridRowsUpdated={this.props.handleGridRowsUpdated}\n        minHeight={this.props.rows.length * 35 + 50}\n        // minWidth={500}\n        enableCellSelect={true}\n        enableRowSelect={undefined}\n        onGridSort={this.sortHandler.bind(this)}\n        getCellActions={this.getCellActions.bind(this)}\n      />\n    );\n  }\n}\n\nexport default DataGrid;\n","import React from 'react';\nimport { Setting } from '../../types/interfaces';\nimport { makeStringFromGrowth } from '../../stringUtils';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\ninterface GrowthFormatterProps {\n  name: string;\n  value: string;\n  settings: Setting[];\n}\nclass GrowthFormatter extends React.Component<GrowthFormatterProps, {}> {\n  public render() {\n    const x = makeStringFromGrowth(this.props.value, this.props.settings);\n    // log(`string representtation of ${this.props.value} is ${x}`);\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip {...props}>{`${this.props.name}:${x}`}</Tooltip>\n        )}\n      >\n        <span>{x}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default GrowthFormatter;\n","import React from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport {\n  getNumberAndWordParts,\n  makeStringFromCashValue,\n} from '../../stringUtils';\n\ninterface SimpleFormatterProps {\n  name: string;\n  value: string;\n}\nexport class SimpleFormatter extends React.Component<SimpleFormatterProps, {}> {\n  public render() {\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip\n            {...props}\n          >{`${this.props.name}:${this.props.value}`}</Tooltip>\n        )}\n      >\n        <span>{this.props.value}</span>\n      </OverlayTrigger>\n    );\n  }\n}\nexport class SettingFormatter extends React.Component<\n  SimpleFormatterProps,\n  {}\n> {\n  public render() {\n    const rawValue = this.props.value;\n    let tidyValue = rawValue;\n\n    const nwp = getNumberAndWordParts(rawValue);\n    if (nwp.wordPart === 'USD' && nwp.numberPart !== undefined) {\n      tidyValue = `${makeStringFromCashValue(\n        nwp.numberPart.toFixed(2),\n        '',\n      )}USD`;\n    }\n\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip {...props}>{`${this.props.name}:${tidyValue}`}</Tooltip>\n        )}\n      >\n        <span>{tidyValue}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n","import React from 'react';\nimport { makeStringFromFromToValue } from '../../stringUtils';\nimport { isNumberString } from '../../models/checks';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\ninterface ToFromValueFormatterProps {\n  name: string;\n  value: string;\n}\nclass ToFromValueFormatter extends React.Component<\n  ToFromValueFormatterProps,\n  {}\n> {\n  public render() {\n    let result: string;\n    if (isNumberString(this.props.value)) {\n      result = makeStringFromFromToValue(this.props.value);\n    } else {\n      result = this.props.value;\n    }\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip {...props}>{`${this.props.name}:${result}`}</Tooltip>\n        )}\n      >\n        <span className=\"float: right\">{result}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default ToFromValueFormatter;\n","import React from 'react';\nimport { ModelData } from '../../types/interfaces';\nimport { log, printDebug } from '../../utils';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport { makeDateTooltip, dateFormatOptions } from '../../stringUtils';\n\ninterface TriggerDateFormatterProps {\n  name: string;\n  value: string;\n  model: ModelData;\n  showTime: boolean;\n}\n\nfunction makeDateTooltipLocal(props: TriggerDateFormatterProps) {\n  // log(`make tooltip with ${showObj(props)}`);\n  if (props.model.settings.length === 0) {\n    return '';\n  }\n  return makeDateTooltip(props.value, props.model.triggers);\n}\nclass TriggerDateFormatter extends React.Component<\n  TriggerDateFormatterProps,\n  {}\n> {\n  public render() {\n    let tableValue = this.props.value;\n    const asDate = new Date(this.props.value);\n    if (!Number.isNaN(asDate.getTime())) {\n      if (this.props.showTime) {\n        if (printDebug()) {\n          log(`date to be shown with time = ${this.props.value}`);\n        }\n        tableValue = asDate.toLocaleString();\n      } else {\n        tableValue = asDate.toLocaleDateString(undefined, dateFormatOptions);\n      }\n    }\n    return (\n      <OverlayTrigger\n        placement=\"top\"\n        overlay={(props: any) => (\n          <Tooltip {...props}>{`${this.props.name}:${makeDateTooltipLocal(\n            this.props,\n          )}`}</Tooltip>\n        )}\n      >\n        <span>{tableValue}</span>\n      </OverlayTrigger>\n    );\n  }\n}\n\nexport default TriggerDateFormatter;\n","import React, { Component } from 'react';\nimport { finkittyButtonType } from '../../types/interfaces';\nimport { log, printDebug } from './../../utils';\n\ninterface ButtonProps {\n  type: finkittyButtonType;\n  id: string;\n  action: (e: any) => void; // TODO any : MouseEvent?\n  title: string;\n  disabled: boolean;\n}\n\nclass Button extends Component<ButtonProps, {}> {\n  public constructor(props: ButtonProps) {\n    super(props);\n  }\n\n  render() {\n    const spacer = ' mr-1 mb-1';\n    const className = `btn btn-${this.props.type}${spacer}`;\n    return (\n      <button\n        onClick={this.props.action}\n        id={this.props.id} // id can be checked by selenium\n        type={this.props.type === 'primary' ? 'submit' : 'button'}\n        className={className}\n        disabled={this.props.disabled}\n      >\n        {this.props.title}\n      </button>\n    );\n  }\n}\n\nexport function makeButton(\n  title: string,\n  action: React.MouseEventHandler<HTMLButtonElement>,\n  key: string,\n  id: string,\n  type: finkittyButtonType,\n  disabled?: boolean,\n) {\n  if (printDebug()) {\n    log(`making a Button for ${title}`);\n  }\n  return (\n    <Button\n      key={key}\n      action={action}\n      title={title}\n      id={id}\n      type={type}\n      disabled={disabled === undefined ? false : disabled}\n    />\n  );\n}\n","import React from 'react';\n// import { showObj } from '../../utils'\n\ninterface ReactiveTextAreaProps {\n  identifier: string;\n  message: string;\n}\nclass ReactiveTextArea extends React.Component<ReactiveTextAreaProps, {}> {\n  public render() {\n    return (\n      <div style={{ display: 'none' }}>\n        <textarea\n          readOnly\n          id={this.props.identifier}\n          value={this.props.message}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ReactiveTextArea;\n","import React from 'react';\n\nexport const Input = props => {\n  //log(props.value);\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={props.name} className=\"form-label\">\n        {props.title}\n      </label>\n      <input\n        className=\"form-control\"\n        id={props.name}\n        name={props.name}\n        type={props.type}\n        value={props.value}\n        onChange={props.onChange}\n        onBlur={props.onBlur}\n        placeholder={props.placeholder}\n      />\n    </div>\n  );\n};\n\nexport const InputRow = props => {\n  //log(props.value);\n  return (\n      <div className=\"form-group row\">\n      <label htmlFor={props.name} className=\"col-sm col-form-label\">\n        {props.title}\n      </label>\n      <div className=\"col-sm\">\n      <input\n        className=\"form-control\"\n        id={props.name}\n        name={props.name}\n        type={props.type}\n        value={props.value}\n        onChange={props.onChange}\n        onSubmit={props.onSubmit}\n        onBlur={props.onBlur}\n        placeholder={props.placeholder}\n      />\n      </div>\n    </div>\n  );\n};\n","import React, { Component, FormEvent } from 'react';\n\nimport { log, printDebug, showObj } from '../../utils';\nimport { InputRow } from './Input';\n\ninterface EditFormState {\n  VALUE: string;\n}\ninterface EditProps {\n  name: string;\n  getValue: () => string;\n  submitFunction: (value: string) => Promise<any>;\n  showAlert: (message: string) => void;\n}\nexport class AddDeleteEntryForm extends Component<EditProps, EditFormState> {\n  public constructor(props: EditProps) {\n    super(props);\n    if (printDebug()) {\n      log('props for AddDeleteEntryForm: ' + showObj(props));\n    }\n\n    this.state = {\n      VALUE: this.props.getValue(),\n    };\n\n    this.handleValue = this.handleValue.bind(this);\n    this.add = this.add.bind(this);\n  }\n  public render() {\n    //log(`rendering widget, title = ${this.props.name}`);\n    //log(`rendering widget, value from callback = ${this.props.getValue()}`);\n    //log(`rendering widget, value in component = ${this.state.VALUE}`);\n    return (\n      <form className=\"container-fluid\" onSubmit={this.add}>\n        <InputRow\n          title={`${this.props.name}`}\n          type={'text'}\n          name={`EditWidget${this.props.name}`}\n          value={this.state.VALUE}\n          placeholder={this.props.getValue()}\n          onChange={this.handleValue}\n        />\n      </form>\n    );\n  }\n  private handleValue(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ VALUE: value });\n  }\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n    // log('adding something ' + showObj(this));\n    await this.props.submitFunction(this.state.VALUE);\n    this.props.showAlert(`updating`);\n  }\n}\n","import { Col } from 'react-bootstrap';\nimport {\n  ChartData,\n  ChartSettings,\n  finkittyButtonType,\n  ItemCategory,\n  ModelData,\n  Setting,\n} from '../types/interfaces';\nimport {\n  allItems,\n  annually,\n  chartAdditions,\n  chartDeltas,\n  chartReductions,\n  chartVals,\n  chartViewType,\n  birthDate,\n  coarse,\n  fine,\n  gain,\n  income,\n  monthly,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n  taxView,\n  total,\n  viewDetail,\n  viewFrequency,\n  cpPrefix,\n  penPrefix,\n} from '../localization/stringConstants';\nimport { getDisplay, refreshData } from '../App';\nimport { Context, log, printDebug, showObj } from '../utils';\n\nimport { makeButton } from './reactComponents/Button';\nimport React from 'react';\nimport ReactiveTextArea from './reactComponents/ReactiveTextArea';\nimport { ViewSettings } from '../models/charting';\nimport { AddDeleteEntryForm } from './reactComponents/AddDeleteEntryForm';\nimport { getSettings, getLiabilityPeople } from '../models/modelUtils';\n\nimport { Bar } from 'react-chartjs-2';\n\nimport { Container } from 'react-bootstrap';\nimport dateFormat from 'dateformat';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip as ChartTooltip,\n  Legend,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  ChartTooltip,\n  Legend,\n);\n\nfunction getCoarseFineView(settings: ViewSettings) {\n  return settings.getViewSetting(viewDetail, fine);\n}\n\nfunction getAssetChartView(settings: ViewSettings) {\n  return settings.getViewSetting(chartViewType, chartVals);\n}\n\nfunction getTaxPerson(settings: ViewSettings) {\n  return settings.getViewSetting(taxChartFocusPerson, allItems);\n}\n\nfunction getTaxType(settings: ViewSettings) {\n  return settings.getViewSetting(taxChartFocusType, allItems);\n}\n\nfunction getTaxShowNet(settings: ViewSettings) {\n  const type = settings.getViewSetting(taxChartShowNet, allItems);\n  return type === 'Y' || type === 'y' || type === 'yes';\n}\n\nasync function setViewSettingNameVal(\n  settings: ViewSettings,\n  name: string,\n  val: string,\n) {\n  settings.setViewSetting(name, val);\n  return await refreshData(\n    false, // refreshModel = true,\n    true, // refreshChart = true,\n    23, //sourceID\n  );\n}\n\nfunction makeFilterButton(\n  buttonName: string,\n  settings: ViewSettings,\n  context: Context,\n  refreshModel: boolean,\n  isCategory: boolean,\n) {\n  let id = '';\n  if (context === Context.Income) {\n    id = `select-${buttonName}`;\n  } else if (context === Context.Expense) {\n    id = `select-${buttonName}`;\n  } else if (context === Context.Asset) {\n    id = `chooseAssetOrDebtChartSetting--asset-${buttonName}`;\n  } else if (context === Context.Debt) {\n    id = `chooseAssetOrDebtChartSetting--debt-${buttonName}`;\n  }\n\n  let type: finkittyButtonType = 'primary';\n  if (isCategory) {\n    type = settings.highlightButton(context, buttonName)\n      ? 'success'\n      : 'outline-success';\n  } else {\n    type = settings.highlightButton(context, buttonName)\n      ? 'primary'\n      : 'outline-primary';\n  }\n\n  return makeButton(\n    buttonName,\n    async (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.persist();\n      settings.toggleViewFilter(context, buttonName);\n      return await refreshData(\n        refreshModel, // refreshModel = true,\n        true, // refreshChart = true,\n        24, //sourceID\n      );\n    },\n    buttonName,\n    id,\n    type,\n  );\n}\n\nexport function filtersList(\n  items: ItemCategory[],\n  settings: ViewSettings,\n  context: Context,\n  refreshModel: boolean,\n) {\n  const incomeOrExpenseNames: string[] = items\n    .map(data => data.NAME)\n    .sort((a: string, b: string) => {\n      const aCP = a.startsWith(cpPrefix);\n      const bCP = b.startsWith(cpPrefix);\n      if (aCP && !bCP) {\n        return 1;\n      } else if (!aCP && bCP) {\n        return -1;\n      } else {\n        const aP = a.startsWith(penPrefix);\n        const bP = b.startsWith(penPrefix);\n        if (aP && !bP) {\n          return 1;\n        } else if (!aP && bP) {\n          return -1;\n        } else {\n          if (a === b) {\n            return 0;\n          } else {\n            const aLTb = a < b;\n            return aLTb ? -1 : 1;\n          }\n        }\n      }\n    });\n\n  const buttons = incomeOrExpenseNames.map(buttonName => {\n    return makeFilterButton(buttonName, settings, context, refreshModel, false);\n  });\n  const categories: string[] = [];\n  items.forEach(data => {\n    const cat = data.CATEGORY;\n    if (cat !== '') {\n      if (categories.indexOf(cat) < 0) {\n        categories.push(cat);\n      }\n    }\n  });\n  categories.sort();\n  categories.unshift(allItems);\n  const categoryButtons = categories.map(buttonName => {\n    return makeFilterButton(buttonName, settings, context, refreshModel, true);\n  });\n\n  return (\n    <>\n      <div role=\"group\">{categoryButtons}</div>\n      <div role=\"group\">{buttons}</div>\n    </>\n  );\n}\n\nexport function coarseFineList(settings: ViewSettings) {\n  const viewTypes: string[] = [total, coarse, fine];\n  const selectedCoarseFineView = getCoarseFineView(settings);\n  const buttons = viewTypes.map(viewType =>\n    makeButton(\n      viewType,\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(settings, viewDetail, viewType);\n      },\n      viewType,\n      `chooseViewDetailType${viewType}`,\n      viewType === selectedCoarseFineView ? 'secondary' : 'outline-secondary',\n    ),\n  );\n  return <div role=\"group\">{buttons}</div>;\n}\n\nexport function frequencyList(settings: ViewSettings) {\n  const viewTypes: string[] = [monthly, annually];\n  const selectedView = settings.getViewSetting(viewFrequency, annually);\n  const buttons = viewTypes.map(viewType =>\n    makeButton(\n      viewType,\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(settings, viewFrequency, viewType);\n      },\n      viewType,\n      'chooseViewFrequencyType',\n      viewType === selectedView ? 'secondary' : 'outline-secondary',\n    ),\n  );\n  return <div role=\"group\">{buttons}</div>;\n}\n\nexport function getDefaultChartSettings(\n  settings: ViewSettings,\n  modelSettings: Setting[],\n): ChartSettings {\n  //const showMonth =\n  //  settings.getViewSetting(viewFrequency, annually) === monthly;\n  const showAge = getSettings(modelSettings, birthDate, '') !== '';\n  return {\n    isSmall: false,\n    height: 300,\n    toolTip: {\n      content: '{name}: {ttip}',\n    },\n    // width: 800,\n\n    legend: {\n      // fontSize: 30,\n      fontFamily: 'Helvetica',\n      fontWeight: 'normal',\n      horizontalAlign: 'right', // left, center ,right\n      verticalAlign: 'center', // top, center, bottom\n      display: true,\n    },\n\n    axisX: {\n      labelFormatter: function(e: { label: string }) {\n        if (printDebug()) {\n          log(`e.value = ${e.label}`);\n          log(`showAge = ${showAge}`);\n        }\n        return e.label;\n      },\n    },\n  };\n}\n\nexport function getSmallerChartSettings(\n  settings: ViewSettings,\n  modelSettings: Setting[],\n  title: string,\n): ChartSettings {\n  return {\n    ...getDefaultChartSettings(settings, modelSettings),\n    isSmall: true,\n    height: 200,\n    width: 400,\n    title: {\n      display: true,\n      text: title,\n    },\n    // see also suppressLegend()\n    legend: {\n      fontFamily: 'Helvetica',\n      fontWeight: 'normal',\n      horizontalAlign: 'right', // left, center ,right\n      verticalAlign: 'center', // top, center, bottom\n      display: false,\n    },\n  };\n}\n\nfunction makeBarChart(\n  data: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n) {\n  return (\n    <Bar\n      options={{\n        plugins: {\n          title: {\n            display:\n              chartSettings.title !== undefined && chartSettings.title.display,\n            text:\n              chartSettings.title !== undefined ? chartSettings.title.text : '',\n          },\n          legend: {\n            display: data.displayLegend,\n            position: 'right',\n          },\n        },\n        animation: {\n          duration: 0,\n        },\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            stacked: true,\n            ticks: {\n              callback: function(value, index, values) {\n                if (printDebug()) {\n                  log(\n                    `convert value ${value}, ${showObj(\n                      values[index],\n                    )} to make tick text`,\n                  );\n                }\n                const l = data.labels[index];\n                const d = new Date(l);\n                const showMonth =\n                  viewSettings.getViewSetting(viewFrequency, annually) ===\n                  monthly;\n                if (showMonth) {\n                  return dateFormat(d, 'mmmm yyyy');\n                } else {\n                  return dateFormat(d, 'yyyy');\n                }\n              },\n            },\n          },\n          y: {\n            stacked: true,\n          },\n        },\n      }}\n      data={data}\n    />\n  );\n}\n\nfunction makeContainedBarChart(\n  data: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n) {\n  //  return (<Container>\n  return (\n    <Container style={{ height: `${chartSettings.height}px` }}>\n      {makeBarChart(data, chartSettings, viewSettings)}\n    </Container>\n  );\n}\n\nfunction incomesChart(\n  incomesChartData: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n) {\n  if (chartSettings.isSmall) {\n    return makeBarChart(incomesChartData, chartSettings, viewSettings);\n  } else {\n    return makeContainedBarChart(incomesChartData, chartSettings, viewSettings);\n  }\n}\n\nfunction noDataToDisplayFragment(\n  word: string,\n  model: ModelData | undefined = undefined,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  // log(`in noDataToDisplayFragment`);\n  if (\n    model === undefined ||\n    showAlert === undefined ||\n    getStartDate === undefined ||\n    updateStartDate === undefined ||\n    getEndDate === undefined ||\n    updateEndDate === undefined\n  ) {\n    return (\n      <>\n        <br />\n        No {word} data in range\n        <br />\n        <br />\n      </>\n    );\n  } else {\n    let hasData = false;\n    if (word === 'income') {\n      hasData = model.incomes.length > 0;\n    } else if (word === 'expense') {\n      hasData = model.expenses.length > 0;\n    } else if (word === 'asset') {\n      hasData =\n        model.assets.filter(a => {\n          return a.IS_A_DEBT === false;\n        }).length > 0;\n    } else if (word === 'debt') {\n      hasData =\n        model.assets.filter(a => {\n          return a.IS_A_DEBT === true;\n        }).length > 0;\n    }\n    // log(`hasData = ${hasData}`);\n    if (!hasData) {\n      return <></>;\n    } else {\n      return (\n        <>\n          No {word}s data - add {word}, change view filters, or adjust display\n          range\n          <br />\n          <div className=\"d-inline-flex p-2\">\n            <AddDeleteEntryForm\n              name=\"view start date\"\n              getValue={getStartDate}\n              submitFunction={updateStartDate}\n              showAlert={showAlert}\n            />\n            <AddDeleteEntryForm\n              name=\"view end date\"\n              getValue={getEndDate}\n              submitFunction={updateEndDate}\n              showAlert={showAlert}\n            />\n          </div>\n          <br />\n          <br />\n        </>\n      );\n    }\n  }\n}\n\nexport function incomesChartDiv(\n  incomesChartData: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n  model: ModelData | undefined = undefined,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n): JSX.Element {\n  if (incomesChartData.labels.length === 0) {\n    log(`incomesChartData.length === 0, no data`);\n    return noDataToDisplayFragment(\n      'income',\n      model,\n      showAlert,\n      getStartDate,\n      updateStartDate,\n      getEndDate,\n      updateEndDate,\n    );\n  } else {\n    return incomesChart(incomesChartData, chartSettings, viewSettings);\n  }\n}\nexport function incomesChartDivWithButtons(\n  model: ModelData,\n  settings: ViewSettings,\n  incomesChartData: ChartData,\n  chartSettings: ChartSettings,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (model.incomes.length === 0) {\n    return (\n      <>\n        <ReactiveTextArea\n          identifier=\"incomeDataDump\"\n          message={showObj(incomesChartData)}\n        />\n        {noDataToDisplayFragment(\n          'income',\n          model,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )}\n      </>\n    );\n  } else {\n    return (\n      <div\n        style={{\n          display: 'block',\n        }}\n      >\n        <ReactiveTextArea\n          identifier=\"incomeDataDump\"\n          message={showObj(incomesChartData)}\n        />\n        {filtersList(model.incomes, settings, Context.Income, false)}\n        {coarseFineList(settings)}\n        {incomesChartDiv(\n          incomesChartData,\n          chartSettings,\n          settings,\n          model,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )}\n      </div>\n    );\n  }\n}\n\nfunction expensesChart(\n  expensesChartData: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n) {\n  return makeContainedBarChart(expensesChartData, chartSettings, viewSettings);\n}\n\nexport function expensesChartDiv(\n  expensesChartData: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n  model: ModelData | undefined = undefined,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (expensesChartData.labels.length === 0) {\n    return noDataToDisplayFragment(\n      'expense',\n      model,\n      showAlert,\n      getStartDate,\n      updateStartDate,\n      getEndDate,\n      updateEndDate,\n    );\n  } else {\n    return expensesChart(expensesChartData, chartSettings, viewSettings);\n  }\n}\n\nexport function expensesChartDivWithButtons(\n  model: ModelData,\n  settings: ViewSettings,\n  expensesChartData: ChartData,\n  chartSettings: ChartSettings,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (model.expenses.length === 0) {\n    return (\n      <>\n        <ReactiveTextArea\n          identifier=\"expenseDataDump\"\n          message={showObj(expensesChartData)}\n        />\n        {noDataToDisplayFragment(\n          'expense',\n          model,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )}\n      </>\n    );\n  } else {\n    return (\n      <div\n        style={{\n          display: 'block',\n        }}\n      >\n        <ReactiveTextArea\n          identifier=\"expenseDataDump\"\n          message={showObj(expensesChartData)}\n        />\n        {filtersList(model.expenses, settings, Context.Expense, false)}\n        {coarseFineList(settings)}\n        <fieldset>\n          {expensesChartDiv(\n            expensesChartData,\n            chartSettings,\n            settings,\n            model,\n            showAlert,\n            getStartDate,\n            updateStartDate,\n            getEndDate,\n            updateEndDate,\n          )}\n        </fieldset>\n      </div>\n    );\n  }\n}\n\nfunction assetViewTypeList(settings: ViewSettings) {\n  const viewTypes: string[] = [\n    chartVals,\n    chartAdditions,\n    chartReductions,\n    chartDeltas,\n  ];\n  const selectedAssetView = getAssetChartView(settings);\n  const buttons = viewTypes.map(viewType =>\n    makeButton(\n      viewType,\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(settings, chartViewType, viewType);\n      },\n      viewType,\n      'chooseAssetChartType',\n      viewType === selectedAssetView ? 'primary' : 'outline-primary',\n    ),\n  );\n  return <div role=\"group\">{buttons}</div>;\n}\n\nexport function assetsOrDebtsChartDiv(\n  assetChartData: ChartData,\n  isDebt: boolean,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n  model: ModelData | undefined = undefined,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (assetChartData.labels.length === 0) {\n    return noDataToDisplayFragment(\n      isDebt ? 'debt' : 'asset',\n      model,\n      showAlert,\n      getStartDate,\n      updateStartDate,\n      getEndDate,\n      updateEndDate,\n    );\n  } else {\n    return makeContainedBarChart(assetChartData, chartSettings, viewSettings);\n  }\n}\n\nexport function assetsOrDebtsChartDivWithButtons(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  assetChartData: ChartData,\n  isDebt: boolean,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (\n    model.assets.filter(a => {\n      return a.IS_A_DEBT === isDebt;\n    }).length === 0\n  ) {\n    const word = isDebt ? 'debt' : 'asset';\n    const dataDumpName = `${word}DataDump`;\n    return (\n      <>\n        <ReactiveTextArea\n          identifier={dataDumpName}\n          message={showObj(assetChartData)}\n        />\n        {noDataToDisplayFragment(\n          word,\n          model,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )}\n      </>\n    );\n  } else {\n    // log(`assetChartData = ${assetChartData}`);\n    const context = isDebt ? Context.Debt : Context.Asset;\n    const items = model.assets.filter(obj => {\n      return obj.IS_A_DEBT === (context === Context.Debt);\n    });\n\n    return (\n      <div\n        style={{\n          display: 'block',\n        }}\n      >\n        {filtersList(items, viewSettings, context, false)}\n        {assetViewTypeList(viewSettings)}\n        {coarseFineList(viewSettings)}\n        <ReactiveTextArea\n          identifier={isDebt ? 'debtDataDump' : 'assetDataDump'}\n          message={showObj(assetChartData)}\n        />\n        {assetsOrDebtsChartDiv(\n          assetChartData,\n          isDebt,\n          getDefaultChartSettings(viewSettings, model.settings),\n          viewSettings,\n          model,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )}\n      </div>\n    );\n  }\n}\n\nfunction taxButtonList(model: ModelData, viewSettings: ViewSettings) {\n  const liabilityPeople = getLiabilityPeople(model);\n  liabilityPeople.unshift(allItems);\n\n  // console.log(`liablityPeople for tax buttons is ${showObj(liabilityPeople)}`);\n  const buttons = liabilityPeople.map(person =>\n    makeButton(\n      person === allItems ? 'All people' : person,\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartFocusPerson, person);\n      },\n      person === allItems ? 'All people' : person,\n      `chooseTaxSetting-${person}`,\n      person === getTaxPerson(viewSettings) ? 'primary' : 'outline-primary',\n    ),\n  );\n  buttons.push(\n    makeButton(\n      'All types',\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartFocusType, allItems);\n      },\n      'All types',\n      `chooseTaxType-all`,\n      getTaxType(viewSettings) === allItems ? 'secondary' : 'outline-secondary',\n    ),\n  );\n  buttons.push(\n    makeButton(\n      'Income',\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartFocusType, income);\n      },\n      'income',\n      `chooseTaxType-income`,\n      getTaxType(viewSettings) === income ? 'secondary' : 'outline-secondary',\n    ),\n  );\n  buttons.push(\n    makeButton(\n      'Gain',\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartFocusType, gain);\n      },\n      'gain',\n      `chooseTaxType-gain`,\n      getTaxType(viewSettings) === gain ? 'secondary' : 'outline-secondary',\n    ),\n  );\n  buttons.push(\n    makeButton(\n      'Show net',\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartShowNet, 'Y');\n      },\n      'Show net',\n      `chooseTaxType-showNet`,\n      getTaxShowNet(viewSettings) ? 'success' : 'outline-success',\n    ),\n  );\n  buttons.push(\n    makeButton(\n      'Hide net',\n      (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        setViewSettingNameVal(viewSettings, taxChartShowNet, 'N');\n      },\n      'Hide net',\n      `chooseTaxType-hideNet`,\n      !getTaxShowNet(viewSettings) ? 'success' : 'outline-success',\n    ),\n  );\n  return <div role=\"group\">{buttons}</div>;\n}\nexport function taxChartDiv(\n  taxChartData: ChartData,\n  chartSettings: ChartSettings,\n  viewSettings: ViewSettings,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (taxChartData.labels.length === 0) {\n    if (\n      showAlert === undefined ||\n      getStartDate === undefined ||\n      updateStartDate === undefined ||\n      getEndDate === undefined ||\n      updateEndDate === undefined\n    ) {\n      return (\n        <>\n          <br />\n          No tax data to display\n          <br />\n          <br />\n        </>\n      );\n    } else {\n      return (\n        <>\n          No tax data - none payable or adjust display range\n          <Col>\n            <AddDeleteEntryForm\n              name=\"view start date\"\n              getValue={getStartDate}\n              submitFunction={updateStartDate}\n              showAlert={showAlert}\n            />\n            <AddDeleteEntryForm\n              name=\"view end date\"\n              getValue={getEndDate}\n              submitFunction={updateEndDate}\n              showAlert={showAlert}\n            />\n          </Col>\n        </>\n      );\n    }\n  }\n  return makeContainedBarChart(taxChartData, chartSettings, viewSettings);\n}\n\nfunction taxChartDivWithButtons(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  taxChartData: ChartData,\n  settings: ChartSettings,\n  showAlert: ((arg0: string) => void) | undefined = undefined,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  return (\n    <>\n      {taxButtonList(model, viewSettings)}\n      {coarseFineList(viewSettings)}\n      {taxChartDiv(\n        taxChartData,\n        settings,\n        viewSettings,\n        showAlert,\n        getStartDate,\n        updateStartDate,\n        getEndDate,\n        updateEndDate,\n      )}\n    </>\n  );\n}\nexport function taxDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  taxChartData: ChartData,\n) {\n  if (!getDisplay(taxView)) {\n    // log(`don't populate taxView`);\n    return;\n  }\n  // log(`do populate taxView`);\n\n  return (\n    <div className=\"ml-3\">\n      {taxChartDivWithButtons(\n        model,\n        viewSettings,\n        taxChartData,\n        getDefaultChartSettings(viewSettings, model.settings),\n      )}\n    </div>\n  );\n}\n/*\nimport {\n  IReactVisChartPoint,\n} from './reactComponents/ReactVisExample';\n*/\n\n/*\nfunction convertChartDatum(z: IChartDataPoint, name: string): IReactVisChartPoint {\n  log(`IChartDataPoint z is ${showObj(z)}`);\n  const result: IReactVisChartPoint = {\n    x: z.label,\n    y: z.y,\n    ttip: `${name} ${z.ttip}`,\n  };\n  log(`converted result is ${showObj(result)}`);\n  return result;\n}\n\nfunction makeReactVisChartData(x: IChartData): IReactVisChartPoint[] {\n  const result = x.dataPoints.map(w => convertChartDatum(w, x.name));\n  // log(`${result}`);\n  return result;\n}\n*/\n","// note JSON stringify and back for serialisation is OK but\n\nimport {\n  valueFocusDate,\n  roiStart,\n  viewType,\n  roiEnd,\n  separator,\n  cgt,\n  incomeTax,\n  nationalInsurance,\n} from '../localization/stringConstants';\nimport {\n  getSpecialWord,\n  checkForWordClashInModel,\n  replaceWholeString,\n  replaceNumberValueString,\n  replaceSeparatedString,\n} from '../stringUtils';\nimport { ModelData, Setting } from '../types/interfaces';\nimport { log, showObj } from '../utils';\nimport { checkData } from './checks';\nimport { getTestModel } from './exampleModels';\nimport { migrateOldVersions } from './versioningUtils';\n\n// breaks dates (and functions too but we don't have these)\nfunction cleanUpDates(modelFromJSON: ModelData): void {\n  for (const t of modelFromJSON.triggers) {\n    //log(`type of ${t.DATE} = ${typeof t.DATE}`);\n    t.DATE = new Date(t.DATE).toDateString();\n    //log(`type of ${t.DATE} = ${typeof t.DATE}`);\n  }\n  if (modelFromJSON.undoModel) {\n    cleanUpDates(modelFromJSON.undoModel);\n  }\n  if (modelFromJSON.redoModel) {\n    cleanUpDates(modelFromJSON.redoModel);\n  }\n  // log(`cleaned up model assets ${showObj(result.assets)}`);\n}\n\nexport function makeModelFromJSONString(input: string): ModelData {\n  const matches = input.match(/PensionDBC/g);\n  if (matches !== null && matches.length > 0) {\n    log(`Old string 'PensionDBC' in loaded data!!`);\n  }\n\n  let result = JSON.parse(input);\n  // log(`parsed JSON and found ${showObj(result)}`);\n  if (result.testName !== undefined) {\n    // log(\"this isn't JSON but refers to test data we can look up\");\n    result = getTestModel(result.testName);\n  }\n\n  // log(`loaded model, version =${result.version}`);\n\n  if (result.version === undefined) {\n    // log(`missing version, setting as 0`);\n    result.version = 0;\n  }\n\n  cleanUpDates(result);\n\n  // log(`result from makeModelFromJSON = ${showObj(result)}`);\n  return result;\n}\nexport function isSetting(input: string, settings: Setting[]) {\n  const result = {\n    value: '',\n    numFound: 1,\n  };\n  const x = settings.filter(pr => pr.NAME === input);\n  if (x.length === 1) {\n    // log(`got setting ${showObj(result)}`);\n    result.value = x[0].VALUE;\n  } else {\n    result.numFound = x.length;\n    if (result.numFound > 1) {\n      log(`multiple settings: ${showObj(x)}`);\n    }\n  }\n  return result;\n}\n\nexport function getSettings(\n  settings: Setting[],\n  key: string,\n  fallbackVal: string,\n  expectValue = true,\n) {\n  const searchResult = isSetting(key, settings);\n  if (searchResult.numFound === 1) {\n    return searchResult.value;\n  }\n  if (searchResult.numFound === 0) {\n    if (expectValue) {\n      log(`BUG!!! '${key}' value not found in settings list`);\n      // throw new Error(`BUG!!! '${key}' value not found in settings list`);\n    }\n    // log(`couldn't find ${key} in ${showObj(settings)}`);\n    return fallbackVal;\n  }\n  if (searchResult.numFound > 1) {\n    log(`BUG!!! multiple '${key}' values found in settings list`);\n    // log(`couldn't find ${key} in ${showObj(settings)}`);\n    throw new Error(); // serious!! shows failure in browser!!\n    //return fallbackVal;\n  }\n  return fallbackVal;\n}\n\nexport function setSetting(\n  settings: Setting[],\n  key: string,\n  val: string,\n  type: string,\n  hint = '',\n) {\n  const idx = settings.findIndex(x => x.NAME === key);\n  if (idx === -1) {\n    // add new object\n    settings.push({\n      NAME: key,\n      VALUE: val,\n      HINT: hint,\n      TYPE: type,\n    });\n  } else {\n    // replace with a new object\n    settings.splice(idx, 1, {\n      NAME: key,\n      VALUE: val,\n      HINT: hint,\n      TYPE: type,\n    });\n  }\n}\n\n// might be today or might be set using a setting\nexport function getTodaysDate(model: ModelData) {\n  let today = new Date();\n  if (model.settings.length === 0) {\n    return today;\n  }\n  const todaysDate = getSettings(model.settings, valueFocusDate, '');\n  if (todaysDate !== '') {\n    today = new Date(todaysDate);\n  }\n  return today;\n}\n\nexport function setROI(model: ModelData, roi: { start: string; end: string }) {\n  setSetting(model.settings, roiStart, roi.start, viewType);\n  setSetting(model.settings, roiEnd, roi.end, viewType);\n}\n\nexport function makeModelFromJSON(input: string): ModelData {\n  // log('in makeModelFromJSON');\n  const model: ModelData = makeModelFromJSONString(input);\n  migrateOldVersions(model);\n  return model;\n}\n\nexport function isADebt(name: string, model: ModelData) {\n  const matchingAsset = model.assets.find(a => {\n    return a.NAME === name;\n  });\n  if (matchingAsset === undefined) {\n    return false;\n  }\n  return matchingAsset.IS_A_DEBT;\n}\nexport function isAnIncome(name: string, model: ModelData) {\n  return model.incomes.filter(a => a.NAME === name).length > 0;\n}\nexport function isAnExpense(name: string, model: ModelData) {\n  return model.expenses.filter(a => a.NAME === name).length > 0;\n}\nfunction isAnAsset(name: string, model: ModelData) {\n  return (\n    model.assets.filter(a => a.NAME === name || a.CATEGORY === name).length > 0\n  );\n}\nexport function isAnAssetOrAssets(name: string, model: ModelData) {\n  const words = name.split(separator);\n  let ok = true;\n  words.forEach(word => {\n    if (!isAnAsset(word, model)) {\n      ok = false;\n    }\n  });\n  return ok;\n}\nexport function isATransaction(name: string, model: ModelData) {\n  return model.transactions.filter(t => t.NAME === name).length > 0;\n}\n\nexport function replaceCategoryWithAssetNames(\n  words: string[],\n  model: ModelData,\n) {\n  // log(`start replaceCategoryWithAssetNames with words = ${showObj(words)}`);\n  let wordsNew: string[] = [];\n  words.forEach(w => {\n    // log(`look at word \"${w}\" - is it a category?`);\n    // if w is a category of one or more assets\n    // then remove w from the list and\n    // if the assets are not already on the list\n    // then add the asset Names.\n    const assetsWithCategory = model.assets.filter(a => {\n      return a.CATEGORY === w;\n    });\n    if (assetsWithCategory.length === 0) {\n      wordsNew.push(w);\n    } else {\n      wordsNew = wordsNew.concat(\n        assetsWithCategory.map(a => {\n          return a.NAME;\n        }),\n      );\n    }\n  });\n  // log(`return from replaceCategoryWithAssetNames with wordsNew = ${showObj(wordsNew)}`);\n  return wordsNew;\n}\n\nexport function getLiabilityPeople(model: ModelData): string[] {\n  const liabilityPeople: string[] = [];\n  if (model.assets === undefined) {\n    return [];\n  }\n  // console.log(`model for tax buttons is ${showObj(model)}`);\n  model.assets.forEach(obj => {\n    const words = obj.LIABILITY.split(separator);\n    for (const word of words) {\n      // console.log(`liability word = ${word}`);\n      let person: string | undefined = undefined;\n      if (word.endsWith(cgt)) {\n        person = word.substring(0, word.length - cgt.length);\n      } else if (word.endsWith(incomeTax)) {\n        person = word.substring(0, word.length - incomeTax.length);\n      }\n      if (person !== undefined) {\n        if (\n          liabilityPeople.findIndex(name => {\n            return person === name;\n          }) === -1\n        ) {\n          // console.log(`person = ${person}`);\n          liabilityPeople.push(person);\n        }\n      }\n    }\n  });\n  model.incomes.forEach(obj => {\n    const words = obj.LIABILITY.split(separator);\n    // log(`words = ${words}`);\n    for (const word of words) {\n      // log(`liability word = ${word}`);\n      let person: string | undefined = undefined;\n      if (word.endsWith(nationalInsurance)) {\n        person = word.substring(0, word.length - nationalInsurance.length);\n      } else if (word.endsWith(incomeTax)) {\n        person = word.substring(0, word.length - incomeTax.length);\n      }\n      if (person !== undefined) {\n        if (\n          liabilityPeople.findIndex(name => {\n            return person === name;\n          }) === -1\n        ) {\n          // console.log(`person = ${person}`);\n          liabilityPeople.push(person);\n        }\n      }\n    }\n  });\n  return liabilityPeople;\n}\n\nexport function markForUndo(model: ModelData) {\n  const modelClone = makeModelFromJSONString(JSON.stringify(model));\n  model.undoModel = modelClone;\n  model.redoModel = undefined;\n}\nexport function revertToUndoModel(model: ModelData): boolean {\n  if (model.undoModel !== undefined) {\n    // log(`before undo, model has model.undoModel = ${model.undoModel}`);\n    // log(`before undo, model has model.redoModel = ${model.redoModel}`);\n    // log(`before undo, model has ${model.settings.length} settings`);\n    const targetModel = model.undoModel;\n    model.undoModel = undefined;\n    targetModel.redoModel = {\n      assets: model.assets,\n      expenses: model.expenses,\n      incomes: model.incomes,\n      settings: model.settings,\n      transactions: model.transactions,\n      triggers: model.triggers,\n      version: model.version,\n      undoModel: model.undoModel,\n      redoModel: model.redoModel,\n    };\n    Object.assign(model, targetModel);\n    // log(`after undo, model has model.undoModel = ${model.undoModel}`);\n    // log(`after undo, model has model.redoModel = ${model.redoModel}`);\n    // log(`after undo, model has ${model.settings.length} settings`);\n    return true;\n  }\n  return false;\n}\nexport function applyRedoToModel(model: ModelData): boolean {\n  if (model.redoModel !== undefined) {\n    // log(`before redo, model has model.undoModel = ${model.undoModel}`);\n    // log(`before redo, model has model.redoModel = ${model.redoModel}`);\n    // log(`before redo, model has ${model.settings.length} settings`);\n    const targetModel = model.redoModel;\n    model.redoModel = undefined;\n    targetModel.undoModel = {\n      assets: model.assets,\n      expenses: model.expenses,\n      incomes: model.incomes,\n      settings: model.settings,\n      transactions: model.transactions,\n      triggers: model.triggers,\n      version: model.version,\n      undoModel: model.undoModel,\n      redoModel: model.redoModel,\n    };\n    Object.assign(model, targetModel);\n    // log(`after redo, model has model.undoModel = ${model.undoModel}`);\n    // log(`after redo, model has model.redoModel = ${model.redoModel}`);\n    // log(`after redo, model has ${model.settings.length} settings`);\n    return true;\n  }\n  return false;\n}\nexport function attemptRenameLong(\n  model: ModelData,\n  old: string,\n  replacement: string,\n): string {\n  // log(`attempt rename from ${old} to ${replacement}`);\n\n  // prevent a change which alters a special word\n  const oldSpecialWord = getSpecialWord(old);\n  const newSpecialWord = getSpecialWord(replacement);\n  if (oldSpecialWord !== newSpecialWord) {\n    if (oldSpecialWord !== '') {\n      return `Must maintain special formatting using ${oldSpecialWord}`;\n    } else {\n      return `Must not introduce special formatting using ${newSpecialWord}`;\n    }\n  }\n  // prevent a change which clashes with an existing word\n  let message = checkForWordClashInModel(model, replacement, 'already');\n  if (message.length > 0) {\n    // log(`found word clash ${message}`);\n    return message;\n  }\n\n  // log(`get ready to make changes, be ready to undo...`);\n  // be ready to undo\n  markForUndo(model);\n  model.settings.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n    obj.VALUE = replaceNumberValueString(obj.VALUE, old, replacement);\n  });\n  model.triggers.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n  });\n  model.assets.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n    obj.START = replaceWholeString(obj.START, old, replacement);\n    obj.VALUE = replaceNumberValueString(obj.VALUE, old, replacement);\n    obj.QUANTITY = replaceWholeString(obj.QUANTITY, old, replacement);\n    obj.GROWTH = replaceWholeString(obj.GROWTH, old, replacement);\n    obj.LIABILITY = replaceSeparatedString(obj.LIABILITY, old, replacement);\n    obj.PURCHASE_PRICE = replaceNumberValueString(\n      obj.PURCHASE_PRICE,\n      old,\n      replacement,\n    );\n  });\n  model.incomes.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n    obj.START = replaceWholeString(obj.START, old, replacement);\n    obj.END = replaceWholeString(obj.END, old, replacement);\n    obj.VALUE = replaceNumberValueString(obj.VALUE, old, replacement);\n    obj.VALUE_SET = replaceWholeString(obj.VALUE_SET, old, replacement);\n    obj.GROWTH = replaceWholeString(obj.GROWTH, old, replacement);\n    obj.LIABILITY = replaceSeparatedString(obj.LIABILITY, old, replacement);\n  });\n  model.expenses.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n    obj.START = replaceWholeString(obj.START, old, replacement);\n    obj.END = replaceWholeString(obj.END, old, replacement);\n    obj.VALUE = replaceNumberValueString(obj.VALUE, old, replacement);\n    obj.VALUE_SET = replaceWholeString(obj.VALUE_SET, old, replacement);\n    obj.GROWTH = replaceWholeString(obj.GROWTH, old, replacement);\n  });\n  model.transactions.forEach(obj => {\n    obj.NAME = replaceWholeString(obj.NAME, old, replacement);\n    obj.FROM = replaceSeparatedString(obj.FROM, old, replacement);\n    obj.FROM_VALUE = replaceNumberValueString(obj.FROM_VALUE, old, replacement);\n    obj.TO = replaceSeparatedString(obj.TO, old, replacement);\n    obj.TO_VALUE = replaceNumberValueString(obj.TO_VALUE, old, replacement);\n    obj.DATE = replaceWholeString(obj.DATE, old, replacement);\n    obj.STOP_DATE = replaceWholeString(obj.STOP_DATE, old, replacement);\n  });\n  message = checkForWordClashInModel(model, old, 'still');\n  if (message.length > 0) {\n    // log(`old word still present in adjusted model`);\n    revertToUndoModel(model);\n    return message;\n  }\n  const checkResult = checkData(model);\n  if (checkResult !== '') {\n    // log(`revert adjusted model`);\n    revertToUndoModel(model);\n    return checkResult;\n  } else {\n    // log(`save adjusted model`);\n    return '';\n  }\n}\n","import React, { Component, FormEvent } from 'react';\n\nimport { Input } from './Input';\nimport { ReportMatcher } from '../../types/interfaces';\nimport { makeButton } from './Button';\nimport {\n  defaultSourceExcluder,\n  defaultSourceMatcher,\n} from '../../localization/stringConstants';\n\ninterface ReportMatcherFormState {\n  sourceMatcher: string;\n  sourceExcluder: string;\n}\ninterface ReportMatcherFormProps {\n  reportMatcher: ReportMatcher;\n  setReportKey: (args0: string) => void;\n}\n\nexport class ReportMatcherForm extends Component<\n  ReportMatcherFormProps,\n  ReportMatcherFormState\n> {\n  public defaultState: ReportMatcherFormState;\n\n  public constructor(props: ReportMatcherFormProps) {\n    super(props);\n    this.defaultState = {\n      sourceMatcher: this.props.reportMatcher.sourceMatcher,\n      sourceExcluder: this.props.reportMatcher.sourceExcluder,\n    };\n\n    this.state = this.defaultState;\n\n    this.submit = this.submit.bind(this);\n    this.handleMatcherChange = this.handleMatcherChange.bind(this);\n    this.handleExcluderChange = this.handleExcluderChange.bind(this);\n  }\n\n  private handleMatcherChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    // log(`setting new value for sourceMatcher form ${value}`);\n    this.setState({ sourceMatcher: value });\n  }\n  private handleExcluderChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    // log(`setting new value for sourceExcluder form ${value}`);\n    this.setState({ sourceExcluder: value });\n  }\n\n  public render() {\n    return (\n      <form className=\"container-fluid\" onSubmit={this.submit}>\n        <div style={{ display: 'none' }}>\n          {makeButton(\n            'Filter table',\n            this.submit,\n            'MatchFilterer',\n            'MatchFilterer',\n            'primary',\n          )}\n        </div>\n        <Input\n          type={'text'}\n          title={'Match sources'}\n          name={'reportSourceMatcher'}\n          value={this.state.sourceMatcher}\n          placeholder={'Enter matcher here'}\n          onChange={this.handleMatcherChange}\n        />\n        <Input\n          type={'text'}\n          title={'Exclude sources'}\n          name={'reportSourceExcluder'}\n          value={this.state.sourceExcluder}\n          placeholder={'Enter excluder here'}\n          onChange={this.handleExcluderChange}\n        />\n        {makeButton(\n          'reset to default',\n          e => {\n            e.persist();\n            this.setState(\n              {\n                sourceMatcher: defaultSourceMatcher,\n                sourceExcluder: defaultSourceExcluder,\n              },\n              () => {\n                this.submit(e);\n              },\n            );\n          },\n          'test',\n          'test',\n          'primary',\n        )}\n      </form>\n    );\n  }\n\n  private async submit(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    this.props.setReportKey(\n      JSON.stringify({\n        sourceMatcher: this.state.sourceMatcher,\n        sourceExcluder: this.state.sourceExcluder,\n      }),\n    );\n    return;\n  }\n}\n","import {\n  CASH_ASSET_NAME,\n  adjustableType,\n  assetChartFocus,\n  chartViewType,\n  autogen,\n  conditional,\n  constType,\n  crystallizedPension,\n  debtChartFocus,\n  expenseChartFocus,\n  incomeChartFocus,\n  liquidateAsset,\n  payOffDebt,\n  pension,\n  pensionDB,\n  pensionTransfer,\n  revalue,\n  revalueAsset,\n  revalueDebt,\n  revalueExp,\n  revalueInc,\n  revalueSetting,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n  taxFree,\n  viewDetail,\n  viewType,\n  reportView,\n} from '../localization/stringConstants';\nimport {\n  Asset,\n  Expense,\n  Income,\n  ModelData,\n  Setting,\n  Transaction,\n  Trigger,\n  Item,\n  ReportDatum,\n  ReportMatcher,\n} from '../types/interfaces';\nimport {\n  attemptRename,\n  deleteAsset,\n  deleteExpense,\n  deleteIncome,\n  deleteSetting,\n  deleteTransaction,\n  deleteTrigger,\n  editSetting,\n  getDisplay,\n  setReportKey,\n  submitAsset,\n  submitExpense,\n  submitIncome,\n  submitTransaction,\n  submitTrigger,\n} from '../App';\nimport {\n  checkExpense,\n  checkIncome,\n  checkTransaction,\n  checkTrigger,\n  isNumberString,\n} from '../models/checks';\nimport { Context, log, showObj } from '../utils';\n\nimport CashValueFormatter from './reactComponents/CashValueFormatter';\nimport DataGrid from './reactComponents/DataGrid';\nimport GrowthFormatter from './reactComponents/GrowthFormatter';\nimport React from 'react';\nimport { SimpleFormatter } from './reactComponents/NameFormatter';\nimport ToFromValueFormatter from './reactComponents/ToFromValueFormatter';\nimport TriggerDateFormatter from './reactComponents/TriggerDateFormatter';\nimport { ViewSettings } from '../models/charting';\nimport { minimalModel } from '../models/exampleModels';\nimport {\n  isADebt,\n  isAnAssetOrAssets,\n  isAnIncome,\n  isAnExpense,\n} from '../models/modelUtils';\nimport {\n  getNumberAndWordParts,\n  checkForWordClashInModel,\n  makeBooleanFromYesNo,\n  makeCashValueFromString,\n  makeGrowthFromString,\n  makeQuantityFromString,\n  makePurchasePriceFromString,\n  makeValueAbsPropFromString,\n  makeStringFromPurchasePrice,\n  makeYesNoFromBoolean,\n  makeStringFromValueAbsProp,\n  makeStringFromGrowth,\n  lessThan,\n  makeTwoDP,\n} from '../stringUtils';\nimport { ReactFragment } from 'react';\nimport { Accordion, Button, Card } from 'react-bootstrap';\nimport { filtersList } from './chartPages';\nimport { ReportMatcherForm } from './reactComponents/ReportMatcherForm';\n\nexport function collapsibleFragment(\n  fragment: ReactFragment | undefined,\n  title: string,\n) {\n  if (fragment === undefined) {\n    return;\n  }\n  return (\n    <Accordion defaultActiveKey=\"0\">\n      <Card>\n        <Card.Header>\n          <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n            {title}\n          </Accordion.Toggle>\n        </Card.Header>\n        <Accordion.Collapse eventKey=\"0\">\n          <Card.Body>{fragment}</Card.Body>\n        </Accordion.Collapse>\n      </Card>\n    </Accordion>\n  );\n}\n\nfunction handleExpenseGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  args: any,\n) {\n  // log('handleExpenseGridRowsUpdated', arguments);\n  const expense = args[0].fromRowData;\n  // log('old expense '+showObj(expense));\n  if (args[0].cellKey === 'NAME') {\n    if (expense.NAME !== args[0].updated.NAME) {\n      const parsed = getNumberAndWordParts(args[0].updated.NAME);\n      if (parsed.numberPart !== undefined) {\n        showAlert(`Don't name an expense beginning with a number`);\n        return;\n      }\n      const clashCheck = checkForWordClashInModel(\n        model,\n        args[0].updated.NAME,\n        'already',\n      );\n      if (clashCheck !== '') {\n        showAlert(clashCheck);\n        return;\n      }\n      attemptRename(model, expense.NAME, args[0].updated.NAME);\n    }\n    return;\n  }\n\n  const oldValue = expense[args[0].cellKey];\n  expense[args[0].cellKey] = args[0].updated[args[0].cellKey];\n  // log('new expense '+showObj(expense));\n  const parsedGrowsWithCPI = makeBooleanFromYesNo(expense.GROWS_WITH_CPI);\n  const parsedValue = makeCashValueFromString(expense.VALUE);\n  const parsedGrowth = makeGrowthFromString(expense.GROWTH, model.settings);\n  if (!parsedGrowsWithCPI.checksOK) {\n    showAlert(\"Whether expense grows with CPI should be 'y' or 'n'\");\n    expense[args[0].cellKey] = oldValue;\n  } else if (!parsedValue.checksOK) {\n    showAlert(`Value ${expense.VALUE} can't be understood as a cash value`);\n    expense[args[0].cellKey] = oldValue;\n  } else if (!parsedGrowth.checksOK) {\n    showAlert(`Value ${expense.GROWTH} can't be understood as a growth}`);\n    expense[args[0].cellKey] = oldValue;\n  } else {\n    const expenseForSubmission: Expense = {\n      NAME: expense.NAME,\n      CATEGORY: expense.CATEGORY,\n      START: expense.START,\n      END: expense.END,\n      VALUE: `${parsedValue.value}`,\n      VALUE_SET: expense.VALUE_SET,\n      GROWTH: parsedGrowth.value,\n      CPI_IMMUNE: !parsedGrowsWithCPI.value,\n      RECURRENCE: expense.RECURRENCE,\n    };\n    // log(`expenseForSubmission = ${showObj(expenseForSubmission)}`);\n    const checks = checkExpense(expenseForSubmission, model);\n    if (checks === '') {\n      submitExpense(expenseForSubmission, model);\n    } else {\n      showAlert(checks);\n      expense[args[0].cellKey] = oldValue;\n    }\n  }\n}\n\nfunction handleIncomeGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  args: any,\n) {\n  // log('handleIncomeGridRowsUpdated');\n  const income = args[0].fromRowData;\n  // log('old income '+showObj(income));\n  if (args[0].cellKey === 'NAME') {\n    if (income.NAME !== args[0].updated.NAME) {\n      if (args[0].updated.NAME.startsWith(pensionDB)) {\n        showAlert(`Don't rename incomes beginning ${pensionDB}`);\n        return;\n      }\n      if (args[0].updated.NAME.startsWith(pensionTransfer)) {\n        showAlert(`Don't rename incomes beginning ${pensionTransfer}`);\n        return;\n      }\n      const parsed = getNumberAndWordParts(args[0].updated.NAME);\n      if (parsed.numberPart !== undefined) {\n        showAlert(`Don't name an income beginning with a number`);\n        return;\n      }\n      const clashCheck = checkForWordClashInModel(\n        model,\n        args[0].updated.NAME,\n        'already',\n      );\n      if (clashCheck !== '') {\n        showAlert(clashCheck);\n        return;\n      }\n      attemptRename(model, income.NAME, args[0].updated.NAME);\n    }\n    return;\n  }\n\n  const oldValue = income[args[0].cellKey];\n  income[args[0].cellKey] = args[0].updated[args[0].cellKey];\n  // log('new income '+showObj(income));\n  const parsedGrowsWithCPI = makeBooleanFromYesNo(income.GROWS_WITH_CPI);\n  const parsedValue = makeCashValueFromString(income.VALUE);\n  const parsedGrowth = makeGrowthFromString(income.GROWTH, model.settings);\n  if (!parsedGrowsWithCPI.checksOK) {\n    showAlert(\"Whether income grows with CPI should be 'y' or 'n'\");\n    income[args[0].cellKey] = oldValue;\n  } else if (!parsedGrowth.checksOK) {\n    showAlert(`Value ${income.GROWTH} can't be understood as a growth}`);\n    income[args[0].cellKey] = oldValue;\n  } else {\n    let incValue = '';\n    if (parsedValue.checksOK) {\n      incValue = `${parsedValue.value}`;\n    } else {\n      incValue = income.VALUE;\n    }\n\n    const incomeForSubmission: Income = {\n      NAME: income.NAME,\n      CATEGORY: income.CATEGORY,\n      START: income.START,\n      END: income.END,\n      VALUE: incValue,\n      VALUE_SET: income.VALUE_SET,\n      GROWTH: parsedGrowth.value,\n      CPI_IMMUNE: !parsedGrowsWithCPI.value,\n      LIABILITY: income.LIABILITY,\n    };\n    const checks = checkIncome(incomeForSubmission, model);\n    if (checks === '') {\n      submitIncome(incomeForSubmission, model);\n    } else {\n      showAlert(checks);\n      income[args[0].cellKey] = oldValue;\n    }\n  }\n}\n\nfunction handleTriggerGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  args: any,\n) {\n  // log('handleTriggerGridRowsUpdated', arguments);\n  const trigger = args[0].fromRowData;\n  if (args[0].cellKey === 'NAME') {\n    if (trigger.NAME !== args[0].updated.NAME) {\n      const parsed = getNumberAndWordParts(args[0].updated.NAME);\n      if (parsed.numberPart !== undefined) {\n        showAlert(`Don't name a date beginning with a number`);\n        return;\n      }\n      const clashCheck = checkForWordClashInModel(\n        model,\n        args[0].updated.NAME,\n        'already',\n      );\n      if (clashCheck !== '') {\n        showAlert(clashCheck);\n        return;\n      }\n      attemptRename(model, trigger.NAME, args[0].updated.NAME);\n    }\n    return;\n  }\n  const oldValue = trigger[args[0].cellKey];\n  trigger[args[0].cellKey] = args[0].updated[args[0].cellKey];\n  const forSubmit: Trigger = {\n    NAME: trigger.NAME,\n    DATE: trigger.DATE,\n  };\n  const checks = checkTrigger(forSubmit, model);\n  if (checks === '') {\n    submitTrigger(forSubmit, model);\n  } else {\n    showAlert(checks);\n    trigger[args[0].cellKey] = oldValue;\n  }\n}\n\nfunction handleAssetGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  args: any,\n) {\n  // log('handleAssetGridRowsUpdated', args);\n  const asset = args[0].fromRowData;\n  if (args[0].cellKey === 'NAME') {\n    if (asset.NAME !== args[0].updated.NAME) {\n      if (asset.NAME === CASH_ASSET_NAME) {\n        showAlert(`Don't rename cash asset`);\n        return;\n      }\n      if (args[0].updated.NAME.startsWith(pensionDB)) {\n        showAlert(`Don't rename assets beginning ${pensionDB}`);\n        return;\n      }\n      if (args[0].updated.NAME.startsWith(pension)) {\n        showAlert(`Don't rename assets beginning ${pension}`);\n        return;\n      }\n      if (args[0].updated.NAME.startsWith(taxFree)) {\n        showAlert(`Don't rename assets beginning ${taxFree}`);\n        return;\n      }\n      if (args[0].updated.NAME.startsWith(crystallizedPension)) {\n        showAlert(`Don't rename assets beginning ${crystallizedPension}`);\n        return;\n      }\n      const parsed = getNumberAndWordParts(args[0].updated.NAME);\n      if (parsed.numberPart !== undefined) {\n        showAlert(`Don't name an asset beginning with a number`);\n        return;\n      }\n      const clashCheck = checkForWordClashInModel(\n        model,\n        args[0].updated.NAME,\n        'already',\n      );\n      if (clashCheck !== '') {\n        showAlert(clashCheck);\n        return;\n      }\n      attemptRename(model, asset.NAME, args[0].updated.NAME);\n    }\n    return;\n  }\n  const matchedAsset = model.assets.filter(a => {\n    return a.NAME === asset.NAME;\n  });\n  if (matchedAsset.length !== 1) {\n    log(`Error: asset ${asset.NAME} not found in model?`);\n    return;\n  }\n  const oldValue = asset[args[0].cellKey];\n  asset[args[0].cellKey] = args[0].updated[args[0].cellKey];\n  const parsedValue = makeCashValueFromString(asset.VALUE);\n  const parsedQuantity = makeQuantityFromString(asset.QUANTITY);\n  const parsedGrowth = makeGrowthFromString(asset.GROWTH, model.settings);\n  const parsedPurchasePrice = makePurchasePriceFromString(asset.PURCHASE_PRICE);\n  const parsedGrowsWithCPI = makeBooleanFromYesNo(asset.GROWS_WITH_CPI);\n  const parsedIsADebt = makeBooleanFromYesNo(asset.IS_A_DEBT);\n  const parsedCanBeNegative = makeBooleanFromYesNo(asset.CAN_BE_NEGATIVE);\n\n  // negate values before sending from table\n  // to model\n  if (matchedAsset[0].IS_A_DEBT && parsedValue.checksOK) {\n    parsedValue.value = -parsedValue.value;\n  }\n\n  if (!parsedGrowth.checksOK) {\n    showAlert(`asset growth ${asset.GROWTH} not understood`);\n    asset[args[0].cellKey] = oldValue;\n  } else if (!parsedQuantity.checksOK) {\n    showAlert(`quantity value ${asset.QUANTITY} not understood`);\n    asset[args[0].cellKey] = oldValue;\n  } else if (!parsedGrowsWithCPI.checksOK) {\n    showAlert(`asset value ${asset.GROWS_WITH_CPI} not understood`);\n    asset[args[0].cellKey] = oldValue;\n  } else if (!parsedIsADebt.checksOK) {\n    showAlert(`asset value ${asset.IS_A_DEBT} not understood`);\n    asset[args[0].cellKey] = oldValue;\n  } else if (!parsedCanBeNegative.checksOK) {\n    showAlert(`asset value ${asset.CAN_BE_NEGATIVE} not understood`);\n    asset[args[0].cellKey] = oldValue;\n  } else {\n    // log(`parsedValue = ${showObj(parsedValue)}`);\n    const valueForSubmission = parsedValue.checksOK\n      ? `${parsedValue.value}`\n      : asset.VALUE;\n    // log(`valueForSubmission = ${valueForSubmission}`);\n    const assetForSubmission: Asset = {\n      NAME: asset.NAME,\n      VALUE: valueForSubmission,\n      QUANTITY: asset.QUANTITY,\n      START: asset.START,\n      LIABILITY: asset.LIABILITY,\n      GROWTH: parsedGrowth.value,\n      CPI_IMMUNE: !parsedGrowsWithCPI.value,\n      CAN_BE_NEGATIVE: parsedCanBeNegative.value,\n      IS_A_DEBT: parsedIsADebt.value,\n      PURCHASE_PRICE: parsedPurchasePrice,\n      CATEGORY: asset.CATEGORY,\n    };\n    submitAsset(assetForSubmission, model);\n  }\n}\n\nfunction getTransactionName(name: string, type: string) {\n  let prefix = '';\n  if (type === liquidateAsset || type === payOffDebt) {\n    prefix = conditional;\n  } else if (\n    type === revalueAsset ||\n    type === revalueDebt ||\n    type === revalueExp ||\n    type === revalueInc\n  ) {\n    prefix = revalue;\n  }\n  return prefix + name;\n}\n\nfunction handleTransactionGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  type: string,\n  args: any,\n) {\n  // log('handleTransactionGridRowsUpdated', args);\n  const gridData = args[0].fromRowData;\n\n  const oldValue = gridData[args[0].cellKey];\n  gridData[args[0].cellKey] = args[0].updated[args[0].cellKey];\n\n  // log(`gridData.FROM_VALUE = ${gridData.FROM_VALUE}`);\n  // revalue tables have a hidden FROM_VALUE column\n  if (gridData.FROM_VALUE === undefined) {\n    gridData.FROM_VALUE = 0.0;\n  }\n\n  const parseFrom = makeValueAbsPropFromString(gridData.FROM_VALUE);\n\n  const transactionType = gridData.TYPE;\n  const parseTo = makeValueAbsPropFromString(gridData.TO_VALUE);\n  if (\n    transactionType !== revalueSetting &&\n    !parseFrom.checksOK &&\n    !model.settings.find(s => {\n      return s.NAME === gridData.FROM_VALUE;\n    })\n  ) {\n    showAlert(\n      `From value ${gridData.FROM_VALUE} should be a number or a number with % symbol`,\n    );\n    gridData[args[0].cellKey] = oldValue;\n  } else if (transactionType !== revalueSetting && !parseTo.checksOK) {\n    showAlert(\n      `To value ${gridData.TO_VALUE} should be a number or a number with % symbol`,\n    );\n    gridData[args[0].cellKey] = oldValue;\n  } else {\n    let type = gridData.TYPE;\n    if (\n      type === revalueAsset ||\n      type === revalueDebt ||\n      type === revalueExp ||\n      type === revalueInc\n    ) {\n      // enable auto-switch of revalue types if TO changes\n      if (isADebt(gridData.TO, model)) {\n        type = revalueDebt;\n      } else if (isAnAssetOrAssets(gridData.TO, model)) {\n        type = revalueAsset;\n      } else if (isADebt(gridData.TO, model)) {\n        type = revalueDebt;\n        parseTo.value = `${-parseFloat(parseTo.value)}`;\n      } else if (isAnIncome(gridData.TO, model)) {\n        type = revalueInc;\n      } else if (isAnExpense(gridData.TO, model)) {\n        type = revalueExp;\n      }\n    }\n    const tName = getTransactionName(gridData.NAME, type);\n    const oldtName = getTransactionName(oldValue, type);\n\n    if (args[0].cellKey === 'NAME') {\n      // log(`try to edit name from ${oldtName} to ${tName}`);\n\n      if (tName !== oldtName) {\n        const parsed = getNumberAndWordParts(oldtName);\n        if (parsed.numberPart !== undefined) {\n          showAlert(`Don't name a transaction beginning with a number`);\n          return;\n        }\n        // log(`check for ${dbName} in model...`)\n        const clashCheck = checkForWordClashInModel(model, tName, 'already');\n        if (clashCheck !== '') {\n          showAlert(clashCheck);\n          return;\n        }\n        attemptRename(model, oldtName, tName);\n      }\n      return;\n    }\n\n    const transaction: Transaction = {\n      DATE: gridData.DATE,\n      FROM: gridData.FROM,\n      FROM_VALUE: parseFrom.value,\n      FROM_ABSOLUTE: parseFrom.absolute,\n      NAME: tName,\n      TO: gridData.TO,\n      TO_ABSOLUTE: parseTo.absolute,\n      TO_VALUE: parseTo.value,\n      STOP_DATE: gridData.STOP_DATE,\n      RECURRENCE: gridData.RECURRENCE,\n      TYPE: type,\n      CATEGORY: gridData.CATEGORY,\n    };\n    const checks = checkTransaction(transaction, model);\n    if (checks === '') {\n      // log(`checks OK, submitting transaction`);\n      submitTransaction(transaction, model);\n    } else {\n      showAlert(checks);\n      gridData[args[0].cellKey] = oldValue;\n    }\n  }\n}\nfunction handleSettingGridRowsUpdated(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  args: any,\n) {\n  // log('handleSettingGridRowsUpdated', args);\n  const x = args[0].fromRowData;\n  if (args[0].cellKey === 'NAME') {\n    if (x.NAME !== args[0].updated.NAME) {\n      if (\n        minimalModel.settings.filter(obj => {\n          return obj.NAME === x.NAME;\n        }).length > 0\n      ) {\n        showAlert(`Don't rename inbuilt settings`);\n        return;\n      }\n      const parsed = getNumberAndWordParts(args[0].updated.NAME);\n      if (parsed.numberPart !== undefined) {\n        showAlert(`Don't name a setting beginning with a number`);\n        return;\n      }\n      const clashCheck = checkForWordClashInModel(\n        model,\n        args[0].updated.NAME,\n        'already',\n      );\n      if (clashCheck !== '') {\n        showAlert(clashCheck);\n        return;\n      }\n      attemptRename(model, x.NAME, args[0].updated.NAME);\n    }\n    return;\n  }\n  x[args[0].cellKey] = args[0].updated[args[0].cellKey];\n  const forSubmission = {\n    NAME: x.NAME,\n    VALUE: x.VALUE,\n    HINT: x.HINT,\n  };\n  editSetting(forSubmission, model);\n}\n\nexport const defaultColumn = {\n  editable: true,\n  resizable: true,\n  sortable: true,\n};\n\nfunction getAssetOrDebtCols(model: ModelData, isDebt: boolean) {\n  let cols: any[] = [\n    /*\n    {\n      ...defaultColumn,\n      key: 'index',\n      name: 'index',\n      formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n      editable: false,\n    },\n    */\n    {\n      ...defaultColumn,\n      key: 'NAME',\n      name: 'name',\n      formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n    },\n    {\n      ...defaultColumn,\n      key: 'VALUE',\n      name: 'start value',\n      formatter: <CashValueFormatter name=\"start value\" value=\"unset\" />,\n    },\n  ];\n  if (!isDebt) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'QUANTITY',\n        name: 'quantity',\n        formatter: <SimpleFormatter name=\"quantity\" value=\"unset\" />,\n      },\n    ]);\n  }\n  const growthName = isDebt ? 'interest rate' : 'growth';\n  cols = cols.concat([\n    {\n      ...defaultColumn,\n      key: 'START',\n      name: 'start',\n      formatter: (\n        <TriggerDateFormatter\n          name=\"start\"\n          model={model}\n          value=\"unset\"\n          showTime={false}\n        />\n      ),\n    },\n    {\n      ...defaultColumn,\n      key: 'GROWTH',\n      name: growthName,\n      formatter: (\n        <GrowthFormatter\n          name={growthName}\n          settings={model.settings}\n          value=\"unset\"\n        />\n      ),\n    },\n    // for debugging, we can find it useful to see this column\n    /*\n    {\n      ...defaultColumn,\n      key: 'IS_A_DEBT',\n      name: 'is debt?',\n    },\n    */\n  ]);\n  if (!isDebt) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'GROWS_WITH_CPI',\n        name: 'grows with CPI',\n        formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'LIABILITY',\n        name: 'tax Liability',\n        formatter: <SimpleFormatter name=\"tax liability\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'PURCHASE_PRICE',\n        name: 'purchase price',\n        formatter: <CashValueFormatter name=\"purchase price\" value=\"unset\" />,\n      },\n    ]);\n  }\n  cols = cols.concat([\n    {\n      ...defaultColumn,\n      key: 'CATEGORY',\n      name: 'category',\n      formatter: <SimpleFormatter name=\"category\" value=\"unset\" />,\n    },\n  ]);\n  return cols;\n}\n\nexport function addIndices(unindexedResult: any[]) {\n  const result = [];\n  for (let index = 0; index < unindexedResult.length; index++) {\n    const elt = {\n      ...unindexedResult[index],\n      index: index,\n    };\n    result.push(elt);\n  }\n  return result;\n}\n\nfunction assetsOrDebtsForTable(model: ModelData, isDebt: boolean): any[] {\n  const unindexedResult = model.assets\n    .filter((obj: Asset) => {\n      return obj.IS_A_DEBT === isDebt;\n    })\n    .map((obj: Asset) => {\n      const dbStringValue = obj.VALUE;\n      let displayValue: number | string;\n      if (isNumberString(dbStringValue)) {\n        displayValue = parseFloat(dbStringValue);\n        if (isDebt) {\n          displayValue = -displayValue;\n        }\n      } else {\n        displayValue = obj.VALUE;\n      }\n      const tableValue = `${displayValue}`;\n      const mapResult = {\n        GROWTH: obj.GROWTH,\n        NAME: obj.NAME,\n        CATEGORY: obj.CATEGORY,\n        START: obj.START,\n        VALUE: tableValue,\n        QUANTITY: obj.QUANTITY,\n        LIABILITY: obj.LIABILITY,\n        PURCHASE_PRICE: makeStringFromPurchasePrice(\n          obj.PURCHASE_PRICE,\n          obj.LIABILITY,\n        ),\n        GROWS_WITH_CPI: makeYesNoFromBoolean(!obj.CPI_IMMUNE),\n        IS_A_DEBT: makeYesNoFromBoolean(obj.IS_A_DEBT),\n        CAN_BE_NEGATIVE: makeYesNoFromBoolean(obj.CAN_BE_NEGATIVE),\n      };\n      return mapResult;\n    })\n    .sort((a: Item, b: Item) => lessThan(b.NAME, a.NAME));\n  return addIndices(unindexedResult);\n}\n\nexport function assetsOrDebtsTableDiv(\n  model: ModelData,\n  rowData: any[],\n  showAlert: (arg0: string) => void,\n  isDebt: boolean,\n) {\n  return (\n    <div\n      style={{\n        display: 'block',\n      }}\n    >\n      <fieldset>\n        <div className=\"dataGridAssets\">\n          <DataGrid\n            handleGridRowsUpdated={function() {\n              return handleAssetGridRowsUpdated(model, showAlert, arguments);\n            }}\n            rows={rowData}\n            columns={getAssetOrDebtCols(model, isDebt)}\n            deleteFunction={deleteAsset}\n            triggers={model.triggers}\n          />\n        </div>\n        <p />\n      </fieldset>\n    </div>\n  );\n}\n\nexport function getDisplayName(obj: string, type: string) {\n  // log(`obj = ${obj}`);\n  let result: string;\n  if (\n    (type === liquidateAsset || type === payOffDebt) &&\n    obj.startsWith(conditional)\n  ) {\n    result = obj.substring(conditional.length, obj.length);\n  } else if (\n    (type === revalueAsset ||\n      type === revalueDebt ||\n      type === revalueExp ||\n      type === revalueInc) &&\n    obj.startsWith(revalue)\n  ) {\n    result = obj.substring(revalue.length, obj.length);\n  } else {\n    result = obj;\n  }\n  // log(`display ${result}`);\n  return result;\n}\n\nexport function transactionsForTable(model: ModelData, type: string) {\n  const unindexedRows = model.transactions\n    .filter(t => {\n      return t.TYPE === type;\n    })\n    .map((obj: Transaction) => {\n      // log(`obj.FROM_ABSOLUTE = ${obj.FROM_ABSOLUTE}`)\n      let fromValueEntry = makeStringFromValueAbsProp(\n        obj.FROM_VALUE,\n        obj.FROM_ABSOLUTE,\n        obj.FROM,\n        model,\n        obj.NAME,\n      );\n      // log(`obj.FROM = ${obj.FROM}, fromValueEntry = ${fromValueEntry}`);\n      if (\n        obj.FROM === '' &&\n        (fromValueEntry === '0' || fromValueEntry === '0.0')\n      ) {\n        fromValueEntry = '';\n      }\n      let toNumber = obj.TO_VALUE;\n      if (type === revalueDebt) {\n        toNumber = `${-parseFloat(toNumber)}`;\n      }\n      let toValueEntry = makeStringFromValueAbsProp(\n        toNumber,\n        obj.TO_ABSOLUTE,\n        obj.TO,\n        model,\n        obj.NAME,\n      );\n      if (obj.TO === '' && toValueEntry === '0') {\n        toValueEntry = '';\n      }\n      const mapResult = {\n        DATE: obj.DATE,\n        FROM: obj.FROM,\n        FROM_VALUE: fromValueEntry,\n        NAME: getDisplayName(obj.NAME, type),\n        TO: obj.TO,\n        TO_VALUE: toValueEntry,\n        STOP_DATE: obj.STOP_DATE,\n        RECURRENCE: obj.RECURRENCE,\n        TYPE: obj.TYPE,\n        CATEGORY: obj.CATEGORY,\n      };\n      return mapResult;\n    });\n  unindexedRows.sort((a: Item, b: Item) => lessThan(b.NAME, a.NAME));\n  return addIndices(unindexedRows);\n}\n\nfunction makeTransactionCols(model: ModelData, type: string) {\n  let cols: any[] = [\n    /*\n    {\n      ...defaultColumn,\n      key: 'index',\n      name: 'index',\n      formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n      editable: false,\n    },\n    */\n    {\n      ...defaultColumn,\n      key: 'NAME',\n      name: 'name',\n      formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n    },\n  ];\n  // FROM, FROM_VALUE display rules\n  if (\n    type === revalueInc ||\n    type === revalueExp ||\n    type === revalueAsset ||\n    type === revalueDebt\n  ) {\n    // revalues don't show FROM\n  } else if (type === payOffDebt) {\n    // we show the FROM_VALUE\n    // (from cash)\n    // as an \"amount\" to pay back\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'FROM_VALUE',\n        name: 'amount',\n        formatter: <ToFromValueFormatter name=\"amount\" value=\"unset\" />,\n      },\n    ]);\n  } else {\n    // not revalues, not paying off debts,\n    // default behaviour for FROM, FROM_VALUE\n    // display\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'FROM',\n        name: 'coming from',\n        formatter: <SimpleFormatter name=\"coming from\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'FROM_VALUE',\n        name: 'from amount',\n        formatter: <ToFromValueFormatter name=\"from amount\" value=\"unset\" />,\n      },\n    ]);\n  }\n\n  // TO, TO_VALUE display rules\n  if (type === revalueInc) {\n    // each revalue type in turn\n    // shows the revalue income/expense/asset/debt\n    // and the amount\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'TO',\n        name: 'income',\n        formatter: <SimpleFormatter name=\"income\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'TO_VALUE',\n        name: 'new value',\n        formatter: <ToFromValueFormatter name=\"new value\" value=\"unset\" />,\n      },\n    ]);\n  } else if (type === revalueExp) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'TO',\n        name: 'expense',\n        formatter: <SimpleFormatter name=\"expense\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'TO_VALUE',\n        name: 'new value',\n        formatter: <ToFromValueFormatter name=\"new value\" value=\"unset\" />,\n      },\n    ]);\n  } else if (type === revalueAsset) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'TO',\n        name: 'asset',\n        formatter: <SimpleFormatter name=\"asset\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'TO_VALUE',\n        name: 'new value',\n        formatter: <ToFromValueFormatter name=\"new value\" value=\"unset\" />,\n      },\n    ]);\n  } else if (type === revalueDebt) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'TO',\n        name: 'debt',\n        formatter: <SimpleFormatter name=\"debt\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'TO_VALUE',\n        name: 'new value',\n        formatter: <ToFromValueFormatter name=\"new value\" value=\"unset\" />,\n      },\n    ]);\n  } else {\n    // all other kinds of transaction\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'TO',\n        name: 'going to',\n        formatter: <SimpleFormatter name=\"going to\" value=\"unset\" />,\n      },\n      {\n        ...defaultColumn,\n        key: 'TO_VALUE',\n        name: 'to amount',\n        formatter: <ToFromValueFormatter name=\"to amount\" value=\"unset\" />,\n      },\n    ]);\n  }\n  if (type === payOffDebt) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'DATE',\n        name: 'payments start date',\n        formatter: (\n          <TriggerDateFormatter\n            name=\"payments start date\"\n            model={model}\n            value=\"unset\"\n            showTime={false}\n          />\n        ),\n      },\n    ]);\n  } else if (type === liquidateAsset) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'DATE',\n        name: 'date',\n        formatter: (\n          <TriggerDateFormatter\n            name=\"date\"\n            model={model}\n            value=\"unset\"\n            showTime={true}\n          />\n        ),\n      },\n    ]);\n  } else {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'DATE',\n        name: 'date',\n        formatter: (\n          <TriggerDateFormatter\n            name=\"date\"\n            model={model}\n            value=\"unset\"\n            showTime={false}\n          />\n        ),\n      },\n    ]);\n  }\n  if (type !== autogen) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'RECURRENCE',\n        name: 'recurrence',\n        formatter: <SimpleFormatter name=\"recurrence\" value=\"unset\" />,\n      },\n    ]);\n  }\n  if (type !== payOffDebt) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'STOP_DATE',\n        name: 'recurrence end date',\n        formatter: (\n          <TriggerDateFormatter\n            name=\"recurrence end date\"\n            model={model}\n            value=\"unset\"\n            showTime={false}\n          />\n        ),\n      },\n    ]);\n  }\n  if (\n    type !== revalueInc &&\n    type !== revalueExp &&\n    type !== revalueAsset &&\n    type !== revalueDebt\n  ) {\n    cols = cols.concat([\n      {\n        ...defaultColumn,\n        key: 'CATEGORY',\n        name: 'category',\n        formatter: <SimpleFormatter name=\"category\" value=\"unset\" />,\n      },\n    ]);\n  }\n  cols = cols.concat([\n    // for debugging, it can be useful to see the type column\n    /*\n    {\n      ...defaultColumn,\n      key: 'TYPE',\n      name: 'type',\n    },\n    */\n  ]);\n  return cols;\n}\n\nexport function transactionsTableDiv(\n  contents: any[],\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  type: string,\n  headingText: string,\n) {\n  return collapsibleFragment(\n    <div\n      className={`dataGridTransactions${type}`}\n      style={{\n        display: 'block',\n      }}\n    >\n      <DataGrid\n        handleGridRowsUpdated={function() {\n          return handleTransactionGridRowsUpdated(\n            model,\n            showAlert,\n            type,\n            arguments,\n          );\n        }}\n        rows={contents}\n        columns={makeTransactionCols(model, type)}\n        deleteFunction={(name: string) => {\n          const completeName = getTransactionName(name, type);\n          return deleteTransaction(completeName);\n        }}\n        triggers={model.triggers}\n      />\n    </div>,\n    headingText,\n  );\n}\n\nexport function transactionFilteredTable(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n  type: string,\n  headingText: string,\n) {\n  const contents = transactionsForTable(model, type);\n  if (contents.length === 0) {\n    return;\n  }\n  return transactionsTableDiv(contents, model, showAlert, type, headingText);\n}\n\nexport function debtsDivWithHeadings(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const debtData = assetsOrDebtsForTable(model, true);\n  if (debtData.length === 0) {\n    return;\n  }\n  return (\n    <>\n      {collapsibleFragment(\n        assetsOrDebtsTableDiv(model, debtData, showAlert, true),\n        'Debt definitions',\n      )}\n      {transactionFilteredTable(model, showAlert, revalueDebt, 'Revalue debts')}\n      {transactionFilteredTable(model, showAlert, payOffDebt, 'Pay off debts')}\n    </>\n  );\n}\n\nexport function assetsDivWithHeadings(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const assetData = assetsOrDebtsForTable(model, false);\n  if (assetData.length === 0) {\n    return;\n  }\n  return (\n    <>\n      {collapsibleFragment(\n        assetsOrDebtsTableDiv(model, assetData, showAlert, false),\n        `Asset definition table`,\n      )}\n      {transactionFilteredTable(\n        model,\n        showAlert,\n        liquidateAsset,\n        'Liquidate assets to keep cash afloat',\n      )}\n      {transactionFilteredTable(\n        model,\n        showAlert,\n        revalueAsset,\n        'Revalue assets',\n      )}\n    </>\n  );\n}\n\nfunction triggersForTable(model: ModelData) {\n  const unindexedResult = model.triggers\n    .map((obj: Trigger) => {\n      const mapResult = {\n        DATE: obj.DATE,\n        NAME: obj.NAME,\n      };\n      return mapResult;\n    })\n    .sort((a: Item, b: Item) => lessThan(a.NAME, b.NAME));\n  return addIndices(unindexedResult);\n}\n\nfunction triggersTableDiv(\n  model: ModelData,\n  trigData: any[],\n  showAlert: (arg0: string) => void,\n) {\n  return (\n    <div\n      style={{\n        display: 'block',\n      }}\n    >\n      <fieldset>\n        <div className=\"dataGridTriggers\">\n          <DataGrid\n            deleteFunction={deleteTrigger}\n            handleGridRowsUpdated={function() {\n              return handleTriggerGridRowsUpdated(model, showAlert, arguments);\n            }}\n            rows={trigData}\n            columns={[\n              /*\n              {\n                ...defaultColumn,\n                key: 'index',\n                name: 'index',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              */\n              {\n                ...defaultColumn,\n                key: 'NAME',\n                name: 'name',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              {\n                ...defaultColumn,\n                key: 'DATE',\n                name: 'date',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"date\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n            ]}\n            triggers={model.triggers}\n          />\n        </div>\n      </fieldset>\n    </div>\n  );\n}\n\nexport function triggersTableDivWithHeading(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const trigData = triggersForTable(model);\n  if (trigData.length === 0) {\n    return;\n  }\n  return collapsibleFragment(\n    triggersTableDiv(model, trigData, showAlert),\n    `Important dates`,\n  );\n}\n\nfunction incomesForTable(model: ModelData) {\n  const unindexedResult = model.incomes.map((obj: Income) => {\n    const mapResult = {\n      END: obj.END,\n      GROWS_WITH_CPI: makeYesNoFromBoolean(!obj.CPI_IMMUNE),\n      GROWTH: makeStringFromGrowth(obj.GROWTH, model.settings),\n      NAME: obj.NAME,\n      START: obj.START,\n      VALUE: obj.VALUE,\n      VALUE_SET: obj.VALUE_SET,\n      LIABILITY: obj.LIABILITY,\n      CATEGORY: obj.CATEGORY,\n    };\n    // log(`passing ${showObj(result)}`);\n    return mapResult;\n  });\n  return addIndices(unindexedResult);\n}\n\nfunction incomesTableDiv(\n  model: ModelData,\n  incData: any[],\n  showAlert: (arg0: string) => void,\n) {\n  if (incData.length === 0) {\n    return;\n  }\n  return (\n    <div\n      style={{\n        display: 'block',\n      }}\n    >\n      <fieldset>\n        <div className=\"dataGridIncomes\">\n          <DataGrid\n            deleteFunction={deleteIncome}\n            handleGridRowsUpdated={function() {\n              return handleIncomeGridRowsUpdated(model, showAlert, arguments);\n            }}\n            rows={incData}\n            columns={[\n              /*\n              {\n                ...defaultColumn,\n                key: 'index',\n                name: 'index',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              */\n              {\n                ...defaultColumn,\n                key: 'NAME',\n                name: 'name',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              {\n                ...defaultColumn,\n                key: 'VALUE',\n                name: 'value definition',\n                formatter: (\n                  <CashValueFormatter name=\"value definition\" value=\"unset\" />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'VALUE_SET',\n                name: 'definition date',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"definition date\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'START',\n                name: 'start',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"start\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'END',\n                name: 'end',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"end\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'GROWTH',\n                name: 'annual growth',\n                formatter: (\n                  <GrowthFormatter\n                    name=\"annual growth\"\n                    settings={model.settings}\n                    value=\"unset\"\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'GROWS_WITH_CPI',\n                name: 'grows with CPI',\n                formatter: (\n                  <SimpleFormatter name=\"grows with CPI\" value=\"unset\" />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'LIABILITY',\n                name: 'tax Liability',\n                formatter: (\n                  <SimpleFormatter name=\"tax Liability\" value=\"unset\" />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'CATEGORY',\n                name: 'category',\n                formatter: <SimpleFormatter name=\"category\" value=\"unset\" />,\n              },\n            ]}\n            triggers={model.triggers}\n          />\n        </div>\n        <p />\n      </fieldset>\n    </div>\n  );\n}\n\nexport function incomesTableDivWithHeading(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const incData: any[] = incomesForTable(model);\n  if (incData.length === 0) {\n    return;\n  }\n  return collapsibleFragment(\n    incomesTableDiv(model, incData, showAlert),\n    `Income definitions`,\n  );\n}\n\nfunction expensesForTable(model: ModelData) {\n  const unindexedResult = model.expenses.map((obj: Expense) => {\n    const mapResult = {\n      END: obj.END,\n      GROWS_WITH_CPI: makeYesNoFromBoolean(!obj.CPI_IMMUNE),\n      GROWTH: makeStringFromGrowth(obj.GROWTH, model.settings),\n      CATEGORY: obj.CATEGORY,\n      NAME: obj.NAME,\n      START: obj.START,\n      VALUE: obj.VALUE,\n      VALUE_SET: obj.VALUE_SET,\n      RECURRENCE: obj.RECURRENCE,\n    };\n    return mapResult;\n  });\n  return addIndices(unindexedResult);\n}\n\nfunction expensesTableDiv(\n  model: ModelData,\n  expData: any[],\n  showAlert: (arg0: string) => void,\n) {\n  return (\n    <div\n      style={{\n        display: 'block',\n      }}\n    >\n      <fieldset>\n        <div className=\"dataGridExpenses\">\n          <DataGrid\n            deleteFunction={deleteExpense}\n            handleGridRowsUpdated={function() {\n              return handleExpenseGridRowsUpdated(model, showAlert, arguments);\n            }}\n            rows={expData}\n            columns={[\n              /*\n              {\n                ...defaultColumn,\n                key: 'index',\n                name: 'index',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              */\n              {\n                ...defaultColumn,\n                key: 'NAME',\n                name: 'name',\n                formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n              },\n              {\n                ...defaultColumn,\n                key: 'VALUE',\n                name: 'value definition',\n                formatter: (\n                  <CashValueFormatter name=\"value definition\" value=\"unset\" />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'VALUE_SET',\n                name: 'definition date',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"definition date\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'START',\n                name: 'start',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"start\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'END',\n                name: 'end',\n                formatter: (\n                  <TriggerDateFormatter\n                    name=\"end\"\n                    model={model}\n                    value=\"unset\"\n                    showTime={false}\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'GROWTH',\n                name: 'annual growth',\n                formatter: (\n                  <GrowthFormatter\n                    name=\"annual growth\"\n                    settings={model.settings}\n                    value=\"unset\"\n                  />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'GROWS_WITH_CPI',\n                name: 'grows with CPI',\n                formatter: (\n                  <SimpleFormatter name=\"grows with CPI\" value=\"unset\" />\n                ),\n              },\n              {\n                ...defaultColumn,\n                key: 'RECURRENCE',\n                name: 'recurrence',\n                formatter: <SimpleFormatter name=\"recurrence\" value=\"unset\" />,\n              },\n              {\n                ...defaultColumn,\n                key: 'CATEGORY',\n                name: 'category',\n                formatter: <SimpleFormatter name=\"category\" value=\"unset\" />,\n              },\n            ]}\n            triggers={model.triggers}\n          />\n        </div>\n        <p />\n      </fieldset>\n    </div>\n  );\n}\n\nexport function expensesTableDivWithHeading(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const expData = expensesForTable(model);\n  if (expData.length === 0) {\n    return;\n  }\n  return collapsibleFragment(\n    expensesTableDiv(model, expData, showAlert),\n    `Expense definitions`,\n  );\n}\n\nconst settingsToExcludeFromTableView: string[] = [\n  chartViewType,\n  viewDetail,\n  assetChartFocus,\n  debtChartFocus,\n  expenseChartFocus,\n  incomeChartFocus,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n];\n\nfunction settingsForTable(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  type: string,\n) {\n  const data = model.settings;\n  const unindexedResult = data\n    .filter((obj: Setting) => {\n      return obj.TYPE === type;\n    })\n    .filter((obj: Setting) => {\n      return (\n        settingsToExcludeFromTableView.find(s => {\n          return obj.NAME === s;\n        }) === undefined\n      );\n    })\n    .map((obj: Setting) => {\n      showObj(`obj = ${obj}`);\n      const mapResult = {\n        NAME: obj.NAME,\n        VALUE: obj.VALUE,\n        HINT: obj.HINT,\n      };\n      return mapResult;\n    });\n  return addIndices(unindexedResult);\n}\n\nfunction customSettingsTable(\n  model: ModelData,\n  constSettings: any[],\n  showAlert: (arg0: string) => void,\n) {\n  if (constSettings.length === 0) {\n    return;\n  }\n  return (\n    <DataGrid\n      deleteFunction={deleteSetting}\n      handleGridRowsUpdated={function() {\n        return handleSettingGridRowsUpdated(model, showAlert, arguments);\n      }}\n      rows={constSettings}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: 'defining value',\n          formatter: <SimpleFormatter name=\"defining value\" value=\"unset\" />,\n        },\n        {\n          ...defaultColumn,\n          key: 'HINT',\n          name: 'hint',\n          formatter: <SimpleFormatter name=\"hint\" value=\"unset\" />,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\nfunction adjustSettingsTable(\n  model: ModelData,\n  adjustSettings: any[],\n  showAlert: (arg0: string) => void,\n) {\n  if (adjustSettings.length === 0) {\n    return;\n  }\n  return (\n    <DataGrid\n      deleteFunction={deleteSetting}\n      handleGridRowsUpdated={function() {\n        return handleSettingGridRowsUpdated(model, showAlert, arguments);\n      }}\n      rows={adjustSettings}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: 'defining value',\n          formatter: <SimpleFormatter name=\"defining value\" value=\"unset\" />,\n        },\n        {\n          ...defaultColumn,\n          key: 'HINT',\n          name: 'hint',\n          formatter: <SimpleFormatter name=\"hint\" value=\"unset\" />,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\n\nfunction settingsTables(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n) {\n  const constSettings = settingsForTable(model, viewSettings, constType);\n  const adjustSettings = settingsForTable(model, viewSettings, adjustableType);\n\n  if (constSettings.length === 0 && adjustSettings.length === 0) {\n    return;\n  }\n\n  return collapsibleFragment(\n    <>\n      {customSettingsTable(model, constSettings, showAlert)}\n      {adjustSettingsTable(model, adjustSettings, showAlert)}\n    </>,\n    `Other settings affecting the model`,\n  );\n}\n\nexport function settingsTableDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n) {\n  return (\n    <div\n      className=\"dataGridSettings\"\n      style={{\n        display: 'block',\n      }}\n    >\n      {collapsibleFragment(\n        <DataGrid\n          deleteFunction={deleteSetting}\n          handleGridRowsUpdated={function() {\n            return handleSettingGridRowsUpdated(model, showAlert, arguments);\n          }}\n          rows={settingsForTable(model, viewSettings, viewType)}\n          columns={[\n            /*\n          {\n            ...defaultColumn,\n            key: 'index',\n            name: 'index',\n            formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          },\n          */\n            {\n              ...defaultColumn,\n              key: 'NAME',\n              name: 'name',\n              formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n            },\n            {\n              ...defaultColumn,\n              key: 'VALUE',\n              name: 'defining value',\n              formatter: (\n                <SimpleFormatter name=\"defining value\" value=\"unset\" />\n              ),\n            },\n            {\n              ...defaultColumn,\n              key: 'HINT',\n              name: 'hint',\n              formatter: <SimpleFormatter name=\"hint\" value=\"unset\" />,\n            },\n          ]}\n          triggers={model.triggers}\n        />,\n        `Settings about the view of the model`,\n      )}\n      {settingsTables(model, viewSettings, showAlert)}\n      {transactionFilteredTable(\n        model,\n        showAlert,\n        revalueSetting,\n        'Revalue settings',\n      )}\n    </div>\n  );\n}\n\nexport function reportDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  reportMatcher: ReportMatcher,\n  reportData: ReportDatum[],\n) {\n  if (!getDisplay(reportView)) {\n    // log(`don't populate reportView`);\n    return;\n  }\n  // log(`do populate reportView`);\n  // log(`display report of length ${reportData.length}`);\n  const unindexedResult = reportData\n    .filter(d => {\n      return d.name !== 'Estate final value';\n    })\n    .map(x => {\n      const make2dpCanBeUndefined: (\n        input: number | undefined,\n      ) => string = input => {\n        return input ? makeTwoDP(input) : '';\n      };\n      const makeQCanBeUndefined: (\n        input: number | undefined,\n      ) => string = input => {\n        return input ? `${input}` : '';\n      };\n      return {\n        DATE: x.date,\n        NAME: x.name,\n        CHANGE: make2dpCanBeUndefined(x.change),\n        OLD_VALUE: make2dpCanBeUndefined(x.oldVal),\n        NEW_VALUE: make2dpCanBeUndefined(x.newVal),\n        QCHANGE: makeQCanBeUndefined(x.qchange),\n        QOLD_VALUE: makeQCanBeUndefined(x.qoldVal),\n        QNEW_VALUE: makeQCanBeUndefined(x.qnewVal),\n        SOURCE: x.source,\n      };\n    });\n  const reportDataTable = addIndices(unindexedResult);\n\n  // log(`display reportDataTable of length ${reportDataTable.length}`);\n  // var util = require('util');\n  // log(`display reportDataTable ${util.inspect(reportDataTable)}`);\n\n  const context = Context.Asset;\n  const items = model.assets.filter(obj => {\n    return obj.IS_A_DEBT === false;\n  });\n\n  return (\n    <div className=\"ml-3\">\n      {filtersList(items, viewSettings, context, true)}\n      <ReportMatcherForm\n        reportMatcher={reportMatcher}\n        setReportKey={setReportKey}\n      />\n      <DataGrid\n        deleteFunction={undefined}\n        handleGridRowsUpdated={function() {\n          return false;\n        }}\n        rows={reportDataTable}\n        columns={[\n          /*\n          {\n            ...defaultColumn,\n            key: 'index',\n            name: 'index',\n            formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          },\n          */\n          {\n            ...defaultColumn,\n            key: 'DATE',\n            name: 'date',\n            formatter: (\n              <TriggerDateFormatter\n                name=\"date\"\n                model={model}\n                value=\"unset\"\n                showTime={false}\n              />\n            ),\n          },\n          {\n            ...defaultColumn,\n            key: 'NAME',\n            name: 'name',\n            formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'CHANGE',\n            name: 'change',\n            formatter: <CashValueFormatter name=\"change\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'OLD_VALUE',\n            name: 'old value',\n            formatter: <CashValueFormatter name=\"old value\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'NEW_VALUE',\n            name: 'new value',\n            formatter: <CashValueFormatter name=\"new value\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'QCHANGE',\n            name: 'quantity change',\n            formatter: <SimpleFormatter name=\"quantity change\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'QOLD_VALUE',\n            name: 'old quantity',\n            formatter: <SimpleFormatter name=\"old quantity\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'QNEW_VALUE',\n            name: 'new quantity',\n            formatter: <SimpleFormatter name=\"new quantity\" value=\"unset\" />,\n          },\n          {\n            ...defaultColumn,\n            key: 'SOURCE',\n            name: 'source',\n            formatter: <SimpleFormatter name=\"source\" value=\"unset\" />,\n          },\n        ]}\n        triggers={model.triggers}\n      />\n      {\n        //`Table data in text form :\n        //${util.inspect(reportDataTable)}`\n        //}\n      }\n    </div>\n  );\n}\n","import React, { Component, useState } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport {\n  definedBenefitsPension,\n  definedContributionsPension,\n  emptyModel,\n  nationalSavings,\n  simpleExampleData,\n} from './models/exampleModels';\nimport { useAuth0 } from './contexts/auth0-context';\nimport { makeChartData, ViewSettings } from './models/charting';\nimport { checkData, checkTransaction, checkTrigger } from './models/checks';\nimport { AddDeleteTransactionForm } from './views/reactComponents/AddDeleteTransactionForm';\nimport { AddDeleteTriggerForm } from './views/reactComponents/AddDeleteTriggerForm';\nimport { makeButton } from './views/reactComponents/Button';\nimport {\n  allItems,\n  annually,\n  assetChartFocus,\n  chartVals,\n  chartViewType,\n  assetsView,\n  autogen,\n  custom,\n  debtChartFocus,\n  debtsView,\n  exampleModelName,\n  expenseChartFocus,\n  expensesView,\n  fine,\n  homeView,\n  incomeChartFocus,\n  incomesView,\n  overview,\n  reportView,\n  roiEnd,\n  roiStart,\n  settingsView,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n  taxView,\n  transactionsView,\n  triggersView,\n  ViewType,\n  viewDetail,\n  viewFrequency,\n  viewType,\n  purchase,\n  defaultSourceMatcher,\n  defaultSourceExcluder,\n  //  pension,\n  //  crystallizedPension,\n} from './localization/stringConstants';\nimport {\n  AssetVal,\n  ChartData,\n  DataForView,\n  Asset,\n  Expense,\n  Income,\n  Item,\n  ModelData,\n  Setting,\n  Transaction,\n  Trigger,\n  DebtVal,\n  Evaluation,\n  ExpenseVal,\n  IncomeVal,\n  ItemChartData,\n  SettingVal,\n  ReportDatum,\n  ReportMatcher,\n  ReportValueChecker,\n} from './types/interfaces';\nimport { Context, log, printDebug, showObj } from './utils';\nimport { loginPage, navbarContent } from './views/loginPage';\nimport { screenshotsDiv } from './views/screenshotsPage';\nimport {\n  defaultColumn,\n  settingsTableDiv,\n  transactionFilteredTable,\n  triggersTableDivWithHeading,\n  addIndices,\n  reportDiv,\n} from './views/tablePages';\nimport { overviewDiv } from './views/overviewPage';\nimport { taxDiv } from './views/chartPages';\nimport { incomesDiv } from './views/incomesPage';\nimport { expensesDiv } from './views/expensesPage';\nimport { assetsDiv } from './views/assetsPage';\nimport { debtsDiv } from './views/debtsPage';\n\nimport CryptoJS from 'crypto-js';\nimport {\n  deleteModel,\n  ensureModel,\n  getModelNames,\n  loadModel,\n  saveModelLSM,\n  saveModelToDBLSM,\n  submitNewSettingLSM,\n  submitTriggerLSM,\n  submitTransactionLSM,\n  submitAssetLSM,\n  submitExpenseLSM,\n  submitIncomeLSM,\n  submitSettingLSM,\n} from './database/loadSaveModel';\nimport DataGrid from './views/reactComponents/DataGrid';\nimport {\n  SimpleFormatter,\n  SettingFormatter,\n} from './views/reactComponents/NameFormatter';\nimport { AddDeleteSettingForm } from './views/reactComponents/AddDeleteSettingForm';\nimport { ReplaceWithJSONForm } from './views/reactComponents/ReplaceWithJSONForm';\nimport { CreateModelForm } from './views/reactComponents/NewModelForm';\nimport {\n  Alert,\n  Button,\n  Form,\n  Nav,\n  Navbar,\n  OverlayTrigger,\n  Tooltip,\n} from 'react-bootstrap';\nimport { getEvaluations } from './models/evaluations';\nimport {\n  applyRedoToModel,\n  attemptRenameLong,\n  getTodaysDate,\n  makeModelFromJSON,\n  markForUndo,\n  revertToUndoModel,\n} from './models/modelUtils';\nimport { lessThan, makeTwoDP } from './stringUtils';\nimport { diffModels } from './diffModels';\nimport { collapsibleFragment } from './views/tablePages';\nimport WaitGif from './views/catWait.gif';\n\n// import './bootstrap.css'\n\nlet modelName: string = exampleModelName;\nlet userID = '';\nlet isDirty = false; // does the model need saving?\n\nexport function getDefaultViewSettings(): ViewSettings {\n  const result = new ViewSettings([\n    {\n      NAME: viewFrequency,\n      VALUE: annually,\n    },\n    {\n      NAME: chartViewType,\n      VALUE: chartVals,\n    },\n    {\n      NAME: viewDetail,\n      VALUE: fine,\n    },\n    {\n      NAME: assetChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: debtChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: expenseChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: incomeChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartFocusPerson,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartFocusType,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartShowNet,\n      VALUE: 'Y',\n    },\n  ]);\n  return result;\n}\n\nfunction App() {\n  const {\n    isLoading,\n    user,\n    loginWithRedirect,\n    loginForTesting,\n    logout,\n  } = useAuth0();\n  if (!isLoading && !user) {\n    userID = '';\n    return loginPage(loginWithRedirect, loginForTesting);\n  }\n  if (!isLoading && user) {\n    userID = user.sub;\n    return (\n      <AppContent\n        logOutAction={() => {\n          if (userID === 'TestUserID') {\n            log(`logout ${userID}`);\n            // try to be graceful without network connection...\n            // userID = '';\n            // return loginPage(loginWithRedirect, loginForTesting);\n            // at the moment if there's no network access,\n            // logging out takes you to a \"no network\" error page\n            // but if we're using the testID we don't need to\n            // contact Auth0 ...\n            // current workaround is to navigate back in browser\n            // to get back to login page\n          }\n          return logout({\n            returnTo:\n              window.location.origin + process.env.REACT_APP_ORIGIN_APPENDAGE,\n          });\n        }}\n        user={user}\n      ></AppContent>\n    );\n  }\n  userID = '';\n  return null;\n}\n\nconst views = new Map<\n  ViewType,\n  {\n    display: boolean;\n  }\n>([\n  [\n    homeView,\n    {\n      display: true,\n    },\n  ],\n  [\n    overview,\n    {\n      display: false,\n    },\n  ],\n  [\n    incomesView,\n    {\n      display: false,\n    },\n  ],\n  [\n    expensesView,\n    {\n      display: false,\n    },\n  ],\n  [\n    assetsView,\n    {\n      display: false,\n    },\n  ],\n  [\n    debtsView,\n    {\n      display: false,\n    },\n  ],\n  [\n    taxView,\n    {\n      display: false,\n    },\n  ],\n  [\n    triggersView,\n    {\n      display: false,\n    },\n  ],\n  [\n    transactionsView,\n    {\n      display: false,\n    },\n  ],\n  [\n    reportView,\n    {\n      display: false,\n    },\n  ],\n  [\n    settingsView,\n    {\n      display: false,\n    },\n  ],\n]);\n\nconst exampleModels = [\n  {\n    name: exampleModelName,\n    model: simpleExampleData,\n  },\n  {\n    name: 'Defined Benefits Pension',\n    model: definedBenefitsPension,\n  },\n  {\n    name: 'Defined Contributions Pension',\n    model: definedContributionsPension,\n  },\n  {\n    name: 'National Savings Income Bonds',\n    model: nationalSavings,\n  },\n];\n\nlet reactAppComponent: AppContent;\n\nexport function setViewSetting(input: Setting): boolean {\n  // log(`setview setting being processed`);\n  if (reactAppComponent) {\n    return reactAppComponent.state.viewState.setViewSetting(\n      input.NAME,\n      input.VALUE,\n    );\n  } else {\n    return false;\n  }\n}\n\n// When loading in an old model, set the view from the\n// old-style settings data\n// This only matters for keeping tests passing.\nexport function migrateViewSetting(input: Setting): boolean {\n  // log(`setview setting being processed`);\n  if (reactAppComponent) {\n    return reactAppComponent.state.viewState.migrateViewSettingString(\n      input.NAME,\n      input.VALUE,\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function getDisplay(type: ViewType): boolean {\n  const view = views.get(type);\n  if (view === undefined) {\n    log(`Error : unrecognised view ${type}`);\n    return false;\n  }\n  const result = view.display;\n  return result;\n}\n\n// from https://coolors.co\nconst colors = [\n  '4E81BC',\n  'C0504E',\n  '9CBB58',\n  '23BFAA',\n  '8064A1',\n  '4BACC5',\n  'F79647',\n  '7F6084',\n  '77A032',\n  '33558B',\n];\n\nfunction hexToRgb(hex: string) {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : {\n        r: 30,\n        g: 30,\n        b: 100,\n      };\n}\n\nfunction getColor(index: number) {\n  return hexToRgb(colors[index % colors.length]);\n}\nfunction makeBarData(labels: string[], chartData: ItemChartData[]): ChartData {\n  return {\n    labels: labels,\n    datasets: chartData.map((cd, index) => {\n      const c = getColor(index);\n      return {\n        label: cd.item.NAME,\n        data: cd.chartDataPoints.map(c => {\n          return Math.round(c.y * 100.0) / 100.0;\n        }),\n        backgroundColor: `rgb(${c.r},${c.g},${c.b})`,\n        barPercentage: 1.0,\n      };\n    }),\n    displayLegend: true,\n  };\n}\n\nfunction getUserID() {\n  return userID;\n}\n\nfunction getExampleModel(modelString: string) {\n  return makeModelFromJSON(modelString);\n}\n\nfunction showAlert(text: string) {\n  // log(`setState for alert update`);\n  reactAppComponent.setState({\n    alertText: text,\n  });\n}\n\nfunction toggleOption(type: string) {\n  if (reactAppComponent) {\n    log(\n      `before toggle reactAppComponent.state.${type} = ${reactAppComponent.options[type]}`,\n    );\n    reactAppComponent.options[type] = !reactAppComponent.options[type];\n    log(`after toggle state has ${type} is ${reactAppComponent.options[type]}`);\n  } else {\n    alert(`error: data not ready to set ${type} mode`);\n  }\n}\n\nasync function getModel(): Promise<{\n  model: ModelData | undefined;\n  modelNames: string[];\n}> {\n  let modelNames = await getModelNames(getUserID());\n  let model: ModelData | undefined = undefined;\n  // log(`got ${modelNames.length} modelNames`);\n\n  if (\n    modelNames.length === 0 ||\n    (modelName === exampleModelName &&\n      modelNames.find(x => {\n        return x === exampleModelName;\n      }) === undefined)\n  ) {\n    // log(`modelNames are ${modelNames}`);\n    // log(`does not include ${exampleModelName}, so`);\n    if (modelNames.length > 0) {\n      // log(`no model called ${exampleModelName}, so just choose the 1st one`);\n      modelName = modelNames.sort((a, b) => lessThan(a, b))[0];\n      // log(`switch to a different modelName ${modelName}`);\n\n      const modelAndStatus = await loadModel(getUserID(), modelName);\n      if (modelAndStatus === undefined) {\n        const response = 'problem with model data';\n        showAlert(response);\n        return { model, modelNames };\n      }\n      isDirty = modelAndStatus.status.isDirty;\n      model = modelAndStatus.model;\n    } else {\n      // log('recreate example models');\n      // force us to have the example models\n      await Promise.all(\n        exampleModels.map(async x => {\n          return await saveModelLSM(\n            getUserID(),\n            x.name,\n            getExampleModel(x.model),\n          );\n        }),\n      );\n      modelNames = exampleModels.map(x => {\n        return x.name;\n      });\n      model = getExampleModel(simpleExampleData);\n      modelName = exampleModelName;\n    }\n  } else {\n    // log(`modelNames are ${modelNames}`);\n    // log(`go load ${modelName}`);\n    let gotModelOK = true;\n    try {\n      // log(`look for ${modelName} from ${modelNames}`);\n      const modelAndStatus = await loadModel(getUserID(), modelName);\n      if (modelAndStatus) {\n        isDirty = modelAndStatus.status.isDirty;\n        model = modelAndStatus.model;\n      }\n    } catch (err) {\n      // log('no model found');\n      log(`Cannot load ${modelName}, err = ${err}. Consider 'Force delete'?`);\n      gotModelOK = false;\n    }\n    if (!gotModelOK || model === undefined) {\n      // log('no model found - do not try to display anything');\n      return { model, modelNames };\n    }\n  }\n  return { model, modelNames };\n}\nfunction evalMode(): boolean {\n  if (reactAppComponent) {\n    return reactAppComponent.options.evalMode;\n  } else {\n    return false;\n  }\n}\nfunction getReporter(model: ModelData, viewSettings: ViewSettings) {\n  // define a 'reporter' function which will be\n  // passed into the evaluation code to capture\n  // data as we proceed with calculations\n  let nameMatcher = '';\n  model.assets.forEach(a => {\n    if (viewSettings.getShowItem(Context.Asset, a.NAME)) {\n      // log(`show ${a.NAME}`);\n      const name = a.NAME;\n      if (nameMatcher === '') {\n        nameMatcher = name;\n      } else {\n        nameMatcher = nameMatcher + '|' + name;\n      }\n    } else {\n      // log(`do not show ${a.NAME}`);\n    }\n  });\n  //log(`nameMatcher for reporter = ${nameMatcher}`);\n\n  const getSettingValue = (settingName: string) => {\n    let value = '';\n    const s = model.settings.find(s => {\n      return s.NAME === settingName;\n    });\n    if (s !== undefined) {\n      value = s.VALUE;\n    }\n    return value;\n  };\n  const startDate = new Date(getSettingValue(roiStart));\n  const endDate = new Date(getSettingValue(roiEnd));\n  //log(`startDate for reporter = ${startDate}`);\n  //log(`endDate for reporter = ${endDate}`);\n  return (name: string, val: number | string, date: Date, source: string) => {\n    if (!reactAppComponent.state.reportDefiner) {\n      return false;\n    }\n    if (\n      model.expenses.find(e => {\n        return e.NAME === source;\n      })\n    ) {\n      // expenses just happen - do not include them in 'actions'\n      return false;\n    }\n\n    // log(`sourceMatcher = ${reactAppComponent.reportDefiner.sourceMatcher}`)\n    // log(`sourceExcluder = ${reactAppComponent.reportDefiner.sourceExcluder}`)\n    if (nameMatcher === '') {\n      return false;\n    }\n    const matcher = reactAppComponent.state.reportDefiner.sourceMatcher;\n    const excluder = reactAppComponent.state.reportDefiner.sourceExcluder;\n    if (!matcher && !excluder) {\n      return false;\n    }\n    if (printDebug()) {\n      log(`report for name = ${name}`);\n      log(`report for val = ${val}`);\n      log(`report for date = ${date}`);\n      log(`report for source = ${source}`);\n    }\n    if (date < getTodaysDate(model)) {\n      return false;\n    }\n    if (date < startDate) {\n      return false;\n    }\n    if (date > endDate) {\n      return false;\n    }\n    if (name.startsWith(purchase)) {\n      return false;\n    }\n    if (nameMatcher) {\n      const nameRegex = RegExp(nameMatcher);\n      if (name.match(nameRegex) === null) {\n        // log(`do not display ${name} bcs it doesn't match ${nameMatcher}`);\n        return false;\n      }\n    }\n\n    if (matcher) {\n      try {\n        const sourceRegex = RegExp(matcher);\n        if (source.match(sourceRegex) === null) {\n          // log(`do not show source ${source} bcs it doesn't match ${matcher}`);\n          return false;\n        }\n      } catch (e) {\n        alert('error processing regexp');\n        return false;\n      }\n    }\n\n    if (excluder) {\n      try {\n        const sourceRegex = RegExp(excluder);\n        if (source.match(sourceRegex) !== null) {\n          // log(`do not show source ${source} bcs it does match ${excluder}`);\n          return false;\n        }\n      } catch (e) {\n        alert('error processing regexp');\n        return false;\n      }\n    }\n    return true;\n  };\n}\n\nexport async function refreshDataInternal(\n  refreshModel: boolean,\n  refreshChart: boolean,\n  sourceID: number,\n) {\n  if (printDebug()) {\n    log(`entering refreshDataInternal from sourceID ${sourceID}`);\n  }\n  // log(`refreshData with refreshModel = `\n  //   +`${refreshModel}, refreshChart = ${refreshChart}`);\n  const viewSettings = reactAppComponent.state.viewState;\n\n  let modelNames: string[];\n  let model: ModelData;\n  let evaluationsAndVals: {\n    evaluations: Evaluation[];\n    todaysAssetValues: Map<string, AssetVal>;\n    todaysDebtValues: Map<string, DebtVal>;\n    todaysIncomeValues: Map<string, IncomeVal>;\n    todaysExpenseValues: Map<string, ExpenseVal>;\n    todaysSettingValues: Map<string, SettingVal>;\n    reportData: ReportDatum[];\n  } = {\n    evaluations: reactAppComponent.state.evaluations,\n    todaysAssetValues: reactAppComponent.state.todaysAssetValues,\n    todaysDebtValues: reactAppComponent.state.todaysDebtValues,\n    todaysIncomeValues: reactAppComponent.state.todaysIncomeValues,\n    todaysExpenseValues: reactAppComponent.state.todaysExpenseValues,\n    todaysSettingValues: reactAppComponent.state.todaysSettingValues,\n    reportData: reactAppComponent.state.reportData,\n  };\n\n  // log('refreshData in AppContent - get data and redraw content');\n  if (!refreshModel) {\n    // use existing data\n    modelNames = reactAppComponent.state.modelNamesData;\n    model = reactAppComponent.state.modelData;\n  } else {\n    log(`refresh the model - get the model and recalculate values`);\n    const x = await getModel();\n    if (x.model === undefined) {\n      return;\n    }\n    model = x.model;\n    modelNames = x.modelNames;\n\n    model.triggers.sort((a: Trigger, b: Trigger) => lessThan(b.NAME, a.NAME));\n    model.expenses.sort((a: Expense, b: Expense) => lessThan(b.NAME, a.NAME));\n    model.settings.sort((a: Setting, b: Setting) => lessThan(b.NAME, a.NAME));\n    model.incomes.sort((a: Income, b: Income) => lessThan(b.NAME, a.NAME));\n    model.transactions.sort((a: Transaction, b: Transaction) =>\n      lessThan(b.NAME, a.NAME),\n    );\n    model.assets.sort((a: Asset, b: Asset) => lessThan(b.NAME, a.NAME));\n    modelNames.sort((a: string, b: string) => lessThan(a, b));\n\n    if (refreshModel) {\n      viewSettings.setModel(model);\n    }\n    if (evalMode()) {\n      let reporter: ReportValueChecker = () =>\n        //name: string,\n        //val: number | string,\n        //date: Date,\n        //source: string,\n        {\n          return false;\n        };\n      if (!getDisplay(reportView)) {\n        // log(`don't compute report`);\n      } else {\n        // log(`create the report data`);\n        reporter = getReporter(model, viewSettings);\n      }\n      // go and do the actual modeling, the calculations\n      evaluationsAndVals = getEvaluations(model, reporter);\n\n      // log(`evaluationsAndVals.reportData.length = ${evaluationsAndVals.reportData.length}`);\n    }\n  }\n  if (refreshModel || refreshChart) {\n    // log(`refresh model or chart data`);\n    const chartData: DataForView = makeChartData(\n      model,\n      viewSettings,\n      evaluationsAndVals,\n    );\n\n    chartData.expensesData.sort((a, b) => lessThan(a.item.NAME, b.item.NAME));\n    chartData.incomesData.sort((a, b) => lessThan(a.item.NAME, b.item.NAME));\n    chartData.assetData.sort((a, b) => lessThan(a.item.NAME, b.item.NAME));\n    chartData.taxData.sort((a, b) => lessThan(a.item.NAME, b.item.NAME));\n\n    if (printDebug()) {\n      chartData.assetData.forEach(entry => {\n        log(\n          `asset item ${showObj(entry.item)} has chart points ` +\n            `${showObj(entry.chartDataPoints)}`,\n        );\n      });\n    }\n\n    // get the data out of the object we got back\n    const {\n      expensesData,\n      incomesData,\n      assetData,\n      debtData,\n      taxData,\n      todaysAssetValues,\n      todaysDebtValues,\n      todaysIncomeValues,\n      todaysExpenseValues,\n      todaysSettingValues,\n    } = chartData;\n\n    if (printDebug()) {\n      log('in refreshData');\n      log(` expensesData = ${expensesData}`);\n      log(` incomesData = ${incomesData}`);\n      log(` assetData = ${assetData}`);\n      log(` taxData = ${taxData}`);\n    }\n\n    const expensesChartData = makeBarData(chartData.labels, expensesData);\n    const incomesChartData = makeBarData(chartData.labels, incomesData);\n    const assetChartData = makeBarData(chartData.labels, assetData);\n    const debtChartData = makeBarData(chartData.labels, debtData);\n    const taxChartData = makeBarData(chartData.labels, taxData);\n\n    if (reactAppComponent !== undefined) {\n      // log(`go setState with modelNames = ${modelNames}`);\n\n      // setState on a reactComponent triggers update of view\n      // log(`setState for new data`);\n      reactAppComponent.setState(\n        {\n          modelData: model,\n          evaluations: evaluationsAndVals.evaluations,\n          expensesChartData,\n          incomesChartData,\n          assetChartData,\n          debtChartData,\n          taxChartData,\n          modelNamesData: modelNames,\n          todaysAssetValues: todaysAssetValues,\n          todaysDebtValues: todaysDebtValues,\n          todaysIncomeValues: todaysIncomeValues,\n          todaysExpenseValues: todaysExpenseValues,\n          todaysSettingValues: todaysSettingValues,\n          reportData: evaluationsAndVals.reportData,\n        },\n        () => {\n          //alert('done!');\n          // setState is async\n          // do logging after setState using the 2nd argument\n          // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n          if (printDebug()) {\n            log(\n              'reactAppComponent.state.reportData.length = ' +\n                `${reactAppComponent.state.reportData.length}`,\n            );\n          }\n        },\n      );\n    }\n  } else {\n    // log('refreshData in no need to visit db');\n    // log(`setState without new visit to db`);\n    reactAppComponent.setState({ ...reactAppComponent.state });\n  }\n  // log(`finished refreshData`);\n}\n\nexport async function refreshData(\n  refreshModel: boolean,\n  refreshChart: boolean,\n  sourceID: number,\n) {\n  if (refreshModel) {\n    log(\n      `go to refresh data - set as waiting...${new Date().toLocaleTimeString()}`,\n    );\n    return await reactAppComponent.setState(\n      {\n        isWaiting: true,\n      },\n      async () => {\n        const result = await refreshDataInternal(\n          refreshModel,\n          refreshChart,\n          sourceID,\n        );\n        log(\n          `finished refresh data - set as not waiting...${new Date().toLocaleTimeString()}`,\n        );\n        reactAppComponent.setState({\n          isWaiting: false,\n        });\n        return result;\n      },\n    );\n  } else {\n    return await refreshDataInternal(refreshModel, refreshChart, sourceID);\n  }\n}\n\nexport function setReportKey(textInput: string): boolean {\n  /*\n  report:{\"sourceExcluder\":\"growth\"}\n  */\n  try {\n    const inputObj = JSON.parse(textInput);\n\n    // log(`setState for report writing`);\n    reactAppComponent.setState({\n      reportDefiner: {\n        sourceMatcher: inputObj.sourceMatcher,\n        sourceExcluder: inputObj.sourceExcluder,\n      },\n    });\n\n    // log('setting key for report : go refresh data');\n    refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      1, //sourceID\n    );\n    return true;\n  } catch (e) {\n    alert('error processing JSON format');\n    return false;\n  }\n}\nexport function getReportKey() {\n  return reactAppComponent.state.reportDefiner;\n}\n\nexport async function submitAsset(assetInput: Asset, modelData: ModelData) {\n  const message = await submitAssetLSM(\n    assetInput,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      2, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n}\nexport async function submitExpense(\n  expenseInput: Expense,\n  modelData: ModelData,\n) {\n  const message = await submitExpenseLSM(\n    expenseInput,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      3, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n}\nexport async function submitIncome(\n  incomeInput: Income,\n  modelData: ModelData,\n): Promise<boolean> {\n  const message = await submitIncomeLSM(\n    incomeInput,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      4, //sourceID\n    );\n    return true;\n  } else {\n    showAlert(message);\n    return false;\n  }\n}\nexport async function submitTransaction(\n  transactionInput: Transaction,\n  modelData: ModelData,\n) {\n  const message = await submitTransactionLSM(\n    transactionInput,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      5, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n}\nexport async function submitTrigger(\n  triggerInput: Trigger,\n  modelData: ModelData,\n) {\n  const message = await submitTriggerLSM(\n    triggerInput,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      6, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n}\n\n// if HINT or TYPE are empty, leave pre-existing values\nexport async function editSetting(\n  settingInput: {\n    NAME: string;\n    VALUE: string;\n  },\n  modelData: ModelData,\n) {\n  if (\n    setViewSetting({\n      NAME: settingInput.NAME,\n      VALUE: settingInput.VALUE,\n      TYPE: viewType,\n      HINT: '',\n    })\n  ) {\n    return await refreshData(\n      false, // or false refreshModel = true,\n      true, // refreshChart = true,\n      7, //sourceID\n    );\n  }\n  const settingWithBlanks = {\n    ...settingInput,\n    HINT: '',\n    TYPE: '',\n  };\n  const message = await submitSettingLSM(\n    settingWithBlanks,\n    modelName,\n    modelData,\n    getUserID(),\n  );\n  if (message === '') {\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      8, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n}\n\nexport async function submitNewSetting(\n  setting: Setting,\n  modelData: ModelData,\n  viewSettings: ViewSettings,\n) {\n  if (viewSettings.migrateViewSettingString(setting.NAME, setting.VALUE)) {\n    return await refreshData(\n      false, // or false refreshModel = true,\n      true, // refreshChart = true,\n      9, //sourceID\n    );\n  } else {\n    await submitNewSettingLSM(setting, modelName, modelData, getUserID());\n    return await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      10, //sourceID\n    );\n  }\n}\n\nexport function toggle(type: ViewType, sourceID: number) {\n  log(`toggle called from ${sourceID}`);\n  if (reactAppComponent === undefined) {\n    return;\n  }\n  for (const k of views.keys()) {\n    if (k !== type) {\n      const view = views.get(k);\n      if (view === undefined) {\n        log(`Error : unrecognised view ${type}`);\n        return;\n      }\n      view.display = false;\n    }\n  }\n  const view = views.get(type);\n  if (view === undefined) {\n    log(`Error : unrecognised view ${type}`);\n    return false;\n  }\n  view.display = true;\n  if (type === reportView) {\n    refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      11, //sourceID\n    );\n  } else {\n    refreshData(\n      false, // refreshModel = true,\n      true, // refreshChart = true,\n      12, //sourceID\n    );\n  }\n}\n\nfunction checkModelData(givenModel: ModelData): string {\n  const response = checkData(givenModel);\n  if (response === '') {\n    return 'model check all good';\n  } else {\n    return response;\n  }\n}\n\nexport async function deleteItemFromModel(\n  name: string,\n  itemList: Item[],\n  modelName: string,\n  model: ModelData,\n): Promise<boolean> {\n  //log(`delete item ${name}`);\n  //log(`before itemList ${itemList.map((i)=>{return i.NAME})}`);\n\n  markForUndo(model);\n\n  const idx = itemList.findIndex((i: Item) => {\n    return i.NAME === name;\n  });\n  if (idx !== -1) {\n    const oldItem = itemList[idx];\n    // log(`before delete itemList = ${showObj(itemList)}`);\n    itemList.splice(idx, 1);\n    // log(`after delete itemList = ${showObj(itemList)}`);\n\n    const checkResponse = checkData(model);\n    if (checkResponse !== '') {\n      const response = `edited  model fails checks :${checkResponse}', reverting`;\n      // log(`setState for delete item alert`);\n      reactAppComponent.setState({\n        alertText: response,\n      });\n      itemList.splice(idx, 0, oldItem);\n      // log(`after putback itemList = ${showObj(itemList)}`);\n      revertToUndoModel(model);\n      return false;\n    }\n\n    //log(`after itemList  ${itemList.map((i)=>{return i.NAME})}`);\n\n    await saveModelLSM(getUserID(), modelName, model);\n    await refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      13, //sourceID\n    );\n    return true;\n  }\n  return false;\n}\n\nexport async function deleteTrigger(name: string) {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.triggers,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function deleteAsset(name: string) {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.assets,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function deleteTransaction(name: string) {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.transactions,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function deleteExpense(name: string) {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.expenses,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function deleteIncome(name: string) {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.incomes,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function deleteSetting(name: string): Promise<boolean> {\n  return deleteItemFromModel(\n    name,\n    reactAppComponent.state.modelData.settings,\n    modelName,\n    reactAppComponent.state.modelData,\n  );\n}\n\nexport async function updateModelName(newValue: string): Promise<boolean> {\n  // log(`model name is now ${newValue}`);\n  if (modelName === newValue) {\n    // log(`no need to update name - already working with ${newValue}`);\n    return true;\n  }\n  const check = isDirty;\n  if (check) {\n    if (\n      !window.confirm(`Continue without saving unsaved model ${modelName}?`)\n    ) {\n      // log(`don't update name - user wants to continue with ${modelName}`);\n      return false;\n    }\n  }\n  // log(`switch model name to ${newValue}`);\n  modelName = newValue;\n  await ensureModel(getUserID(), modelName);\n  await refreshData(\n    true, // refreshModel = true,\n    true, // refreshChart = true,\n    14, //sourceID\n  );\n  return true;\n}\n\nfunction goToOverviewPage(): boolean {\n  if (reactAppComponent) {\n    return reactAppComponent.options.goToOverviewPage;\n  } else {\n    return false;\n  }\n}\nfunction checkOverwrite(): boolean {\n  if (reactAppComponent) {\n    const result = reactAppComponent.options.checkOverwrite;\n    // log(`should we check before overwrite? ${result}`);\n    return result;\n  } else {\n    return false;\n  }\n}\nexport async function replaceWithModel(\n  userName: string | undefined,\n  thisModelName: string,\n  newModel: ModelData,\n  confirmBeforeReplace: boolean,\n): Promise<boolean> {\n  // log(`replaceWithModel...`);\n  if (userName === undefined) {\n    userName = getUserID();\n  }\n  const check = confirmBeforeReplace && isDirty;\n  if (check) {\n    if (\n      !window.confirm(`Continue without saving unsaved model ${modelName}?`)\n    ) {\n      return false;\n    }\n  }\n  modelName = thisModelName;\n  // log(`save ${modelName} with new model data ${newModel}`);\n  await saveModelLSM(userName, modelName, newModel);\n  await refreshData(\n    true, // refreshModel = true,\n    true, // refreshChart = true,\n    15, //sourceID\n  );\n  return true;\n}\n\ninterface AppState {\n  modelNamesData: string[];\n  modelData: ModelData;\n  evaluations: Evaluation[];\n  viewState: ViewSettings;\n  expensesChartData: ChartData;\n  incomesChartData: ChartData;\n  assetChartData: ChartData;\n  debtChartData: ChartData;\n  taxChartData: ChartData;\n  todaysAssetValues: Map<string, AssetVal>;\n  todaysDebtValues: Map<string, DebtVal>;\n  todaysIncomeValues: Map<string, IncomeVal>;\n  todaysExpenseValues: Map<string, ExpenseVal>;\n  todaysSettingValues: Map<string, SettingVal>;\n  reportDefiner: ReportMatcher;\n  reportData: ReportDatum[];\n  alertText: string;\n  isWaiting: boolean;\n}\ninterface AppProps {\n  logOutAction: () => {};\n  user: string;\n}\n\nfunction AlertDismissibleExample(props: {\n  message: string;\n  dismissAction: () => void;\n}) {\n  const [show, setShow] = useState(true);\n  let variant = 'success';\n  if (!props.message.startsWith('added new')) {\n    variant = 'warning';\n  }\n\n  return (\n    <>\n      <Alert show={show} variant={variant}>\n        <div id=\"pageTitle\" key=\"pageTitle\">\n          {props.message}\n        </div>\n        <Button\n          onClick={() => {\n            setShow(false);\n            props.dismissAction();\n          }}\n          variant={`outline-${variant}`}\n          id=\"btn-clear-alert\"\n        >\n          OK\n        </Button>\n      </Alert>\n\n      {!show && <Button onClick={() => setShow(true)}>Show Alert</Button>}\n    </>\n  );\n}\n\nexport class AppContent extends Component<AppProps, AppState> {\n  options: any;\n\n  public constructor(props: AppProps) {\n    super(props);\n    //this.handleUnload = this.handleUnload.bind(this);\n\n    const viewSettings = getDefaultViewSettings();\n    // log(`frequency is ${viewSettings.getViewSetting(viewFrequency, 'none')}`);\n\n    reactAppComponent = this;\n    this.state = {\n      modelData: emptyModel,\n      evaluations: [],\n      viewState: viewSettings,\n      expensesChartData: {\n        labels: [],\n        datasets: [],\n        displayLegend: true,\n      },\n      incomesChartData: {\n        labels: [],\n        datasets: [],\n        displayLegend: true,\n      },\n      assetChartData: {\n        labels: [],\n        datasets: [],\n        displayLegend: true,\n      },\n      debtChartData: {\n        labels: [],\n        datasets: [],\n        displayLegend: true,\n      },\n      taxChartData: {\n        labels: [],\n        datasets: [],\n        displayLegend: true,\n      },\n      modelNamesData: [],\n      todaysAssetValues: new Map<string, AssetVal>(),\n      todaysDebtValues: new Map<string, DebtVal>(),\n      todaysIncomeValues: new Map<string, IncomeVal>(),\n      todaysExpenseValues: new Map<string, ExpenseVal>(),\n      todaysSettingValues: new Map<string, SettingVal>(),\n      reportDefiner: {\n        sourceMatcher: defaultSourceMatcher,\n        sourceExcluder: defaultSourceExcluder,\n      },\n      reportData: [],\n      alertText: '',\n      isWaiting: false,\n    };\n\n    this.options = {\n      goToOverviewPage: true,\n      checkOverwrite: true,\n      evalMode: true,\n    };\n\n    refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      16, //sourceID\n    );\n  }\n\n  public componentWillUnmount() {\n    //log('in componentWillUnmount');\n    //window.removeEventListener('beforeunload', this.handleUnload);\n  }\n  /*\n  public handleUnload(e) {\n    //log('in handleUnload');\n    if (isDirty) {\n      const message = 'o/';\n\n      (e || window.event).returnValue = message; //Gecko + IE\n      return message;\n    }\n  }\n*/\n  public componentDidMount() {\n    //log('in componentDidMount');\n    toggle(\n      homeView,\n      27, //sourceID\n    );\n    refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      25, //sourceID\n    );\n    //window.addEventListener('beforeunload', this.handleUnload);\n  }\n\n  private navbarDiv(isWaiting: boolean) {\n    return navbarContent(isWaiting, () => {\n      const estateVal = this.state.reportData.find(d => {\n        return d.name === 'Estate final value';\n      });\n      let textToDisplay = '';\n      if (estateVal !== undefined) {\n        if (estateVal.newVal !== undefined) {\n          textToDisplay = `Estate: ${makeTwoDP(estateVal.newVal)}`;\n        }\n      }\n      return (\n        <>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Form\n                inline\n                onSubmit={(e: React.FormEvent<Element>) => {\n                  e.preventDefault();\n                  return false;\n                }}\n              >\n                <Col>\n                  <Row>{this.statusButtonList()}</Row>\n                  <Row>{this.viewButtonList()}</Row>\n                </Col>\n              </Form>\n            </Nav>\n            <Nav>\n              <Form\n                inline\n                onSubmit={(e: React.FormEvent<Element>) => {\n                  e.preventDefault();\n                  return false;\n                }}\n              >\n                <Col>\n                  <div className=\"d-flex flex-row-reverse\">\n                    {this.rhsTopButtonList(textToDisplay)}\n                  </div>\n                  <div className=\"d-flex flex-row-reverse\">\n                    {this.rhsBottomButtonList()}\n                  </div>\n                </Col>\n              </Form>\n            </Nav>\n          </Navbar.Collapse>\n        </>\n      );\n    });\n  }\n\n  public render() {\n    if (printDebug()) {\n      log('in render');\n    }\n    // log(`this.state.reportData.length = ${this.state.reportData.length}`);\n    try {\n      // throw new Error('pretend something went wrong');\n\n      const getSettingValue = (settingName: string) => {\n        let value = '';\n        const s = this.state.modelData.settings.find(s => {\n          return s.NAME === settingName;\n        });\n        if (s !== undefined) {\n          value = s.VALUE;\n        }\n        return value;\n      };\n      const getStartDate = () => {\n        return getSettingValue(roiStart);\n      };\n      const getEndDate = () => {\n        return getSettingValue(roiEnd);\n      };\n      const updateSettingValue = (settingName: string, newDate: string) => {\n        const s = this.state.modelData.settings.find(s => {\n          return s.NAME === settingName;\n        });\n        if (s !== undefined) {\n          s.VALUE = newDate;\n          submitNewSetting(s, this.state.modelData, this.state.viewState);\n        }\n      };\n      const updateStartDate = async (newDate: string) => {\n        updateSettingValue(roiStart, newDate);\n      };\n      const updateEndDate = async (newDate: string) => {\n        updateSettingValue(roiEnd, newDate);\n      };\n\n      log(`report is length ${this.state.reportData.length}`);\n\n      return (\n        <>\n          {this.navbarDiv(this.state.isWaiting)}\n          <>\n            {this.homeDiv()}\n            {overviewDiv(\n              this.state.modelData,\n              this.state.viewState,\n              showAlert,\n              this.state.assetChartData,\n              this.state.debtChartData,\n              this.state.expensesChartData,\n              this.state.incomesChartData,\n              this.state.taxChartData,\n              getStartDate,\n              updateStartDate,\n              getEndDate,\n              updateEndDate,\n            )}\n            {this.settingsDiv(\n              this.state.modelData,\n              this.state.todaysSettingValues,\n            )}\n            {incomesDiv(\n              this.state.modelData,\n              this.state.viewState,\n              showAlert,\n              this.state.incomesChartData,\n              this.state.todaysIncomeValues,\n              getStartDate,\n              updateStartDate,\n              getEndDate,\n              updateEndDate,\n            )}\n            {expensesDiv(\n              this.state.modelData,\n              this.state.viewState,\n              showAlert,\n              this.state.expensesChartData,\n              this.state.todaysExpenseValues,\n              getStartDate,\n              updateStartDate,\n              getEndDate,\n              updateEndDate,\n            )}\n            {assetsDiv(\n              this.state.modelData,\n              this.state.viewState,\n              showAlert,\n              this.state.assetChartData,\n              this.state.todaysAssetValues,\n              getStartDate,\n              updateStartDate,\n              getEndDate,\n              updateEndDate,\n            )}\n            {debtsDiv(\n              this.state.modelData,\n              this.state.viewState,\n              showAlert,\n              this.state.debtChartData,\n              this.state.todaysDebtValues,\n              getStartDate,\n              updateStartDate,\n              getEndDate,\n              updateEndDate,\n            )}\n            {this.transactionsDiv()}\n            {taxDiv(\n              this.state.modelData,\n              this.state.viewState,\n              this.state.taxChartData,\n            )}\n            {this.triggersDiv()}\n            {reportDiv(\n              this.state.modelData,\n              this.state.viewState,\n              this.state.reportDefiner,\n              this.state.reportData,\n            )}\n          </>\n        </>\n      );\n    } catch (e) {\n      const err: Error = e as Error;\n      return this.internalErrorDiv(err);\n    }\n  }\n\n  private internalErrorDiv(e: Error) {\n    return (\n      <>\n        {this.navbarDiv(\n          false, // is not waiting\n        )}\n        <h1>\n          Oops! something has gone wrong with FinKitty. Sad FinKitty apologises.\n        </h1>\n        {e.message}\n      </>\n    );\n  }\n\n  private modelList(\n    modelNames: string[],\n    actionOnSelect: (arg0: string) => {},\n    idKey: string,\n  ) {\n    if (modelNames.length === 0) {\n      return (\n        <div role=\"group\">\n          <img src={WaitGif} alt=\"FinKitty wait symbol\" />\n          Loading models...\n        </div>\n      );\n    }\n    // log(`modelNames = ${modelNames}`);\n    const buttons = modelNames.map(model => {\n      return makeButton(\n        model,\n        (e: React.MouseEvent<HTMLButtonElement>) => {\n          e.persist();\n          actionOnSelect(model);\n        },\n        model,\n        `btn-${idKey}-${model}`,\n        idKey !== 'del' && modelName === model ? 'primary' : 'outline-primary',\n      );\n    });\n    return (\n      <div className=\"ml-3\">\n        Select an existing model\n        <br />\n        {buttons}\n      </div>\n    );\n  }\n\n  private modelListForSelect(modelNames: string[]) {\n    return this.modelList(\n      modelNames,\n      async (model: string) => {\n        if (await updateModelName(model)) {\n          if (goToOverviewPage()) {\n            await toggle(\n              overview,\n              999, //sourceID\n            );\n          }\n        }\n      },\n      'overview',\n    );\n  }\n\n  private getNewName(): {\n    gotNameOK: boolean;\n    newName: string;\n  } {\n    const result = {\n      gotNameOK: false,\n      newName: '',\n    };\n    let promptResponse = prompt('Provide a name for your model');\n    if (promptResponse === null) {\n      return result;\n    }\n    if (promptResponse === '') {\n      promptResponse = 'myModel';\n    }\n    // log(`set new model name to ${promptResponse}`);\n    const regex = RegExp('[a-zA-Z0-9_\\\\-\\\\. ]+');\n    const whatsLeft = promptResponse.replace(regex, '');\n    // log(`whatsLeft = ${whatsLeft}`);\n    if (whatsLeft !== '') {\n      const response =\n        'Model names can only contain a-z, A-Z, 0-9, _, - and . characters';\n      // log(`setState for regex item alert`);\n      reactAppComponent.setState({\n        alertText: response,\n      });\n      return result;\n    } else if (\n      this.state.modelNamesData.find(model => model === promptResponse)\n    ) {\n      showAlert(\"There's already a model with that name\");\n      return result;\n    }\n    result.gotNameOK = true;\n    result.newName = promptResponse;\n    return result;\n  }\n\n  private async deleteModel(modelNameForDelete: string) {\n    if (\n      window.confirm(\n        `delete all data in model ${modelNameForDelete} - you sure?`,\n      )\n    ) {\n      // log(`delete model ${modelNameForDelete}`);\n      const modelNames = this.state.modelNamesData;\n      await deleteModel(getUserID(), modelNameForDelete);\n      const idx = modelNames.findIndex(i => {\n        return i === modelNameForDelete;\n      });\n      if (idx !== -1) {\n        modelNames.splice(idx, 1);\n      } else {\n        log(`error, deleted ${modelNameForDelete} found in ${modelNames}`);\n      }\n      // log(`model names after delete are ${modelNames}`);\n      if (modelNames.length === 0) {\n        showAlert('no data left: recreating example model');\n        modelName = exampleModelName;\n        await saveModelLSM(\n          getUserID(),\n          modelName,\n          makeModelFromJSON(simpleExampleData),\n        );\n      } else {\n        modelName = modelNames[0];\n        // log(`model name after delete is ${modelName}`);\n      }\n      await refreshData(\n        true, // refreshModel = true,\n        true, // refreshChart = true,\n        17, //sourceID\n      );\n    }\n  }\n\n  private async diffModel(modelNameForDiff: string) {\n    const otherModelName: string | null = window.prompt(\n      `diff ${modelNameForDiff} against which model?`,\n      '',\n    );\n    if (otherModelName === null) {\n      return;\n    }\n    const otherModelAndStatus = await loadModel(getUserID(), otherModelName);\n    if (otherModelAndStatus === undefined) {\n      const response = `Can't load a model named ${otherModelName}`;\n      showAlert(response);\n      return;\n    }\n    const otherModel = otherModelAndStatus.model;\n    // log(`otherModel = ${showObj(otherModel)}`);\n    if (!otherModel) {\n      window.alert(`Can't load a model named ${otherModelName}`);\n      return;\n    }\n    const diffResult = diffModels(\n      this.state.modelData,\n      otherModel,\n      false,\n      modelNameForDiff,\n      otherModelName,\n    );\n    if (diffResult.length === 0) {\n      window.alert('models are the same');\n    } else {\n      let s = '';\n      for (const diff of diffResult) {\n        s += diff + `\\n`;\n      }\n      window.alert(s);\n    }\n  }\n\n  private async cloneModel(\n    name: string,\n    fromModel: ModelData,\n  ): Promise<boolean> {\n    // log(`going to clone a model and give it name ${name}`);\n    // log(`stringify model for clone`);\n    const currentData = JSON.stringify(fromModel);\n    const updatedOK = await updateModelName(name);\n    if (updatedOK) {\n      const newModel = makeModelFromJSON(currentData);\n      const replacedOK = await replaceWithModel(\n        undefined,\n        modelName,\n        newModel,\n        false,\n      );\n      if (replacedOK) {\n        if (goToOverviewPage()) {\n          await toggle(\n            overview,\n            999, //sourceID\n          );\n        }\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      return false; // didn't update name OK\n    }\n  }\n  private homeScreenButtons() {\n    return (\n      <>\n        <CreateModelForm\n          userID={userID}\n          currentModelName={modelName}\n          modelData={this.state.modelData}\n          saveModel={async (\n            userID: string,\n            modelName: string,\n            modelData: ModelData,\n          ) => {\n            await saveModelToDBLSM(userID, modelName, modelData);\n            refreshData(\n              true, // refreshModel = true,\n              true, // refreshChart = true,\n              18, //sourceID\n            );\n          }}\n          showAlert={showAlert}\n          cloneModel={this.cloneModel}\n          exampleModels={exampleModels}\n          getExampleModel={getExampleModel}\n          getModelNames={getModelNames}\n        />\n        <br></br>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Delete model',\n            async () => {\n              this.deleteModel(modelName);\n            },\n            `btn-delete`,\n            `btn-delete`,\n            'outline-secondary',\n          )}\n          {makeButton(\n            'Diff model',\n            async () => {\n              this.diffModel(modelName);\n            },\n            `btn-diff`,\n            `btn-diff`,\n            'outline-secondary',\n          )}\n        </div>\n        <br></br>\n        <br></br>\n        <div className=\"ml-3\">\n          Developer tools:\n          <br />\n          {makeButton(\n            'Check model',\n            async () => {\n              const response = checkModelData(\n                reactAppComponent.state.modelData,\n              );\n              // log(`setState for check result alert`);\n              reactAppComponent.setState({\n                alertText: response,\n              });\n            },\n            `btn-check`,\n            `btn-check`,\n            'outline-secondary',\n          )}\n          <br></br>\n          {makeButton(\n            'Copy model as JSON to clipboard',\n            () => {\n              const text = JSON.stringify(this.state.modelData);\n              navigator.clipboard.writeText(text).then(\n                function() {\n                  showAlert(`model as JSON on clipboard`);\n                },\n                function(err) {\n                  console.error('Async: Could not copy text: ', err);\n                  showAlert(\n                    `sorry, something went wrong, no copy on clipboard - in console instead`,\n                  );\n                  log('-------- start of model --------');\n                  log(text);\n                  log('-------- end of model --------');\n                },\n              );\n            },\n            `btn-log`,\n            `btn-log`,\n            'outline-secondary',\n          )}\n          {makeButton(\n            'Test encrypted JSON',\n            () => {\n              const inputEnc = prompt('Enter encrypted JSON');\n              if (inputEnc === null) {\n                return;\n              }\n              const secret = prompt('Enter secret key');\n              if (secret === null) {\n                return;\n              }\n              try {\n                const decipher = CryptoJS.AES.decrypt(inputEnc, secret);\n                const decipherString = decipher.toString(CryptoJS.enc.Utf8);\n                log(`deciphered text ${decipherString}`);\n                if (decipherString === undefined) {\n                  showAlert('could not decode this data');\n                } else {\n                  const decipheredModel = makeModelFromJSON(decipherString);\n                  const response = checkModelData(decipheredModel);\n                  // log(`setState for loaded model alert`);\n                  reactAppComponent.setState({\n                    alertText: response,\n                  });\n                }\n              } catch (err) {\n                showAlert('could not decode this data');\n              }\n            },\n            `btn-JSON-encrypt-replace`,\n            `btn-JSON-encrypt-replace`,\n            'outline-secondary',\n          )}\n        </div>\n        <ReplaceWithJSONForm\n          modelName={modelName}\n          modelNames={this.state.modelNamesData}\n          userID={userID}\n          showAlert={showAlert}\n          setReportKey={setReportKey}\n          toggleCheckOverwrite={() => {\n            return toggleOption('checkOverwrite');\n          }}\n          toggleOverview={() => {\n            return toggleOption('goToOverviewPage');\n          }}\n          doCheckOverwrite={checkOverwrite}\n          eval={() => {\n            return toggleOption('evalMode');\n          }}\n        />\n      </>\n    );\n  }\n\n  private homeDiv() {\n    // log(`this.state.modelNamesData = ${this.state.modelNamesData}`);\n    if (!getDisplay(homeView)) {\n      // log(`don't populate homeView`);\n      return;\n    }\n    // log(`do populate homeView`);\n\n    return (\n      <div className=\"ml-3\">\n        <div className=\"row\">\n          <div className=\"col-sm mb-4\">\n            <div className=\"ml-3\">\n              {makeButton(\n                'Create a new model',\n                async () => {\n                  const newNameFromUser = this.getNewName();\n                  if (!newNameFromUser.gotNameOK) {\n                    return;\n                  }\n                  if (await updateModelName(newNameFromUser.newName)) {\n                    // log(`created new model`);\n                    if (goToOverviewPage()) {\n                      await toggle(\n                        overview,\n                        999, //sourceID\n                      );\n                    }\n                  }\n                },\n                'startNewModel',\n                'startNewModel',\n                'outline-secondary',\n              )}\n            </div>\n            <br />\n            {this.modelListForSelect(this.state.modelNamesData)}\n            <br />\n            {this.state.modelNamesData.length > 0\n              ? this.homeScreenButtons()\n              : ''}\n          </div>\n          <div className=\"col-md mb-4\">{screenshotsDiv()}</div>\n        </div>\n      </div>\n    );\n  }\n\n  private todaysSettingsTable(\n    model: ModelData,\n    todaysValues: Map<string, SettingVal>,\n  ) {\n    if (todaysValues.size === 0) {\n      return;\n    }\n    const today = getTodaysDate(model);\n    const rows = addIndices(\n      Array.from(todaysValues)\n        .map(([key, value]) => {\n          // log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n          return {\n            NAME: key,\n            VALUE: `${value.settingVal}`,\n          };\n        })\n        .sort((a: Item, b: Item) => lessThan(b.NAME, a.NAME)),\n    );\n    // log(`display ${showObj(rows)}`);\n    return collapsibleFragment(\n      <DataGrid\n        deleteFunction={undefined}\n        handleGridRowsUpdated={function() {\n          return false;\n        }}\n        rows={rows}\n        columns={[\n          /*\n          {\n            ...defaultColumn,\n            key: 'index',\n            name: 'index',\n            formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n            editable: false,\n          },\n          */\n          {\n            ...defaultColumn,\n            key: 'NAME',\n            name: 'name',\n            formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n            editable: false,\n          },\n          {\n            ...defaultColumn,\n            key: 'VALUE',\n            name: `value`,\n            formatter: <SettingFormatter name=\"value\" value=\"unset\" />,\n            editable: false,\n          },\n        ]}\n        triggers={model.triggers}\n      />,\n      `Settings values at ${today.toDateString()}`,\n    );\n  }\n\n  private settingsDiv(model: ModelData, todaysValues: Map<string, SettingVal>) {\n    if (!getDisplay(settingsView)) {\n      // log(`don't populate settingsView`);\n      return;\n    }\n    // log(`do populate settingsView`);\n    return (\n      <div className=\"ml-3\">\n        <fieldset>\n          {settingsTableDiv(\n            this.state.modelData,\n            this.state.viewState,\n            showAlert,\n          )}\n          {this.todaysSettingsTable(model, todaysValues)}\n          <p />\n\n          {collapsibleFragment(\n            <div className=\"addNewSetting\">\n              <AddDeleteSettingForm\n                submitSettingFunction={submitNewSetting}\n                checkTransactionFunction={checkTransaction}\n                submitTransactionFunction={submitTransaction}\n                submitTriggerFunction={submitTrigger}\n                model={this.state.modelData}\n                viewSettings={this.state.viewState}\n                showAlert={showAlert}\n              />\n              {/*\n            // adding this wierdly makes tooltips work!\n            <AddDeleteTransactionForm\n              checkFunction={checkTransaction}\n              submitFunction={submitTransaction}\n              deleteFunction={deleteTransaction}\n              submitTriggerFunction={submitTrigger}\n              model={this.state.modelData}\n              showAlert={showAlert}\n            />*/}\n            </div>,\n            `Add setting`,\n          )}\n        </fieldset>\n      </div>\n    );\n  }\n\n  private triggersDiv() {\n    if (!getDisplay(triggersView)) {\n      // log(`don't populate triggersView`);\n      return;\n    }\n    // log(`do populate triggersView`);\n\n    return (\n      <div className=\"ml-3\">\n        {triggersTableDivWithHeading(this.state.modelData, showAlert)}\n        <p />\n        {collapsibleFragment(\n          <div className=\"addNewTrigger\">\n            <AddDeleteTriggerForm\n              checkFunction={checkTrigger}\n              submitFunction={submitTrigger}\n              deleteFunction={deleteTrigger}\n              model={this.state.modelData}\n              showAlert={showAlert}\n            />\n          </div>,\n          `Add an important date`,\n        )}\n      </div>\n    );\n  }\n\n  private transactionsDiv() {\n    if (!getDisplay(transactionsView)) {\n      // log(`don't populate transactionsView`);\n      return;\n    }\n    // log(`do populate transactionsView`);\n\n    return (\n      <div className=\"ml-3\">\n        {transactionFilteredTable(\n          this.state.modelData,\n          showAlert,\n          custom,\n          'Custom transactions',\n        )}\n        {transactionFilteredTable(\n          this.state.modelData,\n          showAlert,\n          autogen,\n          'Auto-generated transactions',\n        )}\n        <p />\n        <div className=\"addNewTransaction\">\n          <h4> Add a transaction </h4>\n          <AddDeleteTransactionForm\n            checkFunction={checkTransaction}\n            submitFunction={submitTransaction}\n            deleteFunction={deleteTransaction}\n            submitTriggerFunction={submitTrigger}\n            model={this.state.modelData}\n            showAlert={showAlert}\n          />\n        </div>\n      </div>\n    );\n  }\n  private rhsTopButtonList(estateText: string) {\n    const buttons: JSX.Element[] = [];\n    buttons.push(\n      makeButton(\n        'Log out',\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n          event.persist();\n          this.props.logOutAction();\n        },\n        'Log out',\n        `btn-LogOut`,\n        'outline-secondary',\n      ),\n    );\n    if (estateText !== '') {\n      buttons.push(\n        makeButton(\n          estateText,\n          () => {\n            // do nothing\n          },\n          'estateText',\n          `btn-estateText`,\n          'outline-secondary',\n        ),\n      );\n    }\n    return buttons;\n  }\n\n  private rhsBottomButtonList() {\n    const buttons: JSX.Element[] = [];\n    buttons.push(this.makeUndoButton());\n    buttons.push(this.makeRedoButton());\n    buttons.push(this.makeSaveButton());\n    return buttons;\n  }\n\n  private viewButtonList() {\n    const buttons: JSX.Element[] = [];\n    const it = views.keys();\n    let viewIterator = it.next();\n    while (!viewIterator.done) {\n      const view = viewIterator.value;\n      if (view === homeView) {\n        // We use the image for Home\n        // don't need a button\n        viewIterator = it.next();\n        continue;\n      }\n      const viewValue = views.get(view);\n      if (viewValue === undefined) {\n        log(`Error : unrecognised view ${view}`);\n        viewIterator = it.next();\n        continue;\n      }\n      const display = viewValue.display;\n\n      buttons.push(\n        makeButton(\n          view.lc,\n          (event: React.MouseEvent<HTMLButtonElement>) => {\n            event.persist();\n            toggle(\n              view,\n              26, //sourceID\n            );\n          },\n          view.lc,\n          `btn-${view.lc}`,\n          display ? 'secondary' : 'outline-secondary',\n        ),\n      );\n      viewIterator = it.next();\n    }\n\n    return buttons;\n  }\n\n  private statusButtonList() {\n    let buttons: JSX.Element[] = [];\n    buttons = buttons.concat(this.makeHelpText(this.state.alertText));\n    return buttons;\n  }\n\n  private makeUndoButton() {\n    let numUndosAvailable = 0;\n    let undoModel = this.state.modelData.undoModel;\n    while (undoModel !== undefined && numUndosAvailable < 100) {\n      undoModel = undoModel.undoModel;\n      numUndosAvailable = numUndosAvailable + 1;\n    }\n    let buttonTitle = 'Undo';\n    if (numUndosAvailable > 0) {\n      buttonTitle = `Undo(${numUndosAvailable})`;\n    }\n    let undoTooltip = '';\n    if (this.state.modelData.undoModel !== undefined) {\n      const diffs = diffModels(\n        this.state.modelData,\n        this.state.modelData.undoModel,\n        true,\n        'current model',\n        'previous model',\n      );\n      if (diffs.length > 0) {\n        undoTooltip = diffs[0];\n      }\n    }\n\n    const b = makeButton(\n      buttonTitle,\n      async (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        if (await revertToUndoModel(this.state.modelData)) {\n          await saveModelLSM(userID, modelName, this.state.modelData);\n          refreshData(\n            true, // refreshModel = true,\n            true, // refreshChart = true,\n            19, //sourceID\n          );\n        }\n      },\n      `btn-undo-model`,\n      `btn-undo-model`,\n      this.state.modelData.undoModel !== undefined\n        ? 'secondary'\n        : 'outline-secondary',\n    );\n\n    if (undoTooltip === '') {\n      return b;\n    } else {\n      return (\n        <OverlayTrigger\n          key=\"undoOverlay\"\n          overlay={props => (\n            <Tooltip {...props} id=\"undoTooltip\">\n              {undoTooltip}\n            </Tooltip>\n          )}\n          placement=\"bottom\"\n        >\n          <div>{b}</div>\n        </OverlayTrigger>\n      );\n    }\n  }\n  private makeRedoButton() {\n    let numRedosAvailable = 0;\n    let redoModel = this.state.modelData.redoModel;\n    while (redoModel !== undefined && numRedosAvailable < 100) {\n      redoModel = redoModel.redoModel;\n      numRedosAvailable = numRedosAvailable + 1;\n    }\n    let buttonTitle = 'Redo';\n    if (numRedosAvailable > 0) {\n      buttonTitle = `Redo(${numRedosAvailable})`;\n    }\n    let redoTooltip = '';\n    if (this.state.modelData.redoModel !== undefined) {\n      const diffs = diffModels(\n        this.state.modelData.redoModel,\n        this.state.modelData,\n        true,\n        'redo model',\n        'current model',\n      );\n      if (diffs.length > 0) {\n        redoTooltip = diffs[0];\n      }\n    }\n\n    const b = makeButton(\n      buttonTitle,\n      async (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        if (await applyRedoToModel(this.state.modelData)) {\n          await saveModelLSM(userID, modelName, this.state.modelData);\n          refreshData(\n            true, // refreshModel = true,\n            true, // refreshChart = true,\n            20, //sourceID\n          );\n        }\n      },\n      `btn-redo-model`,\n      `btn-redo-model`,\n      this.state.modelData.redoModel !== undefined\n        ? 'secondary'\n        : 'outline-secondary',\n    );\n\n    if (redoTooltip === '') {\n      return b;\n    } else {\n      return (\n        <OverlayTrigger\n          key=\"redoOverlay\"\n          overlay={props => (\n            <Tooltip {...props} id=\"redoTooltip\">\n              {redoTooltip}\n            </Tooltip>\n          )}\n          placement=\"bottom\"\n        >\n          <div>{b}</div>\n        </OverlayTrigger>\n      );\n    }\n  }\n\n  private makeSaveButton() {\n    // log(`isDirty = ${isDirty}`);\n    return makeButton(\n      'Save model',\n      async (e: React.MouseEvent<HTMLButtonElement>) => {\n        e.persist();\n        await saveModelToDBLSM(userID, modelName, this.state.modelData);\n        refreshData(\n          true, // refreshModel = true,\n          true, // refreshChart = true,\n          21, //sourceID\n        );\n      },\n      `btn-save-model`,\n      `btn-save-model`,\n      isDirty ? 'secondary' : 'outline-secondary',\n    );\n  }\n\n  private makeHelpText(alertText: string): JSX.Element[] {\n    const result: JSX.Element[] = [];\n    let messageText = alertText;\n    if (messageText === '') {\n      messageText = `${modelName}`;\n      result.push(\n        <h4 className=\"text\" id=\"pageTitle\" key=\"pageTitle\">\n          {messageText}\n        </h4>,\n      );\n    } else {\n      result.push(\n        <AlertDismissibleExample\n          message={alertText}\n          dismissAction={() => {\n            // log(`setState for clear alert`);\n            this.setState({ alertText: '' });\n          }}\n        />,\n      );\n    }\n    return result;\n  }\n}\n\nexport async function attemptRename(\n  model: ModelData,\n  old: string,\n  replacement: string,\n): Promise<string> {\n  const message = attemptRenameLong(model, old, replacement);\n  // log(`message from attemptRenameLong is ${message}`);\n  if (message === '') {\n    // log(`message is empty, go to refreshData`);\n    await saveModelLSM(getUserID(), modelName, model);\n    refreshData(\n      true, // refreshModel = true,\n      true, // refreshChart = true,\n      22, //sourceID\n    );\n  } else {\n    showAlert(message);\n  }\n  return message;\n}\n\nexport function doCheckModelBeforeChange() {\n  return checkOverwrite();\n}\nexport function doCheckBeforeOverwritingExistingData() {\n  const result = checkOverwrite();\n  log(`check overwrite = ${result}`);\n  return result;\n}\n\nexport default App;\n","import { checkData, isNumberString } from './checks';\nimport {\n  annually,\n  CASH_ASSET_NAME,\n  cgt,\n  conditional,\n  cpi,\n  crystallizedPension,\n  incomeTax,\n  monthly,\n  nationalInsurance,\n  pension,\n  pensionSS,\n  revalue,\n  roiEnd,\n  separator,\n  growth,\n  pensionDB,\n  pensionTransfer,\n  quantity,\n  EvaluateAllAssets,\n  roiStart,\n  purchase,\n  dot,\n  baseForCPI,\n} from '../localization/stringConstants';\nimport {\n  DatedThing,\n  Asset,\n  ModelData,\n  Setting,\n  Transaction,\n  Trigger,\n  Evaluation,\n  Interval,\n  SettingVal,\n  AssetVal,\n  DebtVal,\n  IncomeVal,\n  ExpenseVal,\n  ReportDatum,\n  ReportValueChecker,\n  GrowthData,\n  Expense,\n  Income,\n} from '../types/interfaces';\nimport { getMonthlyGrowth, log, printDebug, showObj } from '../utils';\nimport { getDisplayName } from '../views/tablePages';\nimport {\n  getNumberAndWordParts,\n  getStartQuantity,\n  makeDateFromString,\n  getTriggerDate,\n  makeIncomeTaxTag,\n  makeNationalInsuranceTag,\n  makeCGTTag,\n  makeNetIncomeTag,\n  makeNetGainTag,\n  removeNumberPart,\n  checkTriggerDate,\n} from '../stringUtils';\nimport {\n  getSettings,\n  replaceCategoryWithAssetNames,\n  getTodaysDate,\n} from './modelUtils';\n\nfunction parseRecurrenceString(recurrence: string) {\n  const result = {\n    frequency: '', // monthly or annual\n    count: 0,\n  };\n  const l = recurrence.length;\n  const lastChar = recurrence.substring(l - 1, l);\n  // log(`lastChar of ${recurrence} is ${lastChar}`);\n  if (lastChar === 'm') {\n    result.frequency = monthly;\n  } else if (lastChar === 'y') {\n    result.frequency = annually;\n  } else {\n    log(`BUG!! frequency should be of form 4m or 6y not ${recurrence}`);\n  }\n  const firstPart = recurrence.substring(0, l - 1);\n  // log(`firstPart of ${recurrence} is ${firstPart}`);\n  const n = parseFloat(firstPart);\n  if (n === undefined || Number.isNaN(n)) {\n    log(`BUG!! frequency should be of form 4m or 6y not ${recurrence}`);\n  }\n  result.count = n;\n  return result;\n}\n\n// let numCalls = 0;\n\nexport function generateSequenceOfDates(\n  roi: Interval,\n  frequency: string /* e.g. 1m or 1y */,\n  addPreDate = false,\n): Date[] {\n  // numCalls = numCalls + 1;\n  // log(`numCalls = ${numCalls}`);\n\n  const result: Date[] = [];\n  const freq = parseRecurrenceString(frequency);\n  const mFreq = freq.frequency === monthly;\n  const yFreq = freq.frequency === annually;\n\n  if (addPreDate) {\n    // add a pre-dates before roi\n    const preDate = new Date(roi.start);\n    if (frequency === '1m') {\n      preDate.setMonth(preDate.getMonth() - 1);\n    } else if (frequency === '1y') {\n      preDate.setFullYear(preDate.getFullYear() - 1);\n    } else {\n      throw new Error(`BUG : frequency ${frequency} not implemented!`);\n    }\n    result.push(preDate);\n  }\n\n  // now add dates in roi, from start\n  let numstepsAdvanced = 0;\n  let thisDate = new Date(roi.start);\n  let initialCount;\n  if (mFreq) {\n    initialCount = thisDate.getMonth();\n  } else {\n    initialCount = thisDate.getFullYear();\n  }\n\n  while (thisDate < roi.end) {\n    result.push(thisDate);\n\n    // advance thisDate for the next transaction\n    const nextDate = new Date(roi.start);\n    numstepsAdvanced += freq.count;\n    if (mFreq) {\n      // log(`monthly dates for ${frequency}`);\n      nextDate.setMonth(initialCount + numstepsAdvanced);\n    } else if (yFreq) {\n      // log(`annual dates for ${frequency}`);\n      nextDate.setFullYear(initialCount + numstepsAdvanced);\n    } else {\n      throw new Error(`BUG : frequency ${frequency} not understood!`);\n    }\n    thisDate = nextDate;\n  }\n  // log(`return ${transactionMoments.length} transactionMoments`)\n  return result;\n}\n\nexport function generateTaxYearSequenceDates(roi: Interval): Date[] {\n  const result: Date[] = [];\n\n  let numYearsAdvanced = 0;\n  let thisDate = roi.start;\n  if (thisDate.getMonth() > 3 || thisDate.getDay() > 5) {\n    thisDate.setFullYear(thisDate.getFullYear() + numYearsAdvanced);\n  }\n  thisDate.setMonth(3);\n  thisDate.setDate(5);\n\n  const stopBefore = roi.end;\n  stopBefore.setFullYear(stopBefore.getFullYear() + 1);\n  while (thisDate < stopBefore) {\n    const newDate: Date = new Date(thisDate);\n    result.push(newDate);\n\n    // advance thisDate for the next transaction\n    numYearsAdvanced += 1;\n    const nextDate = new Date(roi.start);\n    nextDate.setFullYear(nextDate.getFullYear() + numYearsAdvanced);\n\n    thisDate = nextDate;\n  }\n  // log(`return ${transactionMoments.length} transactionMoments`)\n  return result;\n}\n\nexport const momentType = {\n  expense: 'Expense',\n  expensePrep: 'ExpensePrep',\n  expenseStart: 'ExpenseStart',\n  expenseStartPrep: 'ExpenseStartPrep',\n  income: 'Income',\n  incomePrep: 'IncomePrep',\n  incomeStart: 'IncomeStart',\n  incomeStartPrep: 'IncomeStartPrep',\n  asset: 'Asset',\n  assetStart: 'AssetStart',\n  transaction: 'Transaction',\n  inflation: 'Inflation',\n};\n\nexport function sortByDate(arrayOfDatedThings: DatedThing[]) {\n  if (printDebug()) {\n    log('before date sort --------------');\n    arrayOfDatedThings.forEach(t => {\n      log(`t.name = ${t.name}, ${t.type}, ${t.date}`);\n    });\n  }\n  arrayOfDatedThings.sort((a, b) => {\n    const ad = a.date; // getTriggerDate(a.date, triggers);\n    const bd = b.date; // getTriggerDate(b.date, triggers);\n    let result = 0;\n\n    // the primary sort mechanism is the date\n    // look for differences between defined / undefined\n    // or both defined and one before the other\n    if (ad !== undefined && bd === undefined) {\n      // log(`undefined b`);\n      result = -1;\n    } else if (ad === undefined && bd !== undefined) {\n      // log(`undefined a`);\n      result = 1;\n    } else if (ad !== undefined && bd !== undefined) {\n      if (ad < bd) {\n        // log(`a before b`);\n        result = 1;\n      } else if (ad > bd) {\n        // log(`b before a`);\n        result = -1;\n      }\n    }\n    if (result === 0) {\n      // dates are equal or both undefined\n      // so we need some other way of distinguishing\n      // special-case CASH status\n      const aIsCash = a.name === CASH_ASSET_NAME;\n      const bIsCash = b.name === CASH_ASSET_NAME;\n      if (bIsCash && !aIsCash) {\n        // log(`b cash`);\n        result = -1;\n      } else if (aIsCash && !bIsCash) {\n        // log(`a cash`);\n        result = 1;\n      }\n    }\n    if (result === 0) {\n      // dates equal, cash status matches\n      // if an asset has started, that's a special case\n      const aIsAssetStart = a.type === momentType.assetStart;\n      const bIsAssetStart = b.type === momentType.assetStart;\n      if (aIsAssetStart && !bIsAssetStart) {\n        // log(`a asset start`);\n        result = 1;\n      } else if (bIsAssetStart && !aIsAssetStart) {\n        // log(`b asset start`);\n        result = -1;\n      }\n    }\n    if (result === 0) {\n      // dates equal, cash status equal, asset-start equal\n      // pay attention to whether it's an asset\n      const aIsAsset = a.type === momentType.asset;\n      const bIsAsset = b.type === momentType.asset;\n      if (aIsAsset && !bIsAsset) {\n        // log(`a asset`);\n        result = 1;\n      } else if (bIsAsset && !aIsAsset) {\n        // log(`b asset`);\n        result = -1;\n      }\n    }\n    if (result === 0) {\n      const aIsCP = a.name.startsWith(crystallizedPension);\n      const bIsCP = b.name.startsWith(crystallizedPension);\n      if (aIsCP && !bIsCP) {\n        // log(`a cpension`);\n        return -1;\n      } else if (!aIsCP && bIsCP) {\n        // log(`b cpension`);\n        return 1;\n      }\n    }\n    if (result === 0) {\n      // dates equal, cash status equal, asset-start equal\n      // whether it's an asset is equal\n      if (\n        printDebug() &&\n        a.type !== 'Asset' &&\n        a.type !== 'Expense' &&\n        a.type !== 'Income'\n      ) {\n        log(`using names to order moments ${a.name}, ${a.type} and ${b.name}`);\n      }\n      if (a.name < b.name) {\n        // log(`a name`);\n        result = 1;\n      } else if (a.name > b.name) {\n        // log(`b name`);\n        result = -1;\n      } else if (a.type < b.type) {\n        // log(`a type`);\n        result = 1;\n      } else if (a.type > b.type) {\n        // log(`b type`);\n        result = -1;\n      } else {\n        result = 0;\n      }\n    }\n    if (result === 0) {\n      log(`can't order two moments named ${a.name}`);\n    }\n    // log(`${showObj(a)} < ${showObj(b)} = ${result}`)\n    return result;\n  });\n\n  if (printDebug()) {\n    log('after date sort --------------');\n    arrayOfDatedThings.forEach(t => {\n      log(`(name, type, date) = (${t.name}, ${t.type}, ${t.date})`);\n    });\n  }\n}\n\nexport const evaluationType = {\n  expense: 'Expense',\n  income: 'Income',\n  asset: 'Asset',\n  setting: 'Setting',\n  taxLiability: 'TaxLiability',\n};\n\nfunction getNumberValue(\n  values: ValuesContainer,\n  name: string,\n  expectValue = true,\n  printLogs = false,\n): number | undefined {\n  let result = values.get(name);\n  if (printLogs) {\n    log(`seek number value for key = '${name}', values has entry ${result}`);\n  }\n  if (typeof result === 'string') {\n    // log(`value ${result} is a string`);\n    if (isNumberString(result)) {\n      result = parseFloat(result);\n    } else {\n      const val = getNumberValue(values, result, expectValue);\n      // log(`value ${result} as a number is ${val}`);\n      result = val;\n    }\n  }\n  // log(`getNumberValue of ${key} is ${result}`);\n  if (result === undefined) {\n    if (expectValue) {\n      log(\n        `seeking number value for key = '${name}', values has entry ${result}`,\n      );\n      log(\n        `getNumberValue returning undefined for ${name}; ` +\n          `values has entry ${result} ` +\n          `consider switch to traceEvaluation ` +\n          `for values involving words and settings`,\n      );\n      return result;\n    }\n  }\n  if (printLogs) {\n    log(`number value for key = '${name}' is ${result}`);\n  }\n  return result;\n}\nfunction growthData(\n  name: string,\n  growths: Map<string, GrowthData>,\n  values: ValuesContainer,\n  checkAssertion: boolean = true,\n):{\n  adjustForCPI: boolean;\n  scale: number;\n}{\n  const g = growths.get(name);\n\n  if(!g){\n    return {\n      adjustForCPI: false,\n      scale: 0.0,\n    }    \n  }\n  let scale = 0.0;\n  const growth = traceEvaluation(\n    g.itemGrowth, \n    values, \n    growths, \n    '999', // source\n  );\n  if(!growth){\n\n  } else {\n    const cpiVal = traceEvaluation(\n      cpi, \n      values, \n      growths, \n      '999'\n    );\n    let adaptedGrowth = growth;\n    if(g.applyCPI && cpiVal !== undefined){\n      adaptedGrowth = cpiVal !== 0\n          ? ((1.0 + (growth + cpiVal) / 100) / (1.0 + cpiVal / 100) - 1.0) * 100\n          : growth;\n      // log(`from ${growth}, use cpi ${cpiVal} to create adaptedGrowth = ${getMonthlyGrowth(adaptedGrowth)}`);\n    }\n    const monthlyGrowth = getMonthlyGrowth(adaptedGrowth);\n    let periodicGrowth = monthlyGrowth;\n    if(g.powerByNumMonths !== 1){\n      periodicGrowth = (1 + monthlyGrowth) ** g.powerByNumMonths - 1;\n    }\n    // log(`growth power up by ${g.powerByNumMonths} from ${monthlyGrowth} to ${periodicGrowth}`);\n    scale = periodicGrowth;\n    if(g.powerByNumMonths === 1 && checkAssertion && g.scale !== periodicGrowth){\n      //log(`mismatched growths, ${periodicGrowth} not in ${showObj(g)}`);\n      //throw new Error();\n    }\n  }\n\n  if(g.powerByNumMonths === 1 && checkAssertion && g.scale !== scale){\n    //log(`mismatched growths, g.scale = ${g.scale} and scale = ${scale}`);\n    //throw new Error();\n  }\n\n  return {\n    adjustForCPI: g.applyCPI,\n    scale: scale,\n  };\n}\n\nfunction traceEvaluation(\n  value: number | string,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  source: string,\n): number | undefined {\n  if (printDebug()) {\n    log(\n      `in traceEvaluation, for ${source} get value of ${value} ` +\n        `using ${Array.from(values.keys()).map(k => {\n          return `[${k}, ${values.get(k)}]`;\n        })}`,\n    );\n  }\n  let result: number | undefined = 0.0;\n  if (typeof value !== 'string') {\n    result = value;\n  } else {\n    const debug = false;\n    if (isNumberString(value)) {\n      result = parseFloat(value);\n    } else {\n      const parts = getNumberAndWordParts(value);\n      let numberPart = 1.0;\n      if (parts.numberPart !== undefined) {\n        numberPart = parts.numberPart;\n      }\n      const wordPart = parts.wordPart;\n      let valueForWordPart = values.get(wordPart);\n      if (debug) {\n        log(`valueForWordPart ${wordPart} = ${valueForWordPart}`);\n      }\n      if (valueForWordPart === undefined) {\n        if (debug) {\n          log(`values were ${showObj(values)}`);\n        }\n        result = undefined;\n      } else if (typeof valueForWordPart === 'string') {\n        const nextLevel = traceEvaluation(\n          valueForWordPart,\n          values,\n          growths,\n          source,\n        );\n        if (nextLevel === undefined) {\n          if (debug) {\n            log(\n              `got undefined for ${valueForWordPart} - returning undefined for ${value}`,\n            );\n          }\n          result = undefined;\n        } else {\n          if (debug) {\n            log(\n              `calculate ${numberPart} * ${nextLevel} = ${numberPart *\n                nextLevel}`,\n            );\n          }\n          result = numberPart * nextLevel;\n        }\n      } else {\n        //log(`calculate ${numberPart} * ${settingForWordPart} = ${numberPart * settingForWordPart}`);\n        if (growthData(wordPart, growths, values).adjustForCPI) {\n          const b = values.get(baseForCPI);\n          if (b && typeof b === 'number') {\n            valueForWordPart *= b;\n          }\n        }\n        result = numberPart * valueForWordPart;\n      }\n    }\n  }\n  // log(`traceEvaluation result = ${result}`);\n  return result;\n}\n\nfunction getQuantity(\n  w: string,\n  values: ValuesContainer,\n  model: ModelData,\n): undefined | number {\n  if (getStartQuantity(w, model) === undefined) {\n    // log(`no start quantity for ${w}`);\n    return undefined;\n  }\n  // log(`go to get current quantity for ${w}`);\n  const result = getNumberValue(values, quantity + w, false);\n  // log(`current quantity for ${w} is ${result}`);\n  return result;\n}\n\nfunction applyQuantity(\n  value: number,\n  values: ValuesContainer,\n  assetName: string,\n  model: ModelData,\n) {\n  // log(`apply quantity for ${assetName}, unit val = ${value}`);\n  if (value === undefined) {\n    return value;\n  }\n  const q = getQuantity(assetName, values, model);\n  if (q === undefined) {\n    // log(`quantity for ${assetName} is undefined`);\n    return value;\n  }\n  //log(`quantity for ${assetName} is ${q},`\n  //  +` scale up from ${value} to ${value * q}`);\n  const result = value * q;\n  return result;\n}\n\nfunction setValue(\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  date: Date,\n  name: string,\n  newValue: number | string,\n  model: ModelData,\n  source: string, // something that triggered the new value\n  callerID: string,\n) {\n  if (name === newValue) {\n    log(`BUG??? don't expect value of ${name} = ${newValue}!`);\n  }\n  if (printDebug()) {\n    const existingValue = values.get(name);\n    if (existingValue === undefined) {\n      log(\n        `setting first value of ${name}, ` +\n          `newValue = ${newValue} ` +\n          `date = ${date.toDateString()}, ` +\n          `source = ${source}, from  ${callerID}`,\n      );\n    } else {\n      log(\n        `setting value of ${name}, ` +\n          `newValue = ${newValue} ` +\n          `oldValue = ${existingValue} ` +\n          `date = ${date.toDateString()}, ` +\n          `source = ${source}, from  ${callerID}`,\n      );\n    }\n  }\n  values.set(name, newValue, growths, date, source, callerID);\n  // log(`Go to find unit val for ${name}'s, we have value = some of ${newValue}`);\n  const numberVal = traceEvaluation(newValue, values, growths, name);\n  // log(`Unit val of ${name} is ${unitVal}`);\n  if (numberVal === undefined) {\n    // this is not necessarily an error - just means\n    // we're keeping track of something which cannot be\n    // evaluated.\n    // log(`evaluation of ${newValue} for ${name} undefined`);\n  } else {\n    let valForEvaluations = numberVal;\n    let baseVal: number | undefined;\n    if(growthData(name, growths, values).adjustForCPI){\n      baseVal = getNumberValue(values, baseForCPI);\n      if (baseVal) {\n        valForEvaluations *= baseVal;\n        // log(`scale by baseVal = ${baseVal} to give valForEvaluations = ${valForEvaluations}`);\n      } else {\n        log(`BUG : missing or zero base value!`);\n      }\n    }\n    const totalVal = applyQuantity(valForEvaluations, values, name, model);\n    const evaln = {\n      name,\n      date,\n      value: totalVal,\n      source,\n    };\n    // log(`add evaluation for ${name} at ${date}`);\n    //    log(`add evaluation ${showObj({\n    //      name: evaln.name,\n    //      date: evaln.date.toDateString(),\n    //      value: evaln.value,\n    //      source: evaln.source,\n    //    })}`);\n    evaluations.push(evaln);\n    if (printDebug()) {\n      log(`date = ${date}, name = ${name}, value = ${values.get(name)}`);\n    }\n    if (printDebug()) {\n      for (const key of values.keys()) {\n        /* eslint-disable-line no-restricted-syntax */\n        log(`values.get(${key}) = ${values.get(key)}`);\n      }\n    }\n  }\n}\n\nfunction diffMonths(d1: Date, d2: Date) {\n  let months;\n  months = (d2.getFullYear() - d1.getFullYear() - 1) * 12;\n  months += 12 - d1.getMonth();\n  months += d2.getMonth() - 1;\n  if (d1.getDate() <= d2.getDate()) {\n    months += 1;\n  }\n  return months;\n}\n\ninterface Moment {\n  date: Date;\n  name: string;\n  type: string;\n  setValue: number | string | undefined;\n  transaction: Transaction | undefined;\n}\n\nexport function getYearOfTaxYear(d: Date) {\n  let startYearOfTaxYear;\n  if (d.getMonth() > 3) {\n    startYearOfTaxYear = d.getFullYear();\n  } else if (d.getMonth() < 3) {\n    startYearOfTaxYear = d.getFullYear() - 1;\n  } else if (d.getDate() > 5) {\n    startYearOfTaxYear = d.getFullYear();\n  } else {\n    startYearOfTaxYear = d.getFullYear() - 1;\n  }\n  // log(`tax year of ${d.toDateString()} = ${startYearOfTaxYear}`);\n  // log(`details: d.getDate() = ${d.getDate()}, `+\n  //  `d.getMonth() = ${d.getMonth()}, `+\n  //  `d.getFullYear() = ${d.getFullYear()}, `);\n  return startYearOfTaxYear;\n}\n\nexport function getMonthOfTaxYear(d: Date) {\n  let monthOfTaxYear;\n  if (d.getDate() <= 5) {\n    monthOfTaxYear = d.getMonth();\n  } else {\n    monthOfTaxYear = d.getMonth() + 1;\n  }\n  // log(`tax month of ${d} = ${monthOfTaxYear}`);\n  // log(`details: d.getDate() = ${d.getDate()}, `+\n  //  `d.getMonth() = ${d.getMonth()}`);\n  return monthOfTaxYear;\n}\n\ninterface TaxBands {\n  noTaxBand: number;\n  lowTaxBand: number;\n  adjustNoTaxBand: number;\n  highTaxBand: number;\n  lowTaxRate: number;\n  highTaxRate: number;\n  topTaxRate: number;\n  noNIBand: number;\n  lowNIBand: number;\n  lowNIRate: number;\n  highNIRate: number;\n}\ninterface TaxBandsMap {\n  [key: string]: TaxBands | undefined;\n}\n\nconst TAX_MAP: TaxBandsMap = {\n  '2016': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2017': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2018': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2019': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2020': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2021': {\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.12,\n    highNIRate: 0.02,\n  },\n  '2022': {\n    // TODO get this derived from highestTaxYearInMap - they should be bound to be the same\n    noTaxBand: 12500,\n    lowTaxBand: 50000,\n    adjustNoTaxBand: 100000,\n    highTaxBand: 150000,\n    lowTaxRate: 0.2,\n    highTaxRate: 0.4,\n    topTaxRate: 0.45,\n    noNIBand: 8628,\n    lowNIBand: 50004,\n    lowNIRate: 0.1325,\n    highNIRate: 0.0325,\n  },\n};\nconst highestTaxYearInMap = 2022;\n\nfunction getTaxBands(\n  income: number,\n  startYearOfTaxYear: number,\n  values: ValuesContainer,\n): TaxBands {\n  let result: TaxBands;\n  if (startYearOfTaxYear > highestTaxYearInMap) {\n    const resultFromMap = TAX_MAP[`${highestTaxYearInMap}`];\n    if (!resultFromMap) {\n      throw new Error(`tax bands not defined for ${highestTaxYearInMap}!`);\n    }\n    result = resultFromMap;\n\n    const baseVal = getNumberValue(values, baseForCPI);\n    if (baseVal) {\n      // log(`scale by baseVal = ${baseVal}`);\n      const noTaxBand = getNumberValue(values, 'noTaxBand');\n      const lowTaxBand = getNumberValue(values, 'lowTaxBand');\n      const highTaxBand = getNumberValue(values, 'highTaxBand');\n      const adjustNoTaxBand = getNumberValue(values, 'adjustNoTaxBand');\n      const noNIBand = getNumberValue(values, 'noNIBand');\n      const lowNIBand = getNumberValue(values, 'lowNIBand');\n\n      if (\n        noTaxBand &&\n        lowTaxBand &&\n        highTaxBand &&\n        adjustNoTaxBand &&\n        noNIBand &&\n        lowNIBand\n      ) {\n        // log(`noTaxBand * baseVal at ${startYearOfTaxYear} = ${noTaxBand * baseVal}`);\n        // log(`from map at ${startYearOfTaxYear}, ${makeTwoDP(noTaxBand)}, ${makeTwoDP(lowTaxBand)}, ${makeTwoDP(highTaxBand)}, ${makeTwoDP(adjustNoTaxBand)}`);\n        // log(`scale last tax bands by * baseVal = ${baseVal}`);\n        result = {\n          noTaxBand: noTaxBand * baseVal,\n          lowTaxBand: lowTaxBand * baseVal,\n          highTaxBand: highTaxBand * baseVal,\n          adjustNoTaxBand: adjustNoTaxBand * baseVal,\n          lowTaxRate: result.lowTaxRate,\n          highTaxRate: result.highTaxRate,\n          topTaxRate: result.topTaxRate,\n          noNIBand: noNIBand * baseVal,\n          lowNIRate: result.lowNIRate,\n          lowNIBand: lowNIBand * baseVal,\n          highNIRate: result.highNIRate,\n        };\n        // log(`now vals at ${startYearOfTaxYear}, ${makeTwoDP(result.noTaxBand)}, ${makeTwoDP(result.lowTaxBand)}, ${makeTwoDP(result.highTaxBand)}, ${makeTwoDP(result.adjustNoTaxBand)}`);\n      } else {\n        log('BUG : missing tax bands in values');\n        throw new Error();\n      }\n    } else {\n      log('BUG : missing baseVal');\n      const resultFromMap = TAX_MAP[`${highestTaxYearInMap}`];\n      if (!resultFromMap) {\n        throw new Error(`tax bands not defined for ${highestTaxYearInMap}!`);\n      }\n      result = resultFromMap;\n    }\n  } else {\n    const resultFromMap = TAX_MAP[`${startYearOfTaxYear}`];\n    if (!resultFromMap) {\n      throw new Error(`tax bands not defined for ${startYearOfTaxYear}!`);\n    }\n    result = resultFromMap;\n  }\n  // log(`chk vals at ${startYearOfTaxYear}, ${makeTwoDP(result.noTaxBand)}, ${makeTwoDP(result.lowTaxBand)}, ${makeTwoDP(result.highTaxBand)}, ${makeTwoDP(result.adjustNoTaxBand)}`);\n  result = {\n    noTaxBand: result.noTaxBand,\n    lowTaxBand: result.lowTaxBand,\n    lowTaxRate: result.lowTaxRate,\n    adjustNoTaxBand: result.adjustNoTaxBand,\n    highTaxBand: result.highTaxBand,\n    highTaxRate: result.highTaxRate,\n    topTaxRate: result.topTaxRate,\n\n    noNIBand: result.noNIBand,\n    lowNIBand: result.lowNIBand,\n    lowNIRate: result.lowNIRate,\n    highNIRate: result.highNIRate,\n  };\n  const topEndIncome = income - result.adjustNoTaxBand;\n  if (topEndIncome > 0) {\n    result.noTaxBand = Math.max(0.0, result.noTaxBand - topEndIncome / 2.0);\n    // log(`for startYearOfTaxYear = ${startYearOfTaxYear}, income high so no-tax band is ${result.noTaxBand}!`);\n  }\n  // log(`bands at ${startYearOfTaxYear}, ${makeTwoDP(result.noTaxBand)}, ${makeTwoDP(result.lowTaxBand)}, ${makeTwoDP(result.highTaxBand)}, ${makeTwoDP(result.adjustNoTaxBand)}`);\n  return result;\n}\n\nfunction calculateIncomeTaxPayable(\n  income: number,\n  startYearOfTaxYear: number,\n  values: ValuesContainer,\n) {\n  // log(`in calculateTaxPayable`);\n  const bands = getTaxBands(income, startYearOfTaxYear, values);\n  // log(`tax bands are ${showObj(bands)}`);\n\n  const sizeOfLowTaxBand = bands.lowTaxBand - bands.noTaxBand;\n  const sizeOfHighTaxBand = bands.highTaxBand - bands.lowTaxBand;\n\n  const lowTaxRate = bands.lowTaxRate;\n  const highTaxRate = bands.highTaxRate;\n  const topTaxRate = bands.topTaxRate;\n\n  let incomeInNoTaxBand = 0;\n  let incomeInLowTaxBand = 0;\n  let incomeInHighTaxBand = 0;\n  let incomeInTopTaxBand = 0;\n\n  incomeInNoTaxBand = income;\n  // test next band\n  incomeInLowTaxBand = incomeInNoTaxBand - bands.noTaxBand;\n  // see if we have strayed into next band\n  if (incomeInLowTaxBand > 0) {\n    // we have some income in low tax band\n    // cap income in no tax band\n    incomeInNoTaxBand = bands.noTaxBand;\n    // test next band\n    incomeInHighTaxBand = incomeInLowTaxBand - sizeOfLowTaxBand;\n    // see if we have strayed into next band\n    if (incomeInHighTaxBand > 0) {\n      // we have some income in high tax band\n      // cap income in low tax band\n      incomeInLowTaxBand = sizeOfLowTaxBand;\n      incomeInTopTaxBand = incomeInHighTaxBand - sizeOfHighTaxBand;\n      // see if we have strayed into next band\n      if (incomeInTopTaxBand > 0) {\n        // we have some income in top tax band\n        // cap income in high tax band\n        incomeInHighTaxBand = sizeOfHighTaxBand;\n      } else {\n        // income falls into no, low and high tax bands\n        incomeInTopTaxBand = 0;\n      }\n    } else {\n      // income falls into no and low tax bands\n      incomeInHighTaxBand = 0;\n    }\n  } else {\n    // income falls into no tax band\n    incomeInLowTaxBand = 0;\n  }\n  const taxPayable = [\n    {\n      amountLiable: incomeInTopTaxBand,\n      rate: topTaxRate,\n    },\n    {\n      amountLiable: incomeInHighTaxBand,\n      rate: highTaxRate,\n    },\n    {\n      amountLiable: incomeInLowTaxBand,\n      rate: lowTaxRate,\n    },\n  ];\n\n  // log(`taxPayable from income ${income} is ${showObj(taxPayable)}`);\n  return taxPayable;\n}\n\nfunction calculateNIPayable(\n  income: number,\n  startYearOfTaxYear: number,\n  values: ValuesContainer,\n): { amountLiable: number; rate: number }[] {\n  // log(`in calculateNIPayable`);\n  const bands = getTaxBands(income, startYearOfTaxYear, values);\n\n  const noNIBand = bands.noNIBand;\n  const lowNIBand = bands.lowNIBand;\n  const lowNIRate = bands.lowNIRate;\n  const highNIRate = bands.highNIRate;\n\n  const sizeOfLowNIBand = lowNIBand - noNIBand;\n\n  let incomeInNoNIBand = 0;\n  let incomeInLowNIBand = 0;\n  let incomeInHighNIBand = 0;\n\n  incomeInNoNIBand = income;\n  // test next band\n  incomeInLowNIBand = incomeInNoNIBand - noNIBand;\n  // see if we have strayed into next band\n  if (incomeInLowNIBand > 0) {\n    // we have some income in low NI band\n    // cap income in no NI band\n    incomeInNoNIBand = noNIBand;\n    // test next band\n    incomeInHighNIBand = incomeInLowNIBand - sizeOfLowNIBand;\n    // see if we have strayed into next band\n    if (incomeInHighNIBand > 0) {\n      // we have some income in high tax band\n      // cap income in low tax band\n      incomeInLowNIBand = sizeOfLowNIBand;\n    } else {\n      // income falls into no and low tax bands\n      incomeInHighNIBand = 0;\n    }\n  } else {\n    // income falls into no tax band\n    incomeInLowNIBand = 0;\n  }\n  // log(`${income} = ${incomeInNoNIBand} @ 0% + `\n  //    + `${incomeInLowNIBand} @ ${lowNIRate} + ${incomeInHighNIBand} @ ${highNIRate} `\n  //    + `= ${incomeInLowNIBand * lowNIRate + incomeInHighNIBand * highNIRate}`);\n\n  const niPayable = [\n    {\n      amountLiable: incomeInHighNIBand,\n      rate: highNIRate,\n    },\n    {\n      amountLiable: incomeInLowNIBand,\n      rate: lowNIRate,\n    },\n  ];\n\n  // log(`niPayable from income ${income} is ${showObj(niPayable)}`);\n  return niPayable;\n}\n\n//const startYearOfTaxYearCGTBandsSet = 2018;\nconst noCGTBandSet = 12000;\n\nfunction calculateCGTPayable(\n  gain: number,\n  startYearOfTaxYear: number,\n  values: ValuesContainer,\n) {\n  if (printDebug()) {\n    log(`startYearOfTaxYear = ${startYearOfTaxYear}`);\n    log(`values = ${values}`);\n  }\n  // log(`in calculateCGTPayable, gain = ${gain}`);//////////////////////// TODO\n  /*\n  const noCGTBand = updateTaxBandValueForCPI(\n    startYearOfTaxYearCGTBandsSet, \n    startYearOfTaxYear, \n    noCGTBandSet, \n    cpiVal,\n  );\n  */\n  const noCGTBand = noCGTBandSet;\n\n  const CGTRate = 0.2;\n  // TODO - this should depend on whether payer is high income tax payer\n\n  if (gain < noCGTBand) {\n    // log(`CGT not payable on ${gain}`);\n    return 0.0;\n  }\n\n  const payable = CGTRate * (gain - noCGTBand);\n  // log(`${payable} due as CGT`);\n  return payable;\n}\n\nfunction adjustCash(\n  amount: number,\n  d: Date,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  source: string, // what led to the change\n) {\n  // log(`adjustCash by amount = ${amount} at ${d.toDateString()}`);\n  let cashValue = getNumberValue(values, CASH_ASSET_NAME, false);\n  // log(`current stored value = ${cashValue}`);\n  if (cashValue === undefined) {\n    // log('don't adjust undefined cash asset');\n    // NB some tests have an expense and watch its value\n    // without having a cash asset to decrement\n  } else {\n    let scaleBy: number | undefined;\n    if (cashValue !== undefined && growthData(CASH_ASSET_NAME, growths, values).adjustForCPI) {\n      const b = values.get(baseForCPI);\n      // log(`base for CPI is ${b}`);\n      if (b && typeof b === 'number') {\n        scaleBy = b;\n        // log(`for CPI, scaleBy = ${scaleBy}`);\n        cashValue = cashValue * scaleBy;\n      }\n    }\n    let newValue = cashValue + amount;\n    // log(`in adjustCash, setValue to ${newValue}`);\n    if (scaleBy) {\n      newValue /= scaleBy;\n    }\n    setValue(\n      values,\n      growths,\n      evaluations,\n      d,\n      CASH_ASSET_NAME,\n      newValue,\n      model,\n      source,\n      '1', //callerID\n    );\n  }\n}\n\nfunction sumTaxDue(\n  taxDueList: { amountLiable: number; rate: number }[],\n): number {\n  let total = 0.0;\n  taxDueList.forEach(tx => {\n    total = total + tx.amountLiable * tx.rate;\n    // log(`total is now ${total}`);\n  });\n  // log(`total tax due is ${total}`);\n  return total;\n}\n\nfunction updatePurchaseValue(\n  a: Asset,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  newOverOldRatio: number,\n  evaluations: Evaluation[],\n  startOfTaxYear: Date,\n  model: ModelData,\n  source: string, // e.g. IncomeTaxJoe\n) {\n  // log(`paid ${numSharesForTax} RSUs for income tax`);\n  const currentPurchaseValue = values.get(`${purchase}${a.NAME}`);\n  if (currentPurchaseValue !== undefined) {\n    let numberPart = 0.0;\n    let wordPart: string | undefined = undefined;\n    if (typeof currentPurchaseValue === 'string') {\n      const parsed = getNumberAndWordParts(currentPurchaseValue);\n      if (parsed.numberPart === undefined) {\n        throw new Error(`don't understand purchase price for RSUs?`);\n      }\n      numberPart = parsed.numberPart;\n      wordPart = parsed.wordPart;\n    } else {\n      numberPart = currentPurchaseValue;\n    }\n    let purchaseValue = numberPart;\n    if (purchaseValue !== 0.0) {\n      // log(`before paying income tax, purchaseValue = ${purchaseValue}`);\n      purchaseValue = purchaseValue * newOverOldRatio;\n      // log(`after paying income tax, purchaseValue = ${purchaseValue}`);\n      if (wordPart === undefined) {\n        setValue(\n          values,\n          growths,\n          evaluations,\n          startOfTaxYear,\n          `${purchase}${a.NAME}`,\n          purchaseValue,\n          model,\n          source,\n          '31', //callerID\n        );\n      } else {\n        setValue(\n          values,\n          growths,\n          evaluations,\n          startOfTaxYear,\n          `${purchase}${a.NAME}`,\n          `${purchaseValue}${wordPart}`,\n          model,\n          source,\n          '32', //callerID\n        );\n      }\n    }\n  }\n}\n\nfunction payIncomeTax(\n  startOfTaxYear: Date, // should be April 5th of some year\n  income: number,\n  alreadyPaid: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  source: string, // e.g. IncomeTaxJoe\n) {\n  // log(`pay income tax on ${income} for date ${startOfTaxYear}`);\n  // calculate tax liability\n  const taxDue: {\n    amountLiable: number;\n    rate: number;\n  }[] = calculateIncomeTaxPayable(income, startOfTaxYear.getFullYear(), values);\n  // log(`taxDue for ${source} on ${startOfTaxYear} = ${taxDue}`);\n  const totalTaxDue = sumTaxDue(taxDue);\n\n  const totalTaxDueFromCash = totalTaxDue - alreadyPaid;\n  // log(`totalTaxDueFromCash for ${makeTwoDP(income)} on ${startOfTaxYear.getFullYear()} is ${makeTwoDP(totalTaxDueFromCash)}, already paid ${makeTwoDP(alreadyPaid)}`);\n  if (totalTaxDue !== 0) {\n    // log(`in payIncomeTax for ${startOfTaxYear.toDateString()}, adjustCash by ${totalTaxDueFromCash}`);\n    adjustCash(\n      -totalTaxDueFromCash,\n      startOfTaxYear,\n      values,\n      growths,\n      evaluations,\n      model,\n      source,\n    );\n  }\n\n  if (totalTaxDue > 0) {\n    // log(`setValue with totalTaxDue = ${totalTaxDue}`);\n    const person = source.substring(0, source.length - incomeTax.length);\n    setValue(\n      values,\n      growths,\n      evaluations,\n      startOfTaxYear,\n      incomeTax,\n      totalTaxDue,\n      model,\n      makeIncomeTaxTag(person),\n      '23', //callerID\n    );\n  }\n  return totalTaxDue;\n}\n\nfunction sumNI(niDue: { amountLiable: number; rate: number }[]): number {\n  let sum = 0;\n  niDue.forEach(nd => {\n    sum = sum + nd.amountLiable * nd.rate;\n  });\n  return sum;\n}\n\nfunction logAnnualNIPayments(\n  startOfTaxYear: Date,\n  nIMonthlyPaymentsPaid: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  source: string, // e.g. NIJoe\n) {\n  if (nIMonthlyPaymentsPaid > 0) {\n    const person = source.substring(\n      0,\n      source.length - nationalInsurance.length,\n    );\n    setValue(\n      values,\n      growths,\n      evaluations,\n      startOfTaxYear,\n      nationalInsurance,\n      nIMonthlyPaymentsPaid,\n      model,\n      makeNationalInsuranceTag(person),\n      '33', //callerID\n    );\n  }\n}\n\nfunction payCGT(\n  startOfTaxYear: Date, // should be April 5th of some year\n  gain: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  source: string, // e.g. 'CGTJoe'\n) {\n  // log(`pay CGT on ${gain} for date ${startOfTaxYear}`);\n  // calculate CGT liability\n  // TODO should pass in whether high rate income tax next\n  const CGTDue = calculateCGTPayable(\n    gain,\n    startOfTaxYear.getFullYear(),\n    values,\n  );\n  // log(`taxDue = ${taxDue}`);\n  if (CGTDue > 0) {\n    // log('in payCGT, adjustCash:');\n    adjustCash(\n      -CGTDue,\n      startOfTaxYear,\n      values,\n      growths,\n      evaluations,\n      model,\n      source,\n    );\n    const person = source.substring(0, source.length - cgt.length);\n    setValue(\n      values,\n      growths,\n      evaluations,\n      startOfTaxYear,\n      cgt,\n      CGTDue,\n      model,\n      makeCGTTag(person),\n      '26', //callerID\n    );\n  }\n  return CGTDue;\n}\nfunction OptimizeIncomeTax(\n  date: Date,\n  liableIncome: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  person: string,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // log(`OptimizeIncomeTax income tax for ${person} and ${liableIncome} on ${date.toDateString()}`);\n  const startYearOfTaxYear = date.getFullYear();\n  const bands = getTaxBands(liableIncome, startYearOfTaxYear, values);\n  if (liableIncome > bands.noTaxBand) {\n    return;\n  }\n  let unusedAllowance = bands.noTaxBand - liableIncome;\n  // log(`unusedAllowance = ${unusedAllowance}`);\n  // if we have unused allowance, see\n  // have we got some crystallised pension we can use?\n  for (const valueKey of values.keys()) {\n    /* eslint-disable-line no-restricted-syntax */\n    if (valueKey.startsWith(crystallizedPension)) {\n      // is it for the right person?\n      const removedCP = `${valueKey.substr(crystallizedPension.length)}`;\n      const wds = removedCP.split(dot);\n      if (wds.length !== 2) {\n        log(`unexpected formatting of ${valueKey}`);\n        throw new Error('unexpected formatting of cp name');\n      }\n      const liability = `${wds[0]}${incomeTax}`;\n      // e.g. IncomeTaxJoe\n      // log(`liability = ${liability}`);\n      if (liability === person) {\n        // log(`valueKey = ${valueKey}`);\n\n        let amountToTransfer = unusedAllowance;\n        const pensionVal = getNumberValue(values, valueKey);\n        if (pensionVal === undefined) {\n          log('BUG!!! pension has no value');\n          return;\n        }\n        if (amountToTransfer > pensionVal) {\n          amountToTransfer = pensionVal;\n        }\n        // log(`to use allowance, on ${date}, '\n        //  +'move ${amountToTransfer} from ${valueKey}`);\n        const personAmountMap = liableIncomeInTaxYear.get(incomeTax);\n        if (personAmountMap === undefined) {\n          log('BUG!!! person has no liability');\n          return;\n        }\n        const cashVal = getNumberValue(values, CASH_ASSET_NAME);\n        if (cashVal === undefined) {\n          log('BUG!!! cash has no value');\n        } else {\n          personAmountMap.set(person, liableIncome + amountToTransfer);\n\n          liableIncome = liableIncome + amountToTransfer;\n          unusedAllowance = unusedAllowance - amountToTransfer;\n          setValue(\n            values,\n            growths,\n            evaluations,\n            date,\n            CASH_ASSET_NAME,\n            cashVal + amountToTransfer,\n            model,\n            valueKey,\n            '5', //callerID\n          ); // e.g. 'CrystallizedPensionNorwich'\n          setValue(\n            values,\n            growths,\n            evaluations,\n            date,\n            valueKey,\n            pensionVal - amountToTransfer,\n            model,\n            liability,\n            '6', //callerID\n          ); // e.g. 'IncomeTaxJoe'\n        }\n      }\n    }\n  }\n}\n\nconst doOptimizeForIncomeTax = true;\n\nfunction settleUpTax(\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n  taxMonthlyPaymentsPaid: Map<string, Map<string, number>>,\n  startYearOfTaxYear: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // log('in settleUpTax');\n  const date = new Date(startYearOfTaxYear + 1, 3, 5);\n  // before going to pay income tax,\n  // see if there's a wise move to use up unused income tax allowance\n  // for each person\n  for (const [key, value] of liableIncomeInTaxYear) {\n    /* eslint-disable-line no-restricted-syntax */\n    if (key === incomeTax && value !== undefined) {\n      for (const [person, liableIncome] of value) {\n        /* eslint-disable-line no-restricted-syntax */\n        if (doOptimizeForIncomeTax) {\n          OptimizeIncomeTax(\n            date,\n            liableIncome,\n            values,\n            growths,\n            person,\n            liableIncomeInTaxYear,\n            evaluations,\n            model,\n          );\n        }\n      }\n    }\n  }\n\n  const personNetIncome = new Map<string, number>();\n  const personNetGain = new Map<string, number>();\n  // log(`iterate over liable income key, value`);\n  for (const [key, value] of liableIncomeInTaxYear) {\n    // log(`liable income key = ${key}, value = ${value}`);\n    let recalculatedNetIncome = false;\n    let recalculatedNetGain = false;\n    /* eslint-disable-line no-restricted-syntax */\n    if (key === incomeTax && value !== undefined) {\n      let liableIncomeTaxInTaxMonth = liableIncomeInTaxMonth.get(incomeTax);\n      if (liableIncomeTaxInTaxMonth === undefined) {\n        liableIncomeTaxInTaxMonth = new Map<string, number>();\n        liableIncomeInTaxMonth.set(incomeTax, liableIncomeTaxInTaxMonth);\n      }\n      let incomeTaxMonthlyPaymentsPaid = taxMonthlyPaymentsPaid.get(incomeTax);\n      if (incomeTaxMonthlyPaymentsPaid === undefined) {\n        incomeTaxMonthlyPaymentsPaid = new Map<string, number>();\n        taxMonthlyPaymentsPaid.set(incomeTax, incomeTaxMonthlyPaymentsPaid);\n      }\n      for (const [person, amount] of value) {\n        let alreadyPaid = incomeTaxMonthlyPaymentsPaid.get(person);\n        if (alreadyPaid === undefined) {\n          alreadyPaid = 0;\n        }\n        /* eslint-disable-line no-restricted-syntax */\n        // log(`go to pay income tax for ${person}, amount = ${amount} for ${date}`);\n        const taxPaid = payIncomeTax(\n          date,\n          amount,\n          alreadyPaid,\n          values,\n          growths,\n          evaluations,\n          model,\n          person, // e.g. IncomeTaxJoe\n        );\n        const personsName = person.substring(\n          0,\n          person.length - incomeTax.length,\n        );\n        // log(`paid some income tax for ${personsName}`);\n        const knownNetIncome = personNetIncome.get(personsName);\n        if (knownNetIncome === undefined) {\n          // log(`for ${personsName}, set first net income ${amount} - ${taxPaid}`);\n          personNetIncome.set(personsName, amount - taxPaid);\n        } else {\n          // log(`for ${personsName}, reduce existing net income for ${personsName}`);\n          personNetIncome.set(personsName, knownNetIncome - taxPaid);\n        }\n        if (printDebug()) {\n          log(`${person} paid income tax ${taxPaid} for ${date}`);\n        }\n        // log('resetting liableIncomeInTaxYear');\n        value.set(person, 0);\n        liableIncomeTaxInTaxMonth.set(person, 0);\n        incomeTaxMonthlyPaymentsPaid.set(person, 0);\n        recalculatedNetIncome = true;\n      }\n    } else if (key === nationalInsurance && value !== undefined) {\n      let liableIncomeNIInTaxMonth = liableIncomeInTaxMonth.get(\n        nationalInsurance,\n      );\n      if (liableIncomeNIInTaxMonth === undefined) {\n        liableIncomeNIInTaxMonth = new Map<string, number>();\n        liableIncomeInTaxMonth.set(nationalInsurance, liableIncomeNIInTaxMonth);\n      }\n      let nIMonthlyPaymentsPaid = taxMonthlyPaymentsPaid.get(nationalInsurance);\n      if (nIMonthlyPaymentsPaid === undefined) {\n        nIMonthlyPaymentsPaid = new Map<string, number>();\n        taxMonthlyPaymentsPaid.set(nationalInsurance, nIMonthlyPaymentsPaid);\n      }\n      for (const [person, amount] of value) {\n        let liableInTaxMonth = liableIncomeNIInTaxMonth.get(person);\n        if (liableInTaxMonth === undefined) {\n          liableInTaxMonth = 0;\n        }\n        let alreadyPaid = nIMonthlyPaymentsPaid.get(person);\n        if (alreadyPaid === undefined) {\n          alreadyPaid = 0;\n        }\n        /* eslint-disable-line no-restricted-syntax */\n        const NIPaid = logAnnualNIPayments(\n          date,\n          alreadyPaid,\n          values,\n          growths,\n          evaluations,\n          model,\n          person,\n        ); // e.g. 'NIJoe'\n        if (printDebug()) {\n          log(`${person} paid NI ${NIPaid} for ${date}`);\n        }\n        const personsName = person.substring(\n          0,\n          person.length - nationalInsurance.length,\n        );\n        // log(`paid some NI for ${personsName}`);\n        const knownNetIncome = personNetIncome.get(personsName);\n        if (knownNetIncome === undefined) {\n          // log(`for ni, set first net income for ${personsName}`);\n          personNetIncome.set(personsName, amount - alreadyPaid);\n        } else {\n          // log(`for ni, reduce existing net income for ${personsName}`);\n          personNetIncome.set(personsName, knownNetIncome - alreadyPaid);\n        }\n        // log('resetting liableIncomeInTaxYear');\n        value.set(person, 0);\n        nIMonthlyPaymentsPaid.set(person, 0);\n      }\n      recalculatedNetIncome = true;\n    } else if (key === 'cgt' && value !== undefined) {\n      for (const [person, amount] of value) {\n        /* eslint-disable-line no-restricted-syntax */\n        const cgtPaid = payCGT(\n          date,\n          amount,\n          values,\n          growths,\n          evaluations,\n          model,\n          person,\n        ); // e.g. 'CGTJoe'\n        // log('resetting liableIncomeInTaxYear');\n        const personsName = person.substring(0, person.length - cgt.length);\n        const knownNetGain = personNetGain.get(personsName);\n        if (knownNetGain === undefined) {\n          personNetGain.set(personsName, amount - cgtPaid);\n        } else {\n          personNetGain.set(personsName, knownNetGain - cgtPaid);\n        }\n        value.set(person, 0);\n        recalculatedNetGain = true;\n      }\n    } else {\n      log(`unhandled key from liableIncomeInTaxYear = ${key} `);\n    }\n    if (recalculatedNetIncome) {\n      for (const [person, amount] of personNetIncome) {\n        if (amount > 0) {\n          const netIncTag = makeNetIncomeTag(person);\n          setValue(\n            values,\n            growths,\n            evaluations,\n            date,\n            netIncTag,\n            amount,\n            model,\n            netIncTag,\n            '27', //callerID\n          );\n        }\n      }\n    }\n    if (recalculatedNetGain) {\n      for (const [person, amount] of personNetGain) {\n        if (amount > 0) {\n          // log(`setValue ${'netgain'+person} amount ${amount}`)\n          setValue(\n            values,\n            growths,\n            evaluations,\n            date,\n            makeNetGainTag(person),\n            amount,\n            model,\n            makeNetGainTag(person),\n            '28', //callerID\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction getTaxMonthDate(startYearOfTaxYear: number, monthOfTaxYear: number) {\n  let result: Date;\n  if (monthOfTaxYear <= 3) {\n    // start of tax year = 2020, month = January\n    // gives January 2021\n    result = new Date(startYearOfTaxYear + 1, monthOfTaxYear, 5);\n  } else {\n    // start of tax year = 2020, month = May\n    // gives May 2020\n    result = new Date(startYearOfTaxYear, monthOfTaxYear, 5);\n  }\n  // log(`month ${monthOfTaxYear} and year ${startYearOfTaxYear} make date ${result.toDateString()}`);\n  return result;\n}\n\nfunction payTaxEstimate(\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n  taxMonthlyPaymentsPaid: Map<string, Map<string, number>>,\n  startYearOfTaxYear: number,\n  monthOfTaxYear: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // income tax\n  // log(`payTaxEstimate for month ${monthOfTaxYear} and startYearOfTaxYear ${startYearOfTaxYear}`);\n  let liableIncomeTaxInTaxMonth = liableIncomeInTaxMonth.get(incomeTax);\n  if (liableIncomeTaxInTaxMonth === undefined) {\n    liableIncomeTaxInTaxMonth = new Map<string, number>();\n    liableIncomeInTaxMonth.set(incomeTax, liableIncomeTaxInTaxMonth);\n  }\n  let incomeTaxMonthlyPaymentsPaid = taxMonthlyPaymentsPaid.get(incomeTax);\n  if (incomeTaxMonthlyPaymentsPaid === undefined) {\n    incomeTaxMonthlyPaymentsPaid = new Map<string, number>();\n    taxMonthlyPaymentsPaid.set(incomeTax, incomeTaxMonthlyPaymentsPaid);\n  }\n\n  for (const [person, liableIncome] of liableIncomeTaxInTaxMonth) {\n    // log(`pay income tax estimate for ${person} for ${liableIncome} for month ${monthOfTaxYear}, year ${startYearOfTaxYear}`);\n    if (monthOfTaxYear !== 3 && liableIncome > 0) {\n      // don't make monthly estimate in April\n      const annualIncomeEstimate = liableIncome * 12;\n      const estimateAnnualTaxDue: {\n        amountLiable: number;\n        rate: number;\n      }[] = calculateIncomeTaxPayable(\n        annualIncomeEstimate,\n        startYearOfTaxYear,\n        values,\n      );\n      const annualEstimate = sumTaxDue(estimateAnnualTaxDue);\n      // log(`es payIncomeTax for ${startYearOfTaxYear}, annual estimate is ${annualEstimate}`);\n      const estimateMonthTaxDue =\n        Math.floor((annualEstimate / 12) * 100 + 0.00001) / 100;\n\n      // log(`es payIncomeTax for ${startYearOfTaxYear}, monthly estimate is ${estimateMonthTaxDue}`);\n      if (estimateMonthTaxDue > 0) {\n        // log(`adjust cash for tax estimate ${estimateMonthTaxDue}`);\n        adjustCash(\n          -estimateMonthTaxDue,\n          getTaxMonthDate(startYearOfTaxYear, monthOfTaxYear),\n          values,\n          growths,\n          evaluations,\n          model,\n          person,\n        );\n        let estimatesPaid = incomeTaxMonthlyPaymentsPaid.get(person);\n        if (estimatesPaid === undefined) {\n          estimatesPaid = 0;\n        }\n        estimatesPaid += estimateMonthTaxDue;\n        incomeTaxMonthlyPaymentsPaid.set(person, estimatesPaid);\n      }\n    }\n    liableIncomeTaxInTaxMonth.set(person, 0);\n  }\n}\nfunction payNIEstimate(\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n  taxMonthlyPaymentsPaid: Map<string, Map<string, number>>,\n  startYearOfTaxYear: number,\n  monthOfTaxYear: number,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // log(`pay NI estimate for month ${monthOfTaxYear} and startYearOfTaxYear ${startYearOfTaxYear} `)\n  // NI\n  let liableNIInTaxMonth = liableIncomeInTaxMonth.get(nationalInsurance);\n  if (liableNIInTaxMonth === undefined) {\n    liableNIInTaxMonth = new Map<string, number>();\n    liableIncomeInTaxMonth.set(nationalInsurance, liableNIInTaxMonth);\n  }\n  let nIMonthlyPaymentsPaid = taxMonthlyPaymentsPaid.get(nationalInsurance);\n  if (nIMonthlyPaymentsPaid === undefined) {\n    nIMonthlyPaymentsPaid = new Map<string, number>();\n    taxMonthlyPaymentsPaid.set(nationalInsurance, nIMonthlyPaymentsPaid);\n  }\n\n  for (const [person, liableIncome] of liableNIInTaxMonth) {\n    // log(`pay NI for ${person} for ${liableIncome} for month ${monthOfTaxYear} and year ${startYearOfTaxYear}`);\n    if (liableIncome > 0) {\n      const annualIncomeEstimate = liableIncome * 12;\n      const estimateAnnualTaxDue: {\n        amountLiable: number;\n        rate: number;\n      }[] = calculateNIPayable(\n        annualIncomeEstimate,\n        startYearOfTaxYear,\n        values,\n      );\n      const niDueForYear = sumNI(estimateAnnualTaxDue);\n      // log(`niDueForYear = ${niDueForYear}`);\n      const nIMonthTaxDue =\n        Math.floor((niDueForYear / 12) * 100 + 0.00001) / 100;\n      // log(`nIMonthTaxDue = ${nIMonthTaxDue}`);\n\n      if (nIMonthTaxDue > 0) {\n        // log(`adjust cash for NI payment ${nIMonthTaxDue}`);\n        adjustCash(\n          -nIMonthTaxDue,\n          getTaxMonthDate(startYearOfTaxYear, monthOfTaxYear),\n          values,\n          growths,\n          evaluations,\n          model,\n          person,\n        );\n        let niPaid = nIMonthlyPaymentsPaid.get(person);\n        if (niPaid === undefined) {\n          niPaid = 0;\n        }\n        niPaid += nIMonthTaxDue;\n        // log(`update monthly payments sum to ${niPaid}`);\n        nIMonthlyPaymentsPaid.set(person, niPaid);\n      }\n    }\n    // log(`reset liableNIInTaxMonth to zero`);\n    liableNIInTaxMonth.set(person, 0);\n  }\n}\n\nfunction accumulateLiability(\n  liability: string,\n  type: string, // \"income\" or \"NI\"\n  incomeValue: number,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n) {\n  // log(`accumulateLiability,\n  //    liability = ${liability}, type = ${type}, incomeValue = ${incomeValue}`);\n  /*\n  // This change breaks\n  // 'pay income tax on conditional categorized crystallized pension'\n  // for example, because we need to even pass through a zero liability\n  // in order to hit the code which optimises income tax \n  // (cashes in taxable crystallised pension up to allowance)\n  if(incomeValue === 0){\n    return;\n  }\n  */\n  let map = liableIncomeInTaxYear.get(type);\n  if (map === undefined) {\n    // set up a map to collect accumulations for type\n    liableIncomeInTaxYear.set(type, new Map<string, number>());\n    map = liableIncomeInTaxYear.get(type);\n  }\n  if (map !== undefined) {\n    // log this amount in the accumulating total\n    let taxLiability = map.get(liability);\n    if (taxLiability === undefined) {\n      taxLiability = 0;\n    }\n    // log(`${liability} accumulate ${incomeValue} into ${taxLiability}`);\n    const newLiability = taxLiability + incomeValue;\n    map.set(liability, newLiability);\n    // log(`${type} accumulated ${liability} liability = ${newLiability}`);\n  }\n  if (type === incomeTax) {\n    /////////// TODO duplication of code\n    let liableIncomeTaxInTaxMonth = liableIncomeInTaxMonth.get(incomeTax);\n    if (liableIncomeTaxInTaxMonth === undefined) {\n      liableIncomeTaxInTaxMonth = new Map<string, number>();\n      liableIncomeInTaxMonth.set(incomeTax, liableIncomeTaxInTaxMonth);\n    }\n    let taxLiability = liableIncomeTaxInTaxMonth.get(liability);\n    if (taxLiability === undefined) {\n      taxLiability = 0;\n    }\n    const newLiability = taxLiability + incomeValue;\n    // log(`${liability} accumulate income tax liability ${incomeValue} for the month: ${newLiability}`);\n    liableIncomeTaxInTaxMonth.set(liability, newLiability);\n  }\n  if (type === nationalInsurance) {\n    let liableNIInTaxMonth = liableIncomeInTaxMonth.get(nationalInsurance);\n    if (liableNIInTaxMonth === undefined) {\n      liableNIInTaxMonth = new Map<string, number>();\n      liableIncomeInTaxMonth.set(nationalInsurance, liableNIInTaxMonth);\n    }\n    let taxLiability = liableNIInTaxMonth.get(liability);\n    if (taxLiability === undefined) {\n      taxLiability = 0;\n    }\n    const newLiability = taxLiability + incomeValue;\n    // log(`${liability} accumulate NI liability ${incomeValue} for the month: ${newLiability}`);\n    liableNIInTaxMonth.set(liability, newLiability);\n  }\n}\n\nfunction handleIncome(\n  incomeValue: number,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  pensionTransactions: Transaction[],\n  liabilitiesMap: Map<string, string>,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n  sourceDescription: string,\n) {\n  // log(`handle income value = ${incomeValue}`);\n  const triggers = model.triggers;\n\n  // log(`handle income for moment ${moment.name}`);\n\n  if (moment.name.startsWith(pensionDB)) {\n    // This type of income has moments which fall before the\n    // income start date; allowing for other actions to\n    // influence its value\n    const income = model.incomes.find(i => {\n      return i.NAME === moment.name;\n    });\n    if (income === undefined) {\n      throw new Error(`income ${moment.name} not found in model`);\n    }\n    const incomeStartDate = getTriggerDate(income.START, triggers);\n    // log(`income start is ${incomeStartDate}, moment date is ${moment.date}`);\n    if (incomeStartDate > moment.date) {\n      // log(`skip income ${income.NAME} at moment ${moment.name}`);\n      // don't receive this income yet!\n      return;\n    }\n  }\n\n  // default income increment is all of the income\n  let amountForCashIncrement = incomeValue;\n  let amountForIncomeTax = incomeValue;\n  let amountForNI = incomeValue;\n  // some types of pension scheme reduce NI liability\n\n  if (moment.type === momentType.asset) {\n    // asset growth does not transfer money into cash\n    amountForCashIncrement = 0;\n  }\n\n  // when we receive income\n  // the amount paid to cash is sometimes\n  // reduced to account for pension contributions\n  // and it sometimes adjusts defined contributions pension asset\n  // and it sometimes adjusts defined benefits pension benefit\n  pensionTransactions.forEach(pt => {\n    if (getTriggerDate(pt.DATE, triggers) > moment.date) {\n      return;\n    }\n    const tFromValue = parseFloat(pt.FROM_VALUE);\n    const tToValue = parseFloat(pt.TO_VALUE);\n    // log(`pension transaction ${pt.NAME}`)\n    // log(`see if ${showObj(pt)} should affect `\n    //   +`this handleIncome moment ${showObj(moment)}`);\n    if (moment.name === pt.FROM) {\n      // log(`matched transaction ${showObj(pt)} to ${showObj(moment)}`);\n\n      let amountFrom = 0.0;\n      if (pt.FROM_ABSOLUTE) {\n        amountFrom = tFromValue;\n      } else {\n        // e.g. employee chooses 5% pension contribution\n        amountFrom = tFromValue * incomeValue;\n        // log(`amountFrom = ${tFromValue} * ${incomeValue} = ${amountFrom}`);\n      }\n\n      if (!pt.NAME.startsWith(pensionDB)) {\n        // A Defined Contributions pension\n        // has a name beginnning pensionDC\n        //\n        // A Defined Benefits Pension\n        // has two transactions\n        // - one flagged as pension (or pensionSS)\n        //   which will decrease cash Increment etc\n        // - another flagged as pensionDB\n        // whose purpose is solely to setValue on the\n        // target benefit\n        // log(`pay into pension : ${pt.NAME}`);\n        amountForCashIncrement -= amountFrom;\n        amountForIncomeTax -= amountFrom;\n\n        if (pt.NAME.startsWith(pensionSS)) {\n          amountForNI -= amountFrom;\n        }\n      }\n\n      let amountForPension = 0;\n      if (pt.TO_ABSOLUTE) {\n        amountForPension = tToValue;\n      } else {\n        // e.g. employer increments employee's pension contribution\n        amountForPension = tToValue * amountFrom;\n        // log(`amountForPension = ${tToValue} * ${amountFrom} = ${amountForPension}`);\n      }\n      let pensionValue = getNumberValue(values, pt.TO, false);\n\n      const scaleBy = getNumberValue(values, baseForCPI);\n      if (scaleBy !== undefined && pensionValue !== undefined) {\n        pensionValue = pensionValue * scaleBy;\n      } else if (scaleBy === undefined) {\n        log(`BUG : undefined scaleBy ${scaleBy}`);\n      }\n\n      if (pt.TO === '') {\n        if (printDebug()) {\n          log('pension contributions going into void');\n        }\n      } else if (pensionValue === undefined) {\n        log('BUG : contributing to undefined pension scheme');\n      } else {\n        // log(`old pensionValue is ${pensionValue} becomes ${pensionValue + amountForPension}`);\n        pensionValue += amountForPension;\n\n        // log(`pt.NAME = ${pt.NAME}`);\n        // log(`new pensionValue is ${pensionValue}`);\n        // log(`income source = ${transaction.NAME}`);\n        // log('in handleIncome:');\n        if (scaleBy && pensionValue) {\n          pensionValue = pensionValue / scaleBy;\n        }\n        setValue(\n          values,\n          growths,\n          evaluations,\n          moment.date,\n          pt.TO,\n          pensionValue,\n          model,\n          pt.NAME,\n          '7', //callerID\n        );\n      }\n    }\n  });\n\n  // pay income into cash\n  if (amountForCashIncrement > 0) {\n    // log(`cash source = ${sourceDescription}`);\n    // log('in handleIncome, adjustCash:');\n    adjustCash(\n      amountForCashIncrement,\n      moment.date,\n      values,\n      growths,\n      evaluations,\n      model,\n      sourceDescription,\n    );\n  }\n\n  // log(`look for ${moment.name+sourceDescription} in liabilitiesMap`);\n  let person = '';\n  let liabilitiesMapKey = moment.name + sourceDescription;\n  let liabilityList = liabilitiesMap.get(liabilitiesMapKey); // e.g. \"IncomeTaxJoe, NIJoe\"\n  if (liabilityList === undefined) {\n    liabilitiesMapKey = moment.name;\n    liabilityList = liabilitiesMap.get(liabilitiesMapKey);\n  }\n  // log(`for ${liabilitiesMapKey}, liabilityList = ${liabilityList}`);\n  if (liabilityList !== undefined) {\n    const words: string[] = liabilityList.split(separator);\n    words.forEach(liability => {\n      // log(`liability = ${liability}`);\n      if (liability.endsWith(incomeTax)) {\n        accumulateLiability(\n          liability,\n          incomeTax,\n          amountForIncomeTax,\n          liableIncomeInTaxYear,\n          liableIncomeInTaxMonth,\n        );\n        const thisPerson = liability.substring(\n          0,\n          liability.length - incomeTax.length,\n        );\n        if (person === '') {\n          person = thisPerson;\n        } else if (person !== thisPerson) {\n          throw new Error(\n            `can't handle multiple people liable from one income`,\n          );\n        }\n      }\n      if (liability.endsWith(nationalInsurance)) {\n        // log(`NI moment is ${showObj(moment.name)} amount ${amountForNI}`);\n        accumulateLiability(\n          liability,\n          nationalInsurance,\n          amountForNI,\n          liableIncomeInTaxYear,\n          liableIncomeInTaxMonth,\n        );\n        const thisPerson = liability.substring(\n          0,\n          liability.length - nationalInsurance.length,\n        );\n        if (person === '') {\n          person = thisPerson;\n        } else if (person !== thisPerson) {\n          throw new Error(\n            `can't handle multiple people liable from one income`,\n          );\n        }\n      }\n    });\n  }\n  // log(`finished handleIncome`);\n}\n\nfunction logExpenseGrowth(\n  x: Expense,\n  cpiVal: number,\n  growths: Map<string, GrowthData>,\n) {\n  const expenseGrowth = parseFloat(x.GROWTH);\n  const adaptedExpenseGrowth =\n    cpiVal !== 0\n      ? ((1.0 + (expenseGrowth + cpiVal) / 100) / (1.0 + cpiVal / 100) - 1.0) *\n        100\n      : expenseGrowth;\n  // if(cpiVal > 0 && (expenseGrowth > 0 || adaptedExpenseGrowth > 0)){\n  //   log(`from ${expenseGrowth}, use cpi ${cpiVal} to create adaptedExpenseGrowth = ${getMonthlyGrowth(adaptedExpenseGrowth)}`);\n  // }\n  let power = 1;\n  const freq = parseRecurrenceString(x.RECURRENCE);\n  if (freq.frequency !== monthly || freq.count !== 1) {\n    // scale up the stored growths value\n    power = freq.count;\n    if (freq.frequency === annually) {\n      power *= 12;\n    }\n  }\n  growths.set(x.NAME, {\n    itemGrowth: x.GROWTH,\n    powerByNumMonths: power,\n    scale: getMonthlyGrowth(adaptedExpenseGrowth),\n    applyCPI: !x.CPI_IMMUNE,\n  });\n}\n\nfunction logIncomeGrowth(\n  x: Income,\n  cpiVal: number,\n  growths: Map<string, GrowthData>,\n) {\n  const growth = parseFloat(x.GROWTH);\n  const adaptedGrowth =\n    cpiVal !== 0\n      ? ((1.0 + (growth + cpiVal) / 100) / (1.0 + cpiVal / 100) - 1.0) *\n        100\n      : growth;\n  // if(cpiVal > 0 && (growth > 0 || adaptedGrowth > 0)){\n  //   log(`from ${growth}, use cpi ${cpiVal} to create adaptedExpenseGrowth = ${getMonthlyGrowth(adaptedGrowth)}`);\n  // }\n\n  growths.set(x.NAME, {\n    itemGrowth: x.GROWTH,\n    powerByNumMonths: 1,\n    scale: getMonthlyGrowth(adaptedGrowth),\n    applyCPI: !x.CPI_IMMUNE,\n  });\n}\n\nfunction logAssetGrowth(\n  asset: Asset,\n  cpiVal: number,\n  growths: Map<string, GrowthData>,\n  settings: Setting[],\n) {\n  // log(`stored growth is ${asset.GROWTH}`);\n  let growth: number = parseFloat(asset.GROWTH);\n  // log(`growth is ${growth}`);\n  if (Number.isNaN(growth)) {\n    // log(`growth is recognised as NaN`);\n    let settingVal = getSettings(settings, asset.GROWTH, 'None');\n    // log(`setting value for ${asset.GROWTH} is ${settingVal}`);\n    if (settingVal === 'None') {\n      log(`BUG : no setting value for asset growth ${asset.GROWTH}`);\n      settingVal = '0.0';\n    }\n    growth = parseFloat(settingVal);\n    if (Number.isNaN(growth)) {\n      if (settingVal === 'None') {\n        log(\n          'BUG : cant parse setting value for asset growth ' +\n            `${asset.GROWTH} = ${settingVal}`,\n        );\n        growth = 0.0;\n      }\n    }\n  } else {\n    // log(`growth is not recognised as a NaN - assume parseFloat gave something useful`);\n  }\n  // log(`annual growth before cpi adjustment is ${growth}`);\n  const adaptedAssetGrowth =\n    cpiVal !== 0\n      ? ((1.0 + (growth + cpiVal) / 100) / (1.0 + cpiVal / 100) - 1.0) * 100\n      : growth;\n  // log(`annual growth after cpi adjustment is ${adaptedAssetGrowth}`);\n  // if(cpiVal > 0 && (growth > 0 || adaptedAssetGrowth > 0)){\n  //   log(`from ${asset.GROWTH}, use cpi ${cpiVal} to create adaptedExpenseGrowth = ${getMonthlyGrowth(adaptedAssetGrowth)}`);\n  // }\n  growths.set(asset.NAME, {\n    itemGrowth: asset.GROWTH,\n    powerByNumMonths: 1,\n    scale: getMonthlyGrowth(adaptedAssetGrowth),\n    applyCPI: !asset.CPI_IMMUNE,\n  });\n}\n\nfunction logAssetValueString(\n  assetVal: string,\n  assetStart: string,\n  assetName: string,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  level = 1,\n): boolean {\n  const debug = false;\n  if (debug) {\n    log(\n      `level${level}: logAssetValueString processing ${assetVal} as value of ${assetName}`,\n    );\n  }\n  if (isNumberString(assetVal)) {\n    // log(`${assetVal} is a number string`);\n    return true;\n  }\n\n  if (debug) {\n    // log(`look for a value of ${assetVal} in the settings`);\n  }\n  const settingVal: string | number = getSettings(\n    model.settings,\n    assetVal,\n    'missing',\n    false,\n  );\n  let parsedOK = false;\n  if (settingVal === 'missing') {\n    if (debug) {\n      log(`there's no setting for ${assetVal}`);\n    }\n    const wordPart = removeNumberPart(assetVal);\n    if (wordPart !== undefined) {\n      if (debug) {\n        log(`level${level}: go do work on ${wordPart} instead`);\n      }\n      parsedOK = logAssetValueString(\n        wordPart,\n        assetStart,\n        wordPart,\n        values,\n        growths,\n        evaluations,\n        model,\n        level + 1,\n      );\n    } else {\n      if (debug) {\n        log(\n          `level${level}: we can't remove any number part of ${assetVal}, give up`,\n        );\n      }\n      parsedOK = false;\n    }\n  } else {\n    if (debug) {\n      log(\n        `level${level}: we found ${assetVal} as a setting with value ${settingVal}`,\n      );\n    }\n    if (isNumberString(settingVal)) {\n      if (debug) {\n        log(\n          `isNumber: level${level}: go set the value of ${assetVal} as number ${parseFloat(\n            settingVal,\n          )}`,\n        );\n      }\n      setValue(\n        values,\n        growths,\n        evaluations,\n        getTriggerDate(assetStart, model.triggers),\n        assetVal,\n        parseFloat(settingVal),\n        model,\n        assetName,\n        '8', //callerID\n      );\n      if (debug) {\n        log(`level${level}: return true`);\n      }\n      return true;\n    } else {\n      if (debug) {\n        log(\n          `level${level}: go parse the value of ${settingVal}` +\n            ` as a setting as a value definition`,\n        );\n      }\n      parsedOK = logAssetValueString(\n        settingVal,\n        assetStart,\n        assetVal,\n        values,\n        growths,\n        evaluations,\n        model,\n        level + 1,\n      );\n    }\n  }\n  if (parsedOK && level > 1) {\n    if (assetName !== assetVal) {\n      if (debug) {\n        log(\n          `parsedOK: level${level}: go set the value of ${assetName} as ${assetVal}`,\n        );\n      }\n      setValue(\n        values,\n        growths,\n        evaluations,\n        getTriggerDate(assetStart, model.triggers),\n        assetName,\n        assetVal,\n        model,\n        assetName,\n        '9', //callerID\n      );\n    }\n\n    if (debug) {\n      log(`level${level}: return true`);\n    }\n    return true;\n  } else {\n    if (debug) {\n      log(`level${level}: return false`);\n    }\n    return false;\n  }\n}\n\nfunction getRecurrentMoments(\n  x: {\n    // could be an income or an expense\n    NAME: string;\n    START: string; // trigger string\n    END: string; // trigger string\n    VALUE: string;\n    VALUE_SET: string; // trigger string\n  },\n  prepType: string,\n  type: string,\n  triggers: Trigger[],\n  startSequenceFrom: Date,\n  startExpenseOrIncomeDate: Date,\n  rOIEndDate: Date,\n  recurrence: string,\n) {\n  // log(`in getRecurrentMoments`);\n  let endDate = getTriggerDate(x.END, triggers);\n  if (rOIEndDate < endDate) {\n    endDate = rOIEndDate;\n  }\n  const roi = {\n    start: startSequenceFrom,\n    end: endDate,\n  };\n  const dates = generateSequenceOfDates(roi, recurrence);\n  const newMoments: Moment[] = dates.map(date => {\n    const typeForMoment = date < startExpenseOrIncomeDate ? prepType : type;\n    const result: Moment = {\n      date,\n      name: x.NAME,\n      type: typeForMoment,\n      setValue: 0,\n      transaction: undefined,\n    };\n    return result;\n  });\n\n  // Set up special values in the first value.\n  if (newMoments.length > 0) {\n    if (type === momentType.expense) {\n      if (newMoments[0].type === momentType.expensePrep) {\n        newMoments[0].type = momentType.expenseStartPrep;\n      } else {\n        newMoments[0].type = momentType.expenseStart;\n      }\n    } else if (type === momentType.income) {\n      if (newMoments[0].type === momentType.incomePrep) {\n        newMoments[0].type = momentType.incomeStartPrep;\n      } else {\n        newMoments[0].type = momentType.incomeStart;\n      }\n    }\n    const startVal = x.VALUE;\n    const from = getTriggerDate(x.VALUE_SET, triggers);\n    const to = roi.start;\n    // log(`${x.NAME} grew between ${from} and ${to}`);\n    const numMonths = diffMonths(from, to);\n    if (!x.NAME.startsWith(pensionDB) && numMonths < 0) {\n      log(\n        `BUG : income/expense start value set ${from} after ` +\n          `start date ${to} ${x.NAME}`,\n      );\n    }\n    newMoments[0].setValue = startVal;\n  }\n  // log(`generated ${showObj(newMoments)} for ${x.NAME}`);\n  return newMoments;\n}\n\nfunction getAssetMonthlyMoments(\n  asset: Asset,\n  triggers: Trigger[],\n  rOIEndDate: Date,\n) {\n  const roi = {\n    start: getTriggerDate(asset.START, triggers),\n    end: rOIEndDate,\n  };\n  // log(`roi = ${showObj(roi)}`)\n  const dates = generateSequenceOfDates(roi, '1m');\n  // log(`dates = ${showObj(dates)}`)\n  const newMoments = dates.map(date => {\n    const result: Moment = {\n      date,\n      name: asset.NAME,\n      type: momentType.asset,\n      setValue: 0,\n      transaction: undefined,\n    };\n    return result;\n  });\n  if (newMoments.length > 0) {\n    newMoments[0].type = momentType.assetStart;\n    if (isNumberString(asset.VALUE)) {\n      newMoments[0].setValue = parseFloat(asset.VALUE);\n    } else {\n      //log(`start of asset, storing value '${asset.VALUE}'`);\n      newMoments[0].setValue = asset.VALUE;\n    }\n  }\n  return newMoments;\n}\n\nfunction getTransactionMoments(\n  transaction: Transaction,\n  triggers: Trigger[],\n  rOIEndDate: Date,\n) {\n  const newMoments: Moment[] = [];\n  if (\n    !transaction.NAME.startsWith(pensionTransfer) &&\n    (transaction.NAME.startsWith(pension) ||\n      transaction.NAME.startsWith(pensionSS) ||\n      transaction.NAME.startsWith(pensionDB))\n  ) {\n    // we don't track pension actions here\n    // (see pensionTransactions, reviewed during handleIncome)\n    return newMoments;\n  }\n  const recurrenceGiven = transaction.RECURRENCE.length > 0;\n  if (recurrenceGiven) {\n    // create a sequence of moments\n    // use ROI to limit number of moments generated\n    let stop = rOIEndDate;\n    if (transaction.STOP_DATE !== '') {\n      const transStop = getTriggerDate(transaction.STOP_DATE, triggers);\n      if (stop > transStop) {\n        stop = transStop;\n      }\n    }\n    const sequenceRoi: Interval = {\n      start: getTriggerDate(transaction.DATE, triggers),\n      end: stop,\n    };\n    const transactionDates = generateSequenceOfDates(\n      sequenceRoi,\n      transaction.RECURRENCE,\n    );\n    transactionDates.forEach(d => {\n      newMoments.push({\n        name: transaction.NAME,\n        date: d,\n        type: momentType.transaction,\n        setValue: undefined,\n        transaction,\n      });\n    });\n  } else {\n    const date = getTriggerDate(transaction.DATE, triggers);\n    if (date < rOIEndDate) {\n      newMoments.push({\n        name: transaction.NAME,\n        date,\n        type: momentType.transaction,\n        transaction,\n        setValue: undefined,\n      });\n    }\n  }\n  return newMoments;\n}\n\nfunction assetAllowedNegative(assetName: string, asset: Asset) {\n  if (asset) {\n    return asset.CAN_BE_NEGATIVE;\n  }\n  log(`Error : asset name ${assetName} not found in assets list`);\n  return (\n    assetName === CASH_ASSET_NAME ||\n    assetName.includes('mortgage') ||\n    assetName.includes('Mortgage')\n  );\n}\n\nfunction revalueApplied(\n  t: Transaction,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n  model: ModelData,\n) {\n  if (!t.NAME.startsWith(revalue)) {\n    return false;\n  }\n  // log(`it's a revaluation`)\n  if (t.FROM !== '') {\n    log(\n      'WARNING : FROM supplied but no used ' +\n        `for a revaluation transaction ${showObj(t)}`,\n    );\n  }\n  // log(`t.TO_VALUE = ${t.TO_VALUE}`);\n  let tToValue: string | number | undefined = traceEvaluation(\n    t.TO_VALUE,\n    values,\n    growths,\n    t.TO_VALUE,\n  );\n  const toVal = tToValue;\n  // log(`t.TO = ${t.TO}, tToValue = ${tToValue}`);\n  let words = t.TO.split(separator);\n  words = replaceCategoryWithAssetNames(words, model);\n  words.forEach(w => {\n    const wValue = values.get(w);\n    // log(`word from ${t.TO} is ${w} has value ${wValue}`);\n    let prevValue: number | undefined = undefined;\n    let scaledNumberWordParts = false;\n    if (wValue === undefined) {\n      // log(`word for ${showObj(t)} is ${w} has value ${wValue}`);\n      throw new Error(\n        `proportional change to an undefined value not implemented, ${t.NAME}`,\n      );\n    } else if (typeof wValue !== 'string') {\n      // log(`${wValue} is a number`);\n      prevValue = wValue;\n    } else if (isNumberString(wValue)) {\n      // log(`${wValue} is a number-string`);\n      prevValue = parseFloat(wValue);\n    } else {\n      if (!t.TO_ABSOLUTE) {\n        // log(`${wValue} is a not-number-string`);\n        const parts = getNumberAndWordParts(wValue);\n        if (parts.numberPart !== undefined && parts.wordPart !== undefined) {\n          if (tToValue !== undefined && typeof tToValue !== 'string') {\n            const newNumberPart = parts.numberPart * tToValue;\n            // log(`tToValue = '' + ${newNumberPart} + ${parts.wordPart};`);\n            tToValue = '' + newNumberPart + parts.wordPart;\n            scaledNumberWordParts = true;\n          } else {\n            throw new Error(\n              `proportional change to a not-number value ${wValue} not implemented`,\n            );\n          }\n        } else {\n          throw new Error(\n            `proportional change to a not-number value ${wValue} not implemented`,\n          );\n        }\n      }\n    }\n    if (!t.TO_ABSOLUTE) {\n      // this is a proportional change\n      // log(`previous value was ${prevValue}`);\n      if (prevValue === undefined) {\n        if (!scaledNumberWordParts) {\n          log(\n            'WARNING : proportional value supplied' +\n              ' for a revaluation transaction' +\n              ` with no prev value ${showObj(t)}`,\n          );\n        }\n      } else {\n        if (toVal === undefined) {\n          throw new Error(`can't interpret scale value ${t.TO_VALUE}`);\n        } else {\n          // log(`tToValue = '' + ${prevValue} + ${toVal};`);\n          tToValue = prevValue * toVal;\n        }\n      }\n    }\n    // log income tax liability for assets which grow\n    const matchingAsset = model.assets.find(a => {\n      return a.NAME === w;\n    });\n    if (matchingAsset !== undefined) {\n      const liabilities = matchingAsset.LIABILITY.split(separator);\n      liabilities.forEach(l => {\n        if (l.endsWith(incomeTax)) {\n          if (prevValue === undefined) {\n            log(`WARNING : no prev value found for revalue`);\n          } else if (tToValue === undefined || typeof tToValue === 'string') {\n            log(`WARNING : tToValue undefined/string for revalue`);\n          } else {\n            let gain = tToValue - prevValue;\n            if (gain > 0) {\n              // log(`handle liability ${l} with gain ${gain}`);\n              const q = getQuantity(matchingAsset.NAME, values, model);\n              if (q !== undefined) {\n                log('Untested code for income tax on quantities');\n                gain *= q;\n              }\n              accumulateLiability(\n                l,\n                incomeTax,\n                gain,\n                liableIncomeInTaxYear,\n                liableIncomeInTaxMonth,\n              );\n            }\n          }\n        }\n      });\n    }\n    // log(`passing ${t.TO_VALUE} as new value of ${moment.name}`);\n    // log('in revalueApplied:');\n    if (!t.TO_ABSOLUTE && tToValue !== undefined) {\n      setValue(\n        values,\n        growths,\n        evaluations,\n        moment.date,\n        w,\n        tToValue,\n        model,\n        revalue,\n        '10', //callerID\n      );\n    } else {\n      // log(`revalue ${w} to ${t.TO_VALUE}`);\n      setValue(\n        values,\n        growths,\n        evaluations,\n        moment.date,\n        w,\n        t.TO_VALUE,\n        model,\n        revalue,\n        '11', //callerID\n      );\n    }\n  });\n  return true;\n}\n\nfunction calculateFromChange(\n  t: Transaction,\n  preToValue: number | undefined,\n  preFromValue: number,\n  fromWord: string,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n):\n  | {\n      fromImpact: number;\n      toImpact: number;\n      cgtPreWhole: number;\n      cgtPreChange: number;\n    }\n  | undefined {\n  // log(`t = ${showObj(t)}`);\n  // log(`t.FROM_VALUE = ${t.FROM_VALUE}`);\n  if (t.NAME.startsWith(conditional) && preToValue === undefined) {\n    log(`Bug : conditional transaction to undefined value ${showObj(t)}`);\n    //throw new Error(\n    //  `Bug : conditional transaction to undefined value ${showObj(t)}`,\n    //);\n    return undefined;\n  }\n\n  if (\n    t.NAME.startsWith(conditional) &&\n    preToValue !== undefined &&\n    preToValue >= 0\n  ) {\n    // don't need to perform this transaction\n    // no need to 'maintain' value of to-asset\n    // as it's already >= 0\n    // log(`no need to maintain ${t.TO} from ${t.FROM} `\n    //   +`as targetValue = ${targetValue}`)\n    return undefined;\n  }\n\n  // log(`in calculateFromChange for ${t.NAME}, ${fromWord}`);\n  const tFromValue = traceEvaluation(t.FROM_VALUE, values, growths, t.FROM);\n  if (tFromValue === undefined) {\n    log(`ERROR : can't interpret ${t.FROM_VALUE}`);\n    return undefined;\n  }\n  const tToValue = parseFloat(t.TO_VALUE);\n\n  const q = getQuantity(fromWord, values, model);\n  const fromHasQuantity = q !== undefined;\n\n  // log(`fromHasQuantity = ${fromHasQuantity}, q = ${q}`);\n\n  // The calling code will use fromChange to setValue on\n  // the from-asset.\n  // It will use to-settings (value and absolute) to adjust\n  // toChange to make a change to the to-asset.\n  // Mostly, the toChange and fromChange are the same in this function\n  // but if either from or to involve quantities, then\n  // we see important differences.\n  let fromChange = 0;\n  // log(`fromChange = ${fromChange}`);\n\n  const matchingAsset = model.assets.find(a => {\n    return a.NAME === fromWord;\n  });\n  const assetNotAllowedNegative =\n    matchingAsset && !assetAllowedNegative(fromWord, matchingAsset);\n\n  if (t.FROM_ABSOLUTE) {\n    // log(`use all of fromValue = ${tFromValue}`);\n    fromChange = tFromValue;\n  } else {\n    // relative amounts behave differently for conditionals\n    if (t.NAME.startsWith(conditional) && !t.TO_ABSOLUTE) {\n      if (preToValue !== undefined) {\n        // proportion of target\n        // log(`use proportion of target amount; proportion of ${preToValue}`);\n        fromChange = (-preToValue * tFromValue) / tToValue;\n      }\n    } else {\n      // proportion of source\n      if (fromHasQuantity && q) {\n        fromChange = Math.floor(q * tFromValue);\n      } else {\n        // log(`use proportion of source amount; proportion of ${preFromValue}`);\n        fromChange = preFromValue * tFromValue;\n      }\n    }\n  }\n  // log(`fromChange = ${fromChange}`);\n\n  let numberUnits = 0;\n  let unitValue = 0.0;\n\n  // reinterpret a change as a number of units for quantised assets\n  if (fromHasQuantity) {\n    if (t.NAME.startsWith(conditional)) {\n      // log(`absolute from change involving quantities`);\n      // fromChange is a number of pounds\n      // use q to determine a proportional change\n      // for fromChange\n      unitValue = preFromValue;\n      numberUnits = Math.ceil(fromChange / unitValue);\n      // reset fromChange so it's a £ value\n    } else {\n      // log(`absolute from change involving quantities`);\n      // fromChange is a number of units\n      // use q to determine a proportional change\n      // for fromChange\n      numberUnits = fromChange;\n      if (q && q < numberUnits) {\n        numberUnits = q;\n      }\n      unitValue = preFromValue;\n      // reset fromChange so it's a £ value\n      fromChange = numberUnits * unitValue;\n    }\n    // log(`fromChange = ${fromChange}`);\n    // log(`numberUnits = ${numberUnits}`);\n    // log(`unitValue = ${unitValue}`);\n  }\n\n  // don't transfer more than we need to for conditional\n  // transactions\n  if (\n    t.NAME.startsWith(conditional) &&\n    preToValue !== undefined &&\n    !t.TO_ABSOLUTE &&\n    fromChange >= -preToValue / tToValue\n  ) {\n    // log(`before considering granular changes, fromChange = ${fromChange}`);\n    // log(`cap conditional amount - we only need ${preToValue}`);\n    const lowestFromChange = -preToValue / tToValue;\n    const grain = getNumberValue(values, 'Grain', false);\n    // log(`Grain's value is ${grain}`);\n    if (grain !== undefined && t.TO === CASH_ASSET_NAME && !fromHasQuantity) {\n      const granularChange = Math.ceil(lowestFromChange / grain) * grain;\n      // log(`lowestChange : ${lowestFromChange}, granularChange : ${granularChange}`);\n      // log(`preFromValue : ${preFromValue}`);\n      if (granularChange < preFromValue) {\n        fromChange = granularChange;\n      } else {\n        fromChange = lowestFromChange;\n      }\n    } else {\n      fromChange = lowestFromChange;\n    }\n    if (fromHasQuantity) {\n      //log(`quantity involved in working out fromChange`);\n      numberUnits = Math.ceil(fromChange / unitValue);\n      fromChange = numberUnits * unitValue;\n    } else {\n    }\n  }\n  // apply change for quantised assets\n  if (fromHasQuantity && q !== undefined) {\n    if (q - numberUnits < 0 && assetNotAllowedNegative) {\n      if (t.NAME.startsWith(conditional) && q > 0) {\n        // transfer as much as we have\n        numberUnits = q;\n        fromChange = numberUnits * unitValue;\n      } else {\n        // log(`don't sell more units than we have`);\n        // log(`q = ${q}, numberUnits = ${numberUnits}`);\n        return undefined;\n      }\n    }\n    // log(`set new quantity ${q} - ${numberUnits} = ${q - numberUnits}`);\n    let source = t.NAME;\n    if (source.startsWith(conditional)) {\n      source = source.substring(conditional.length, source.length);\n    }\n    setValue(\n      values,\n      growths,\n      evaluations,\n      moment.date,\n      quantity + fromWord,\n      q - numberUnits,\n      model,\n      source,\n      '12', //callerID\n    );\n  }\n\n  // Allow some assets to become negative but not others\n  if (\n    assetNotAllowedNegative &&\n    !fromHasQuantity &&\n    fromChange > preFromValue\n  ) {\n    // log(`fromChange = ${fromChange} > preFromValue ${preFromValue}`);\n    if (t.NAME.startsWith(conditional)) {\n      // transfer as much as we have\n      // log(`transfer only ${preFromValue} because we don't have ${fromChange}`);\n      fromChange = preFromValue;\n    } else {\n      // don't transfer anything\n      //log(`don't apply transaction from ${fromWord} `\n      //  +`because value ${preFromValue} < ${fromChange} `);\n      return undefined;\n    }\n  }\n  const matchingIncome = model.incomes.find(i => {\n    return i.NAME === fromWord;\n  });\n  if (matchingIncome && fromChange > preFromValue) {\n    //log(\n    //  `Error: dont take more than income value ` +\n    //    `${preFromValue} from income ${matchingIncome.NAME}`,\n    //);\n    return undefined;\n  }\n  if (matchingAsset && fromWord !== undefined) {\n    if (!assetAllowedNegative(fromWord, matchingAsset) && preFromValue <= 0) {\n      // log(`we cannot help`);\n      return undefined;\n    }\n  }\n\n  // log(`fromChange = ${fromChange}`);\n  const toChange = fromChange;\n  const cgtFromImpact = fromChange;\n  let cgtPreWhole = preFromValue;\n  if (fromHasQuantity && q !== undefined) {\n    // log(`don't alter the unit value of a quantised asset`);\n    // log(`fromChange was ${fromChange} but reset to 0`)\n    // log(`cgtPreWhole * q = ${cgtPreWhole} * ${q}`);\n    fromChange = 0; // don't alter the unit value\n    cgtPreWhole = cgtPreWhole * q;\n    // log(`cgtPreWhole = ${cgtPreWhole}`);\n  }\n  const result = {\n    fromImpact: fromChange,\n    toImpact: toChange,\n    cgtPreWhole: cgtPreWhole,\n    cgtPreChange: cgtFromImpact,\n  };\n  // log(`returning data ${showObj(result)}`);\n  return result;\n}\n\nfunction calculateToChange(\n  t: Transaction,\n  preToValue: number | undefined,\n  fromChange: number | undefined,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // log(`t = ${showObj(t)}`);\n  let toChange = 0;\n  if (t.TO === '') {\n    return toChange;\n  }\n  const tToValue = parseFloat(t.TO_VALUE);\n  // log(`t.TO = ${t.TO}`)\n  // log(`before transaction, toValue = ${tToValue}`)\n  if (preToValue === undefined) {\n    throw new Error(`Bug : transacting to unvalued asset ${showObj(moment)}`);\n  }\n  // log(`t.TO_VALUE = ${t.TO_VALUE}`);\n  if (t.TO_ABSOLUTE) {\n    toChange = tToValue;\n    const q = getQuantity(t.TO, values, model);\n    if (q !== undefined) {\n      // log(`absolute to change involving quantities`);\n      // log(`q = ${q}`);\n      // expect toChange to be an integer number\n      // adjust the quantity of items stored in values accordingly\n      // adjust the toChange value too\n      const numUnits = toChange;\n      // log(`numUnits = ${numUnits}`);\n      const currentValue = traceEvaluation(t.TO, values, growths, t.TO);\n      if (currentValue !== undefined) {\n        const newNumUnits = q + numUnits;\n        // log(`newNumUnits = ${newNumUnits}`);\n        setValue(\n          values,\n          growths,\n          evaluations,\n          moment.date,\n          quantity + t.TO,\n          newNumUnits,\n          model,\n          t.TO,\n          '13', //callerID\n        );\n        toChange = 0.0;\n        // log(`toChange = ${toChange}`);\n      }\n    }\n  } else {\n    if (fromChange === undefined) {\n      throw new Error(\n        'Bug : transacting to proportion of undefined fromChange' +\n          `${showObj(moment)}`,\n      );\n    }\n    // proportion of the amount taken from from_asset\n    toChange = tToValue * fromChange;\n  }\n  return toChange;\n}\n\nfunction handleCGTLiability(\n  t: Transaction,\n  fromWord: string,\n  preFromValue: number, // what the whole from was worth before transaction\n  fromChange: number, // the change in whole value of from during transaction\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  liabliitiesMap: Map<string, string>,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  model: ModelData,\n) {\n  // log(`${fromWord} reducing from ${preFromValue} by ${fromChange}`);\n  // log(`liabilites are ${liabliitiesMap.get(fromWord)}`);\n  const liabilities = liabliitiesMap.get(fromWord);\n  if (liabilities === undefined) {\n    return;\n  }\n  const liabilityWords = liabilities.split(separator);\n  // log(`liabilityWords = ${liabilityWords}`);\n  const cgtLiability = liabilityWords.find(word => word.endsWith(cgt));\n  // log(`cgtLiability = ${cgtLiability}`);\n  if (cgtLiability === undefined) {\n    return;\n  }\n  const proportionSale = fromChange / preFromValue;\n  // log(`proportionSale = ${fromChange} / ${preFromValue} = ${proportionSale}`);\n  const purchasePrice = getNumberValue(values, `${purchase}${fromWord}`);\n  // log(`purchasePrice = ${purchasePrice}`);\n  if (purchasePrice !== undefined) {\n    const totalGain = preFromValue - purchasePrice;\n    // log(`at ${moment.date}, totalGain = preFromValue - purchasePrice = ${preFromValue} - ${purchasePrice} = ${totalGain}`);\n    const proportionGain = totalGain * proportionSale;\n    // log(`proportionGain = ${proportionGain}`);\n    let cgtMap = liableIncomeInTaxYear.get('cgt');\n    if (cgtMap === undefined) {\n      liableIncomeInTaxYear.set('cgt', new Map<string, number>());\n      cgtMap = liableIncomeInTaxYear.get('cgt');\n    }\n    if (cgtMap !== undefined) {\n      let currentcgtVal = cgtMap.get(cgtLiability);\n      if (currentcgtVal === undefined) {\n        currentcgtVal = 0.0;\n      }\n      currentcgtVal += proportionGain;\n      // log(`setting new value for cgt ${currentcgtVal}`);\n      cgtMap.set(cgtLiability, currentcgtVal);\n      // log(`logged cgt for ${cgtLiability}, accumulated value ${currentcgtVal}`);\n    }\n    const newPurchasePrice = purchasePrice * (1 - proportionSale);\n    // when selling some asset, we reduce the Purchase value\n    // of what's left for CGT purposes\n    // log(`in handleCGTLiability, set newPurchasePrice = ${newPurchasePrice}`);\n    setValue(\n      values,\n      growths,\n      evaluations,\n      moment.date,\n      `${purchase}${fromWord}`,\n      newPurchasePrice,\n      model,\n      t.NAME, // TODO no test??\n      '13', //callerID\n    );\n  } else {\n    log('BUG!! - CGT liability on an asset with no record of purchase price');\n  }\n}\n\nexport function makeSourceForFromChange(t: Transaction) {\n  const sourceDescription = getDisplayName(t.NAME, t.TYPE);\n  return sourceDescription;\n}\n\nexport function makeSourceForToChange(t: Transaction) {\n  let source = t.NAME;\n  if (source.startsWith(conditional)) {\n    source = source.substring(conditional.length, source.length);\n  }\n  return source;\n}\n\nfunction processTransactionFromTo(\n  t: Transaction,\n  fromWord: string,\n  toWord: string,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  pensionTransactions: Transaction[],\n  liabliitiesMap: Map<string, string>,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n) {\n  // log(`process t = ${showObj(t)}`);\n  // log(`processTransactionFromTo fromWord = ${fromWord} toWord = ${toWord}, date = ${moment.date.toDateString()}`);\n  // log(`processTransactionFromTo takes in ${showObj(t)}`);\n  const preFromValue = traceEvaluation(fromWord, values, growths, fromWord);\n  // log(`pound value of ${fromWord} is ${preFromValue}`);\n  let preToValue = undefined;\n  if (toWord !== '') {\n    preToValue = traceEvaluation(toWord, values, growths, toWord);\n    if (preToValue === undefined) {\n      preToValue = 0.0;\n    }\n    // log(`pound value of ${toWord} is ${preToValue}`);\n  }\n\n  // handle conditional transactions\n  // Conditions on source/from:\n  //   UseUp (move money if source > 0)  not coded\n  //   this is linked to - which assets may become -ve?\n  // Condition on target/to:\n  //   Maintain (move money there if target < 0)\n  //   Payoff / repay (move money there if target < 0)\n\n  let fromChange;\n  // log(`preFromValue = ${preFromValue}`);\n  if (preFromValue !== undefined) {\n    fromChange = calculateFromChange(\n      t,\n      preToValue,\n      preFromValue,\n      fromWord,\n      moment,\n      values,\n      growths,\n      evaluations,\n      model,\n    );\n    // Transaction is permitted to be blocked by the calculation\n    // of fromChange - e.g. if it would require an asset to become\n    // a not-permitted value (e.g. shares become negative).\n    if (fromChange === undefined) {\n      // log(`transaction blocked - can't take ${t.FROM_VALUE} from ${fromWord}, had value ${preFromValue}`)\n      return;\n    }\n  }\n  // log(`for ${t.NAME}, fromChange = ${fromChange?.fromImpact}`);\n\n  // Determine how to change the To asset.\n  let toChange;\n  if (preToValue !== undefined && fromChange !== undefined) {\n    toChange = calculateToChange(\n      t,\n      preToValue,\n      fromChange.toImpact,\n      moment,\n      values,\n      growths,\n      evaluations,\n      model,\n    );\n  }\n  // log(`for ${t.NAME}, toChange = ${toChange}`);\n\n  // apply fromChange\n  if (fromChange !== undefined && preFromValue !== undefined) {\n    // log(`fromChange.cgtPreChange = ${fromChange.cgtPreChange}`);// fromChange = loss of value of from asset\n    handleCGTLiability(\n      t,\n      fromWord,\n      fromChange.cgtPreWhole, // preFromValue = old value of whole of from asset\n      fromChange.cgtPreChange, // fromChange = loss of value of from asset\n      moment,\n      values,\n      growths,\n      evaluations,\n      liabliitiesMap,\n      liableIncomeInTaxYear,\n      model,\n    );\n    // log(`reduce ${fromWord}'s ${preFromValue} by ${showObj(fromChange)}`);\n    // log(`in processTransactionFromTo, setValue of ${fromWord} to ${preFromValue - fromChange.fromImpact}`);\n    let newFromValue: string | number;\n    const oldVal = values.get(fromWord);\n\n    if (fromChange.fromImpact === 0 && oldVal !== undefined) {\n      newFromValue = oldVal;\n    } else {\n      newFromValue = preFromValue - fromChange.fromImpact;\n      // log(`newFromValue = ${newFromValue}`);\n      if(growthData(fromWord, growths, values).adjustForCPI){\n        const b = values.get(baseForCPI);\n        if (b && typeof b === 'number') {\n          newFromValue = newFromValue / b;\n        }\n      }\n    }\n    // log(`newFromValue to store = ${newFromValue}`);\n    setValue(\n      values,\n      growths,\n      evaluations,\n      moment.date,\n      fromWord,\n      newFromValue,\n      model,\n      makeSourceForFromChange(t),\n      '14', //callerID\n    );\n  }\n\n  // log(`for ${t.NAME}, toChange = ${toChange}`);\n\n  // apply toChange\n  if (toChange !== undefined) {\n    // special case - if we're transacting out of\n    // something called CrystallizedPension* into CASH_ASSET_NAME\n    // then we should treat this as an income\n    // (it's liable to income tax)\n    // log(`transacting ${fromChange} from ${fromWord}\n    // into ${toWord}`);\n    if (\n      fromWord.startsWith(crystallizedPension) &&\n      toWord === CASH_ASSET_NAME\n    ) {\n      // log(`for ${fromWord}, register ${toChange} pension withdrawal on ${moment.date}, ${moment.name} as liable for income tax`);\n      handleIncome(\n        toChange,\n        moment,\n        values,\n        growths,\n        evaluations,\n        model,\n        pensionTransactions,\n        liabliitiesMap,\n        liableIncomeInTaxYear,\n        liableIncomeInTaxMonth,\n        fromWord,\n      );\n    } else {\n      if (preToValue === undefined) {\n        throw new Error(\n          'Bug : transacting to adjust undefined toValue' +\n            `${showObj(moment)}`,\n        );\n      }\n      // log('in processTransactionFromTo, setValue:');\n      // log(`in processTransactionFromTo, setValue of ${toWord} to ${preToValue + toChange}`);\n      let newToValue = preToValue + toChange;\n      if(growthData(toWord, growths, values).adjustForCPI){\n        const b = values.get(baseForCPI);\n        if (b && typeof b === 'number') {\n          newToValue = newToValue / b;\n          // log(`scaled newToValue = ${newToValue}`);\n        }\n      }\n      setValue(\n        values,\n        growths,\n        evaluations,\n        moment.date,\n        toWord,\n        newToValue,\n        model,\n        makeSourceForToChange(t),\n        '15', //callerID\n      );\n    }\n  } else {\n    // special case - if we're reducing an income tax liability\n    // because we paid money into a pension\n    ///////////////...\n    if (t.FROM.endsWith(incomeTax) && t.TO === '') {\n      // We're reducing our income tax liability\n      // because of a pension scheme contribution.\n      // Make a matching addition to our pensionAllowance\n      // total too.\n      // log(`use up ${fromChange} of ${pensionAllowance} for ${t.FROM}`);\n      log(\n        `ERROR : one-off income tax adjustment might affect pensionAllowance...no code for this`,\n      );\n      // throw new Error('unhandled pensionAllowance change');\n    }\n  }\n}\n\nfunction processTransactionTo(\n  t: Transaction,\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  // log(`in processTransactionTo`);\n  if (!t.FROM_ABSOLUTE) {\n    throw new Error(\n      `BUG : transacting from a proportional amount of undefined ${showObj(t)}`,\n    );\n  }\n  const tToValue = parseFloat(t.TO_VALUE);\n  const fromChange = parseFloat(t.FROM_VALUE);\n  // Determine how much to add to the To asset.\n  // Set the increased value of the To asset accordingly.\n  // log(`t.TO = ${t.TO}`)\n  let value = traceEvaluation(t.TO, values, growths, t.TO);\n  let q = getQuantity(t.TO, values, model);\n  // log(`before transaction, value = ${value}, quantity = ${quantity}`);\n  // log(`t = ${showObj(t)}`);\n  if (value === undefined) {\n    throw new Error(\n      `Bug : transacting to unvalued/string-valued asset ${showObj(moment)}`,\n    );\n  } else {\n    let change = 0;\n    // log(`t.TO_VALUE = ${t.TO_VALUE}`);\n    if (t.TO_ABSOLUTE) {\n      change = tToValue;\n    } else {\n      if (tToValue > 1.0) {\n        log(`WARNING : not-absolute value ${tToValue} > 1.0`);\n      }\n      // proportion of the amount taken from from_asset\n      change = tToValue * fromChange;\n    }\n    if (q) {\n      // log(`quantity = ${q} will increase by change = ${change}`);\n      q += change;\n      // log('in processTransactionTo, setValue:');\n      setValue(\n        values,\n        growths,\n        evaluations,\n        moment.date,\n        quantity + t.TO,\n        q,\n        model,\n        t.NAME,\n        '37', //callerID\n      );\n      const matchedAsset = model.assets.find(a => {\n        return a.NAME === t.TO;\n      });\n      if (matchedAsset) {\n        updatePurchaseValue(\n          matchedAsset,\n          values,\n          growths,\n          q / (q - change),\n          evaluations,\n          moment.date,\n          model,\n          t.NAME,\n        );\n      }\n    } else {\n      // log(`value = ${value} will increase by change = ${change}`);\n      value += change;\n      if(growthData(t.TO, growths, values).adjustForCPI){\n        const b = values.get(baseForCPI);\n        if (b && typeof b === 'number') {\n          value = value / b;\n          // log(`scaled value = ${value}`);\n        }\n      }\n      // log('in processTransactionTo, setValue:');\n      setValue(\n        values,\n        growths,\n        evaluations,\n        moment.date,\n        t.TO,\n        value,\n        model,\n        t.NAME,\n        '16', //callerID\n      );\n    }\n  }\n}\n\nfunction processTransactionMoment(\n  moment: Moment,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n  pensionTransactions: Transaction[],\n  liabliitiesMap: Map<string, string>,\n  liableIncomeInTaxYear: Map<string, Map<string, number>>,\n  liableIncomeInTaxMonth: Map<string, Map<string, number>>,\n) {\n  // log(`in processTransactionMoment`);\n  // transactions have a direct effect on their\n  // \"from\" and \"to\" assets.  Apply the transaction\n  // and set new asset values.\n  const t = moment.transaction;\n  if (t === undefined) {\n    throw Error('BUG!!! moment of type transaction should have a transaction');\n  }\n  // log(`process transaction ${showObj(t.NAME)}`);\n\n  // Some transactions are simple Revalues.  They have no\n  // FROM and a value for TO.  Code similar to application\n  // of growth to assets, except we know the new value.\n  if (\n    revalueApplied(\n      t,\n      moment,\n      values,\n      growths,\n      evaluations,\n      liableIncomeInTaxYear,\n      liableIncomeInTaxMonth,\n      model,\n    )\n  ) {\n    return;\n  }\n\n  // Determine how much to take off the From asset(s).\n  // Set the reduced value of the From asset accordingly.\n  if (t.FROM !== '') {\n    // we can sometimes see multiple 'FROM's\n    // handle one word at a time\n    let fromWords = t.FROM.split(separator);\n    fromWords = replaceCategoryWithAssetNames(fromWords, model);\n    for (const fromWord of fromWords) {\n      let toWords: string[] = [];\n      if (t.TO !== '') {\n        toWords = t.TO.split(separator);\n        toWords = replaceCategoryWithAssetNames(toWords, model);\n      } else {\n        toWords.push('');\n      }\n      // log(`transaction to \"${t.TO}\" as list ${toWords}`);\n      for (const toWord of toWords) {\n        // log(`process a transaction from word ${fromWord} to word ${toWord}`);\n        processTransactionFromTo(\n          t,\n          fromWord,\n          toWord,\n          moment,\n          values,\n          growths,\n          evaluations,\n          model,\n          pensionTransactions,\n          liabliitiesMap,\n          liableIncomeInTaxYear,\n          liableIncomeInTaxMonth,\n        );\n      }\n    }\n  } else if (t.FROM === '' && t.TO !== '') {\n    // log(`process a transaction from ${t.FROM} to ${t.TO}`);\n    processTransactionTo(t, moment, values, growths, evaluations, model);\n  }\n}\n\nfunction logPensionIncomeLiabilities(\n  t: Transaction,\n  liabilitiesMap: Map<string, string>,\n  model: ModelData,\n) {\n  // log(`see if ${t.NAME} needs a tax liability`);\n  // e.g. CrystallizedPensionJoe\n  let words = t.FROM.split(separator);\n\n  words = replaceCategoryWithAssetNames(words, model);\n\n  words.forEach(word => {\n    if (word.startsWith(crystallizedPension)) {\n      const removedCP = `${word.substr(crystallizedPension.length)}`;\n      const wds = removedCP.split(dot);\n      const liability = `${wds[0]}${incomeTax}`;\n      // e.g. IncomeTaxJoe\n      // log(`logging liability for ${word}, add to map: [${t.NAME+word}, ${liability}}`);\n      liabilitiesMap.set(t.NAME + word, liability);\n    }\n  });\n}\n\nfunction logAssetIncomeLiabilities(\n  a: Asset,\n  liabilitiesMap: Map<string, string>,\n) {\n  // log(`see if ${t.NAME} needs a tax liability`);\n  // e.g. CrystallizedPensionJoe\n  if (a.LIABILITY !== '') {\n    // log(`logging liability ${showObj(a)}`);\n    liabilitiesMap.set(a.NAME, a.LIABILITY);\n  } else if (a.NAME.startsWith(crystallizedPension)) {\n    const removedCP = `${a.NAME.substr(crystallizedPension.length)}`;\n    const wds = removedCP.split(dot);\n    const liability = `${wds[0]}${incomeTax}`;\n    // e.g. IncomeTaxJoe\n    liabilitiesMap.set(a.NAME, liability);\n  }\n}\n\nfunction logPurchaseValues(\n  a: Asset,\n  values: ValuesContainer,\n  growths: Map<string, GrowthData>,\n  evaluations: Evaluation[],\n  model: ModelData,\n) {\n  if (a.LIABILITY.includes(cgt)) {\n    let purchaseValue = 0.0;\n    if (isNumberString(a.PURCHASE_PRICE)) {\n      purchaseValue = parseFloat(a.PURCHASE_PRICE);\n    } else {\n      const tracedValue = traceEvaluation(\n        a.PURCHASE_PRICE,\n        values,\n        growths,\n        a.NAME,\n      );\n      if (tracedValue === undefined) {\n        throw new Error(\n          `BUG!! in logPurchaseValues, value of ${a.PURCHASE_PRICE} can't be understood`,\n        );\n      } else {\n        purchaseValue = tracedValue;\n      }\n    }\n    if (a.QUANTITY !== '') {\n      purchaseValue *= parseFloat(a.QUANTITY);\n    }\n    // log(`in logPurchaseValues, setValue: ${purchaseValue}`);\n    setValue(\n      values,\n      growths,\n      evaluations,\n      getTriggerDate(a.START, model.triggers),\n      `${purchase}${a.NAME}`,\n      purchaseValue,\n      model,\n      `${purchase}${a.NAME}`,\n      '17', //callerID\n    );\n  }\n}\nconst maxReportSize = 400;\n\nclass ValuesContainer {\n  private reportValues = new Map<string, number | string>([]);\n  private includeInReport: ReportValueChecker = (\n    name: string, // name of something which has a value\n    val: number | string,\n    date: Date,\n    source: string,\n  ) => {\n    if (printDebug()) {\n      log(`report for name = ${name}`);\n      log(`report for val = ${val}`);\n      log(`report for date = ${date}`);\n      log(`report for source = ${source}`);\n    }\n    return false;\n  };\n  private report: ReportDatum[] = [];\n\n  public setIncludeInReport(fn: ReportValueChecker) {\n    this.includeInReport = fn;\n    this.report = [];\n  }\n\n  public set(\n    name: string, // thing which has this value\n    val: number | string, // the value of the thing\n    growths: Map<string, GrowthData>,\n    date: Date,\n    source: string,\n    callerID: string,\n  ) {\n    const reportChange =\n      this.report.length < maxReportSize &&\n      this.includeInReport(name, val, date, source);\n    let oldVal: number | undefined = 0.0;\n    if (reportChange) {\n      oldVal = traceEvaluation(name, this, growths, 'debugReportOld');\n    }\n    this.reportValues.set(name, val);\n    if (reportChange) {\n      let newVal = traceEvaluation(name, this, growths, 'debugReportNew');\n      if (oldVal !== newVal) {\n        let change = undefined;\n        if (newVal !== undefined && oldVal !== undefined) {\n          change = newVal - oldVal;\n        }\n        let qchange: number | undefined = undefined;\n        let qoldVal: number | undefined = undefined;\n        let qnewVal: number | undefined = undefined;\n        if (name.startsWith(quantity)) {\n          name = name.substring(quantity.length, name.length);\n          qchange = change;\n          qoldVal = oldVal;\n          qnewVal = newVal;\n          change = undefined;\n          oldVal = undefined;\n          newVal = undefined;\n        }\n        this.report.push({\n          name: name,\n          change: change,\n          oldVal: oldVal,\n          newVal: newVal,\n          qchange: qchange,\n          qoldVal: qoldVal,\n          qnewVal: qnewVal,\n          date: date.toString(),\n          source: printDebug() ? source + callerID : source,\n        });\n      }\n    }\n  }\n\n  public get(key: string): number | string | undefined {\n    return this.reportValues.get(key);\n  }\n\n  public getReport(): ReportDatum[] {\n    //log(`this.values() = ${this.values()}`);\n    const estateVal = this.get('Estate');\n    if (estateVal !== undefined && typeof estateVal === 'number') {\n      // log(`estateVal = ${estateVal}`);\n      this.report.push({\n        name: 'Estate final value',\n        change: 0,\n        oldVal: 0,\n        newVal: estateVal,\n        qchange: 0,\n        qoldVal: 0,\n        qnewVal: 0,\n        date: '2999',\n        source: 'estate',\n      });\n    }\n    this.report.reverse();\n    return this.report;\n  }\n\n  public keys() {\n    return this.reportValues.keys();\n  }\n}\n\n// This is the key entry point for code calling from outside\n// this file.\nexport function getEvaluations(\n  model: ModelData,\n  reporter: ReportValueChecker | undefined,\n): {\n  evaluations: Evaluation[];\n  todaysAssetValues: Map<string, AssetVal>;\n  todaysDebtValues: Map<string, DebtVal>;\n  todaysIncomeValues: Map<string, IncomeVal>;\n  todaysExpenseValues: Map<string, ExpenseVal>;\n  todaysSettingValues: Map<string, SettingVal>;\n  reportData: ReportDatum[];\n} {\n  //log('get evaluations');\n  const todaysAssetValues = new Map<string, AssetVal>();\n  const todaysDebtValues = new Map<string, DebtVal>();\n  const todaysIncomeValues = new Map<string, IncomeVal>();\n  const todaysExpenseValues = new Map<string, ExpenseVal>();\n  const todaysSettingValues = new Map<string, SettingVal>();\n\n  const message = checkData(model);\n  if (message.length > 0) {\n    log(message);\n    return {\n      evaluations: [],\n      todaysAssetValues: todaysAssetValues,\n      todaysDebtValues: todaysDebtValues,\n      todaysIncomeValues: todaysIncomeValues,\n      todaysExpenseValues: todaysExpenseValues,\n      todaysSettingValues: todaysSettingValues,\n      reportData: [],\n    };\n  }\n  // log('in getEvaluations');\n  const roiStartDate: Date = makeDateFromString(\n    getSettings(model.settings, roiStart, '1 Jan 1999'),\n  );\n  const roiEndDate: Date = makeDateFromString(\n    getSettings(model.settings, roiEnd, '1 Jan 1999'),\n  );\n\n  if (printDebug()) {\n    log(`data = ${showObj(model)}`);\n  }\n\n  // Calculate a set of \"moments\" for each transaction/income/expense...\n  // each has a date - we'll process these in date order.\n  let allMoments: Moment[] = [];\n\n  // Calculate a monthly growth once per item,\n  // refer to this map for each indiviual moment.\n  const growths = new Map<string, GrowthData>();\n\n  // Record which items are liable for income tax.\n  // Map from income name to a person identifier.\n  // (e.g. \"PaperRound\", \"IncomeTaxJane\").\n  // (e.g. \"PaperRound\", \"NIJane\").\n  // (e.g. \"get some pension\", \"IncomeTaxJoe\" )\n  const liabilitiesMap = new Map<string, string>([]);\n\n  // Some transactions affect income processing.\n  const pensionTransactions: Transaction[] = [];\n\n  // Keep track of current value of any expense, income or asset\n  const values = new ValuesContainer();\n  if (reporter) {\n    values.setIncludeInReport(reporter);\n  }\n\n  const cpiInitialVal: number = parseFloat(\n    getSettings(model.settings, cpi, '0.0'),\n  );\n\n  // A historical record of evaluations (useful for creating trends or charts)\n  const evaluations: Evaluation[] = [];\n\n  // For each expense, work out monthly growth and\n  // a set of moments starting when the expense began,\n  // ending when the roi ends.\n  model.expenses.forEach(expense => {\n    // Growth is important to set the value of the\n    // first expense.  Later expense values are not\n    // set here, but the 'moment' at which the expense\n    // changes is set here.\n    let cpiVal = cpiInitialVal;\n    if (expense.CPI_IMMUNE) {\n      cpiVal = 0.0;\n    }\n    logExpenseGrowth(expense, cpiVal, growths);\n    const expenseStart = getTriggerDate(expense.START, model.triggers);\n    let shiftStartBackTo = new Date(expenseStart);\n\n    const expenseSetDate = getTriggerDate(expense.VALUE_SET, model.triggers);\n    // log(`income start is ${incomeStartDate.toDateString()}`);\n    // log(`value set is ${incomeSetDate.toDateString()}`);\n    // log(`shiftStartBackTo = ${shiftStartBackTo.toDateString()}`);\n    if (expenseSetDate < expenseStart && expenseSetDate < shiftStartBackTo) {\n      shiftStartBackTo = expenseSetDate;\n    }\n\n    shiftStartBackTo.setMonth(shiftStartBackTo.getMonth() + 1);\n    const startSequenceFrom = new Date(expenseStart);\n    let numAdjustments = 0;\n    while (shiftStartBackTo <= startSequenceFrom) {\n      // log(`shift ${incomeStartDate} back towards ${shiftStartBackTo}`);\n      startSequenceFrom.setMonth(startSequenceFrom.getMonth() - 1);\n      numAdjustments += 1;\n      if (numAdjustments > 1000) {\n        throw new Error(\n          `${expense.NAME} start ${expense.START} too far ` +\n            `from ${shiftStartBackTo}`,\n        );\n      }\n    }\n\n    // log(`expense start = ${expenseStart}`);\n    const newMoments = getRecurrentMoments(\n      expense,\n      momentType.expensePrep,\n      momentType.expense,\n      model.triggers,\n      startSequenceFrom,\n      expenseStart,\n      roiEndDate,\n      expense.RECURRENCE,\n    );\n    allMoments = allMoments.concat(newMoments);\n  });\n\n  // For each income, work out monthly growth and\n  // a set of moments starting when the income began,\n  // ending when the roi ends.\n  model.incomes.forEach(income => {\n    // log(`generate moments for income ${income.NAME}`);\n    // Growth is important to set the value of the\n    // first income.  Later income values are not\n    // set here, but the 'moment' at which the income\n    // changes is set here.\n    let cpiVal = cpiInitialVal;\n    if (income.CPI_IMMUNE) {\n      cpiVal = 0.0;\n    }\n    logIncomeGrowth(income, cpiVal, growths);\n    const incomeStart = getTriggerDate(income.START, model.triggers);\n    let shiftStartBackTo = new Date(incomeStart);\n\n    const dbTransaction = model.transactions.find(t => {\n      return t.NAME.startsWith(pensionDB) && t.TO === income.NAME;\n    });\n    if (dbTransaction !== undefined) {\n      const sourceIncome = model.incomes.find(i => {\n        return dbTransaction.FROM === i.NAME;\n      });\n      if (sourceIncome === undefined) {\n        log(\n          `Error: DB transaction ${dbTransaction.NAME} ` +\n            `with no source income`,\n        );\n        throw new Error(\n          `Error: DB transaction ${dbTransaction.NAME} ` +\n            `with no source income`,\n        );\n      }\n      shiftStartBackTo = getTriggerDate(sourceIncome.START, model.triggers);\n    }\n\n    const incomeSetDate = getTriggerDate(income.VALUE_SET, model.triggers);\n    // log(`income start is ${incomeStartDate.toDateString()}`);\n    // log(`value set is ${incomeSetDate.toDateString()}`);\n    // log(`shiftStartBackTo = ${shiftStartBackTo.toDateString()}`);\n    if (incomeSetDate < incomeStart && incomeSetDate < shiftStartBackTo) {\n      shiftStartBackTo = incomeSetDate;\n    }\n\n    // log(`income start is ${incomeStartDate.toDateString()}\n    //  but shift back to ${shiftStartBackTo}`);\n\n    shiftStartBackTo.setMonth(shiftStartBackTo.getMonth() + 1);\n    const startSequenceFrom = new Date(incomeStart);\n    let numAdjustments = 0;\n    while (shiftStartBackTo <= startSequenceFrom) {\n      // log(`shift ${startSequenceFrom} back towards ${shiftStartBackTo}`);\n      startSequenceFrom.setMonth(startSequenceFrom.getMonth() - 1);\n      numAdjustments += 1;\n      if (numAdjustments > 1000) {\n        throw new Error(\n          `${income.NAME} start ${income.START} too far ` +\n            `from ${shiftStartBackTo}`,\n        );\n      }\n    }\n    const newMoments = getRecurrentMoments(\n      income,\n      momentType.incomePrep,\n      momentType.income,\n      model.triggers,\n      startSequenceFrom,\n      incomeStart,\n      roiEndDate,\n      '1m', // all incomes are received monthly\n    );\n    allMoments = allMoments.concat(newMoments);\n    liabilitiesMap.set(income.NAME, income.LIABILITY);\n  });\n\n  // log(`liabilitiesMap = ...`);\n  // liabilitiesMap.forEach((value, key)=>{log(`{\\`${key}\\`, \\`${value}\\`}`)});\n\n  model.assets.forEach(asset => {\n    //  log(`log data for asset ${asset.NAME}`);\n    logAssetGrowth(\n      asset,\n      asset.CPI_IMMUNE ? 0 : cpiInitialVal,\n      growths,\n      model.settings,\n    );\n\n    logAssetValueString(\n      asset.VALUE,\n      asset.START,\n      asset.NAME,\n      values,\n      growths,\n      evaluations,\n      model,\n    );\n\n    const newMoments = getAssetMonthlyMoments(\n      asset,\n      model.triggers,\n      roiEndDate,\n    );\n    allMoments = allMoments.concat(newMoments);\n\n    logAssetIncomeLiabilities(asset, liabilitiesMap);\n  });\n\n  model.transactions.forEach(transaction => {\n    // one-off asset-asset transactions generate a single moment\n    // recurring asset-asset transactions generate a sequence of moments\n    const newMoments = getTransactionMoments(\n      transaction,\n      model.triggers,\n      roiEndDate,\n    );\n    allMoments = allMoments.concat(newMoments);\n\n    // some transactions affect income processing\n    // (e.g. diverting income to pensions)\n    if (\n      transaction.NAME.startsWith(pension) ||\n      transaction.NAME.startsWith(pensionSS) ||\n      transaction.NAME.startsWith(pensionDB)\n    ) {\n      pensionTransactions.push(transaction);\n    }\n\n    // some transactions out of pensions are liable to incometax\n    logPensionIncomeLiabilities(transaction, liabilitiesMap, model);\n  });\n\n  const setSettingsData: {\n    settingName: string;\n    settingVal: string;\n    setDate: Date;\n  }[] = [];\n  model.settings.forEach(setting => {\n    if (setting.NAME === 'Grain') {\n      setValue(\n        values,\n        growths,\n        evaluations,\n        roiStartDate,\n        setting.NAME,\n        setting.VALUE,\n        model,\n        setting.NAME,\n        '35', //callerID\n      );\n    }\n    let referencingPrices = model.assets.filter(a => {\n      return a.PURCHASE_PRICE === setting.NAME;\n    });\n    referencingPrices = referencingPrices.sort();\n    if (\n      referencingPrices.length > 0 &&\n      values.get(setting.NAME) === undefined\n    ) {\n      setValue(\n        values,\n        growths,\n        evaluations,\n        roiStartDate,\n        setting.NAME,\n        setting.VALUE,\n        model,\n        setting.NAME,\n        '36', //callerID\n      );\n    }\n\n    let referencingDates = model.transactions\n      .filter(t => {\n        // log(`is setting ${setting.NAME} in t.TO  = ${t.TO}?`);\n        // does the setting name appear as part of the transaction TO value?\n        if (\n          t.TO_VALUE.includes(setting.NAME) ||\n          t.TO.includes(setting.NAME) ||\n          t.FROM_VALUE.includes(setting.NAME) ||\n          t.FROM.includes(setting.NAME)\n        ) {\n          return true;\n        }\n        return false;\n      })\n      .map(t => {\n        // log(`date for matching transaction is ${t.DATE}`);\n        return t.DATE;\n      })\n      //.map(ds => getTriggerDate(ds, model.triggers));\n      .map(ds => new Date(ds));\n\n    // log(`got referencing dates ${showObj(referencingDates)}`);\n    referencingDates = referencingDates.concat(\n      model.assets\n        .filter(a => {\n          if (a.GROWTH === setting.NAME) {\n            return true;\n          }\n          return false;\n        })\n        .map(a => a.START)\n        .map(ds => getTriggerDate(ds, model.triggers)),\n    );\n\n    // log(`referencingDates for ${setting.NAME} = ${referencingDates.map(d=>d.toDateString())}`);\n    referencingDates = referencingDates.sort();\n    if (referencingDates.length > 0 && values.get(setting.NAME) === undefined) {\n      // log(`setValue ${setting.NAME} = ${setting.VALUE}`);\n      setSettingsData.push({\n        settingName: setting.NAME,\n        settingVal: setting.VALUE,\n        setDate: referencingDates[0],\n      });\n    }\n  });\n  model.settings.forEach(s => {\n    if (\n      !setSettingsData.find(sd => {\n        return sd.settingName === s.NAME;\n      })\n    ) {\n      // log(`should we add setValue ${s.NAME} = ${s.VALUE}?`);\n      // s isn't being set in setSettingsData\n      // should we include it?\n      // We need it if something in setSettingsData\n      // builds on it\n      const match = setSettingsData.find(ss => {\n        const nameIncluded = ss.settingVal.includes(s.NAME);\n        // log(`${ss.settingVal} ? includes ${s.NAME} = ${nameIncluded}`);\n        return nameIncluded;\n      });\n      if (match) {\n        // ok, add this too\n        // log(`add dependent setValue ${s.NAME} = ${s.VALUE}`);\n        setSettingsData.push({\n          settingName: s.NAME,\n          settingVal: s.VALUE,\n          setDate: match.setDate,\n        });\n      }\n    }\n  });\n\n  setSettingsData.forEach(d => {\n    setValue(\n      values,\n      growths,\n      evaluations,\n      d.setDate,\n      d.settingName,\n      d.settingVal,\n      model,\n      d.settingName,\n      '18', //callerID\n    );\n  });\n\n  // might be set using a settings value\n  const today = getTodaysDate(model);\n\n  if (roiEndDate > today) {\n    allMoments.push({\n      date: today,\n      name: EvaluateAllAssets,\n      type: momentType.asset,\n      setValue: 0,\n      transaction: undefined,\n    });\n  }\n\n  // log(`pensionTransactions = ${showObj(pensionTransactions)}`);\n\n  let datedMoments = allMoments.filter(moment => moment.date !== undefined);\n\n  // Process the moments in date order\n  sortByDate(datedMoments);\n\n  if (datedMoments.length > 0) {\n    // log(`add moments for updating base values, cpiInitialVal = ${cpiInitialVal}`);\n\n    values.set(\n      cpi,\n      cpiInitialVal,\n      growths,\n      datedMoments[0].date,\n      'start value',\n      '0',\n    );\n    values.set(\n      baseForCPI,\n      1.0,\n      growths,\n      datedMoments[0].date,\n      'start value',\n      '0',\n    );\n\n    const first = datedMoments[0].date;\n    const last = datedMoments[datedMoments.length - 1].date;\n    // log(`base will get updated from ${last} to ${first}`);\n    const infUpdateDates = generateSequenceOfDates(\n      {\n        start: last,\n        end: first,\n      },\n      '1m',\n    );\n    const infMoments: Moment[] = infUpdateDates.map(date => {\n      const typeForMoment = momentType.inflation;\n      const result: Moment = {\n        date,\n        name: cpi,\n        type: typeForMoment,\n        setValue: NaN,\n        transaction: undefined,\n      };\n      return result;\n    });\n    datedMoments = datedMoments.concat(infMoments);\n    // log(`with moments for updating base values, have ${datedMoments.length}`);\n\n    const needPredictedTaxBands = new Date(highestTaxYearInMap, 3, 5);\n    if (needPredictedTaxBands < roiEndDate) {\n      const d = new Date(highestTaxYearInMap, 3, 4);\n      // log(`prepare to log tax band values at ${d.toDateString()}`);\n      datedMoments.push({\n        date: d,\n        name: 'captureLastTaxBands',\n        type: momentType.inflation,\n        setValue: NaN,\n        transaction: undefined,\n      });\n    } else {\n      // log(`roiEndDate = ${roiEndDate.toDateString()} won't need predicted tax bands`);\n    }\n    sortByDate(datedMoments);\n  }\n\n  let startYearOfTaxYear;\n  let monthOfTaxYear;\n  if (datedMoments.length > 0) {\n    startYearOfTaxYear = getYearOfTaxYear(\n      datedMoments[datedMoments.length - 1].date,\n    );\n    monthOfTaxYear = getMonthOfTaxYear(\n      datedMoments[datedMoments.length - 1].date,\n    );\n  }\n  // we track different types of income liability for different individuals\n  // the outer map has a key for \"cgt\", \"incomeTax\" and \"NI\".\n  // the inner map has a key for the person who is liable to pay and\n  // a value for the accrued liable value as a tax year progresses\n  const liableIncomeInTaxYear = new Map<string, Map<string, number>>();\n  // we track different types of income liability for different individuals\n  // for monthly income tax payments, we only need a map from\n  // the person who is liable to pay and\n  // a value for the accrued liable value as a tax month progresses\n  const liableIncomeInTaxMonth = new Map<string, Map<string, number>>();\n  const taxMonthlyPaymentsPaid = new Map<string, Map<string, number>>();\n\n  // log(`gathered ${datedMoments.length} moments to process`);\n  while (datedMoments.length > 0) {\n    const moment = datedMoments.pop();\n    if (moment === undefined) {\n      throw new Error('BUG!!! array length > 0 should pop!');\n    }\n\n    // Each moment we process is in dated order.\n    if (printDebug()) {\n      log(\n        `popped moment is ${showObj({\n          date: moment.date.toDateString(),\n          name: moment.name,\n          type: moment.type,\n          setValue: moment.setValue,\n        })}`,\n      );\n    }\n    // log(`${datedMoments.length} moments left`);\n    // log(`moment.date is ${moment.date.toDateString()}`);\n    if (moment.name === EvaluateAllAssets) {\n      model.assets.forEach(asset => {\n        let val = values.get(asset.NAME);\n        if (typeof val === 'string') {\n          val = traceEvaluation(val, values, growths, val);\n        }\n        const q = getQuantity(asset.NAME, values, model);\n        if (q !== undefined && val !== undefined) {\n          val *= q;\n        }\n        if (val !== undefined) {\n          if (asset.IS_A_DEBT) {\n            todaysDebtValues.set(asset.NAME, {\n              debtVal: val,\n              category: asset.CATEGORY,\n            });\n          } else {\n            todaysAssetValues.set(asset.NAME, {\n              assetVal: val,\n              assetQ: q,\n              category: asset.CATEGORY,\n            });\n          }\n          // log(`asset ${asset.NAME} has value ${val}`);\n        } else {\n          // log(`don't report undefined today's value for ${asset.NAME}`);\n        }\n      });\n      model.incomes.forEach(i => {\n        const startDate = checkTriggerDate(i.START, model.triggers);\n        if (startDate !== undefined && startDate > today) {\n          todaysIncomeValues.set(i.NAME, {\n            incomeVal: 0,\n            category: i.CATEGORY,\n          });\n          return;\n        }\n        const endDate = checkTriggerDate(i.END, model.triggers);\n        if (endDate !== undefined && endDate < today) {\n          todaysIncomeValues.set(i.NAME, {\n            incomeVal: 0,\n            category: i.CATEGORY,\n          });\n          return;\n        }\n        // log(`income ${i.NAME} ends at ${i.END} not yet ended at ${today}`);\n        let val = values.get(i.NAME);\n        if (typeof val === 'string') {\n          val = traceEvaluation(val, values, growths, val);\n        }\n        if (val !== undefined) {\n          todaysIncomeValues.set(i.NAME, {\n            incomeVal: val,\n            category: i.CATEGORY,\n          });\n        } else {\n          // log(`don't report undefined today's value for ${i.NAME}`);\n        }\n      });\n      model.expenses.forEach(e => {\n        const startDate = checkTriggerDate(e.START, model.triggers);\n        if (startDate !== undefined && startDate > today) {\n          todaysExpenseValues.set(e.NAME, {\n            expenseVal: 0,\n            category: e.CATEGORY,\n            expenseFreq: e.RECURRENCE,\n          });\n          return;\n        }\n        const endDate = checkTriggerDate(e.END, model.triggers);\n        if (endDate !== undefined && endDate < today) {\n          todaysExpenseValues.set(e.NAME, {\n            expenseVal: 0,\n            category: e.CATEGORY,\n            expenseFreq: e.RECURRENCE,\n          });\n          return;\n        }\n        let val = values.get(e.NAME);\n        if (typeof val === 'string') {\n          val = traceEvaluation(val, values, growths, val);\n        }\n        if (val !== undefined) {\n          // log(`expense for todays value ${showObj(e)}`);\n          todaysExpenseValues.set(e.NAME, {\n            expenseVal: val,\n            expenseFreq: e.RECURRENCE,\n            category: e.CATEGORY,\n          });\n        } else {\n          // log(`don't report undefined today's value for ${e.NAME}`);\n        }\n      });\n      model.settings.forEach(s => {\n        const val = values.get(s.NAME);\n        if (val !== undefined) {\n          todaysSettingValues.set(s.NAME, { settingVal: `${val}` });\n        } else {\n          // log(`don't report undefined today's value for ${s.NAME}`);\n        }\n      });\n    }\n\n    // Detect if this date has brought us into a new tax year.\n    // At a change of tax year, log last year's accrual\n    // and start a fresh accrual for the next year.\n    const momentsTaxYear = getYearOfTaxYear(moment.date);\n    const momentsTaxMonth = getMonthOfTaxYear(moment.date);\n    // log(`momentsTaxMonth = ${momentsTaxMonth}, momentsTaxYear = ${momentsTaxYear}`);\n    const enteringNewTaxYear =\n      startYearOfTaxYear !== undefined && momentsTaxYear > startYearOfTaxYear;\n    const enteringNewTaxMonth =\n      startYearOfTaxYear !== undefined &&\n      monthOfTaxYear !== undefined &&\n      momentsTaxMonth !== monthOfTaxYear;\n\n    if (\n      startYearOfTaxYear !== undefined &&\n      monthOfTaxYear !== undefined &&\n      enteringNewTaxMonth\n    ) {\n      // log(`${momentsTaxMonth} is beyond ${monthOfTaxYear} for ${moment.date.toDateString()}`);\n      payNIEstimate(\n        liableIncomeInTaxMonth,\n        taxMonthlyPaymentsPaid,\n        startYearOfTaxYear,\n        monthOfTaxYear,\n        values,\n        growths,\n        evaluations,\n        model,\n      );\n    } else {\n      // log(`waiting for ${momentsTaxMonth} to get beyond ${monthOfTaxYear} for ${moment.date.toDateString()}`);\n    }\n\n    if (startYearOfTaxYear !== undefined && enteringNewTaxYear) {\n      // change of tax year - report count of moments\n      // log('change of tax year...');\n      settleUpTax(\n        liableIncomeInTaxYear,\n        liableIncomeInTaxMonth,\n        taxMonthlyPaymentsPaid,\n        startYearOfTaxYear,\n        values,\n        growths,\n        evaluations,\n        model,\n      );\n      startYearOfTaxYear = momentsTaxYear;\n      monthOfTaxYear = 3; // new tax year\n    }\n    if (\n      startYearOfTaxYear !== undefined &&\n      monthOfTaxYear !== undefined &&\n      enteringNewTaxMonth\n    ) {\n      // log(`${momentsTaxMonth} is beyond ${monthOfTaxYear} for ${moment.date.toDateString()}`);\n      payTaxEstimate(\n        liableIncomeInTaxMonth,\n        taxMonthlyPaymentsPaid,\n        startYearOfTaxYear,\n        monthOfTaxYear,\n        values,\n        growths,\n        evaluations,\n        model,\n      );\n    } else {\n      // log(`waiting for ${momentsTaxMonth} to get beyond ${monthOfTaxYear} for ${moment.date.toDateString()}`);\n    }\n    if (enteringNewTaxYear || enteringNewTaxMonth) {\n      monthOfTaxYear = momentsTaxMonth;\n    }\n\n    if (moment.name === cpi) {\n      // increment base (which started as 1.0) according to inflation value\n      // at this moment in time\n\n      const baseObj = getNumberValue(values, baseForCPI);\n      const infObj = getNumberValue(values, cpi);\n\n      if (baseObj !== undefined && infObj !== undefined) {\n        const newValue = baseObj * (1.0 + getMonthlyGrowth(infObj));\n        // log(`time to update base using ${infObj} from ${baseObj} to ${newValue}`);\n        // log(`newValue = ${newValue}`);\n        values.set(\n          baseForCPI,\n          newValue,\n          growths,\n          moment.date,\n          'baseChange',\n          '38', //callerID\n        );\n      } else {\n        log(\n          `BUG: missing baseObj or infObj for CPI handling; ${baseObj}, ${infObj}`,\n        );\n      }\n    } else if (moment.name === 'captureLastTaxBands') {\n      // log(`at ${moment.date.toDateString()}, go log tax band values to get inflated values later`);\n      const resultFromMap = TAX_MAP[`${highestTaxYearInMap}`];\n      const baseVal = getNumberValue(values, baseForCPI);\n      if (resultFromMap !== undefined && baseVal !== undefined) {\n        // log(`map vals at ${startYearOfTaxYear}, ${makeTwoDP(resultFromMap.noTaxBand)}, ${makeTwoDP(resultFromMap.lowTaxBand)}, ${makeTwoDP(resultFromMap.highTaxBand)}, ${makeTwoDP(resultFromMap.adjustNoTaxBand)}`);\n        // log(`scale last tax bands by / baseVal = ${baseVal}`);\n        const noTaxBand = resultFromMap.noTaxBand / baseVal;\n        const lowTaxBand = resultFromMap.lowTaxBand / baseVal;\n        const highTaxBand = resultFromMap.highTaxBand / baseVal;\n        const adjustNoTaxBand = resultFromMap.adjustNoTaxBand / baseVal;\n        const noNIBand = resultFromMap.noNIBand / baseVal;\n        const lowNIBand = resultFromMap.lowNIBand / baseVal;\n        values.set(\n          'noTaxBand',\n          noTaxBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        values.set(\n          'lowTaxBand',\n          lowTaxBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        values.set(\n          'highTaxBand',\n          highTaxBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        values.set(\n          'adjustNoTaxBand',\n          adjustNoTaxBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        values.set(\n          'noNIBand',\n          noNIBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        values.set(\n          'lowNIBand',\n          lowNIBand,\n          growths,\n          moment.date,\n          moment.name,\n          '39', //callerID\n        );\n        // log(`in vals at ${startYearOfTaxYear}, ${makeTwoDP(noTaxBand)}, ${makeTwoDP(lowTaxBand)}, ${makeTwoDP(highTaxBand)}, ${makeTwoDP(adjustNoTaxBand)}`);\n      } else {\n        log('BUG : undefined resultFromMap or baseVal');\n      }\n    } else if (moment.type === momentType.transaction) {\n      // log(`this is a transaction`);\n      processTransactionMoment(\n        moment,\n        values,\n        growths,\n        evaluations,\n        model,\n        pensionTransactions,\n        liabilitiesMap,\n        liableIncomeInTaxYear,\n        liableIncomeInTaxMonth,\n      );\n    } else if (\n      moment.type === momentType.expenseStart ||\n      moment.type === momentType.expenseStartPrep ||\n      moment.type === momentType.incomeStart ||\n      moment.type === momentType.incomeStartPrep ||\n      moment.type === momentType.assetStart\n    ) {\n      // Starts are well defined\n      // log(`start moment ${moment.name}, ${moment.type}, ${moment.date}`)\n      if (moment.setValue === undefined) {\n        log('BUG!!! starts of income/asset/expense should have a value!');\n        break;\n      }\n      // Log quantities for assets which have them; needed for setting value.\n      if (moment.type === momentType.assetStart) {\n        // log(`at start of asset ${moment.name}`);\n        const startQ = getStartQuantity(moment.name, model);\n        if (startQ !== undefined) {\n          // log(`set quantity of asset ${moment.name} = ${startQ}`);\n          setValue(\n            values,\n            growths,\n            evaluations,\n            moment.date,\n            quantity + moment.name, // value of what?\n            startQ,\n            model,\n            moment.name, // source\n            '19', //callerID\n          );\n        }\n        const matchingAsset: Asset[] = model.assets.filter(a => {\n          return a.NAME === moment.name;\n        });\n        if (matchingAsset.length === 1) {\n          const a = matchingAsset[0];\n          // log(`matched asset for start`);\n          logPurchaseValues(a, values, growths, evaluations, model);\n        } else {\n          throw new Error(`BUG!!! '${moment.name}' doesn't match one asset`);\n        }\n      }\n      const startValue = moment.setValue;\n      let valueToStore = startValue;\n      if (growthData(moment.name, growths, values).adjustForCPI) {\n        // log(`start value for ${valueToStore} needs adjusting for CPI`);\n        let valueToScale: number | undefined;\n        if (typeof valueToStore === 'number') {\n          valueToScale = valueToStore;\n        } else if (isNumberString(valueToStore)) {\n          valueToScale = parseFloat(valueToStore);\n        }\n        if (valueToScale !== undefined) {\n          const scaleBy = getNumberValue(values, baseForCPI);\n          if (scaleBy) {\n            // log(`divide ${valueToStore} by base value ${scaleBy} to store ${valueToScale / scaleBy}`);\n            valueToStore = valueToScale / scaleBy;\n            // log(`divided result is ${valueToStore}`);\n          }\n        } else {\n          log(`don't scale something that's not a number`);\n        }\n      }\n      // log(`in getEvaluations starting something: ${moment.name} with value ${startValue}`);\n      if (\n        moment.type === momentType.incomeStartPrep ||\n        moment.type === momentType.expenseStartPrep\n      ) {\n        values.set(\n          moment.name,\n          valueToStore,\n          growths,\n          moment.date,\n          moment.name, // e.g. Cash (it's just the starting value)\n          '20', //callerID\n        );\n      } else {\n        setValue(\n          values,\n          growths,\n          evaluations,\n          moment.date,\n          moment.name,\n          valueToStore,\n          model,\n          moment.name, // e.g. Cash (it's just the starting value)\n          '20', //callerID\n        );\n      }\n      if (moment.type === momentType.incomeStart) {\n        const numberVal = traceEvaluation(\n          startValue,\n          values,\n          growths,\n          moment.name,\n        );\n        if (numberVal !== undefined) {\n          // log(`income numberVal = ${numberVal}`);\n          handleIncome(\n            numberVal,\n            moment,\n            values,\n            growths,\n            evaluations,\n            model,\n            pensionTransactions,\n            liabilitiesMap,\n            liableIncomeInTaxYear,\n            liableIncomeInTaxMonth,\n            moment.name,\n          );\n        } else {\n          throw new Error(`can't interpret ${startValue} as a number`);\n        }\n      } else if (moment.type === momentType.expenseStart) {\n        ////////////////// ???? startPrep or not ????\n        // log('in getEvaluations, adjustCash:');\n        adjustCash(\n          -startValue,\n          moment.date,\n          values,\n          growths,\n          evaluations,\n          model,\n          moment.name,\n        );\n      }\n    } else if (moment.type !== momentType.inflation) {\n      // not a transaction\n      // not at start of expense/income/asset\n      const visiblePoundValue: string | number | undefined = traceEvaluation(\n        moment.name,\n        values,\n        growths,\n        moment.name,\n      );\n      // log(`oldStoredNumberVal of ${moment.name} is ${oldStoredNumberVal}`);\n      if (visiblePoundValue === undefined) {\n        const val = values.get(moment.name);\n        if (val !== undefined) {\n          setValue(\n            values,\n            growths,\n            evaluations,\n            moment.date,\n            moment.name,\n            val,\n            model,\n            growth,\n            '21', //callerID\n          );\n        }\n      } else {\n        const growthObj = growthData(moment.name, growths, values);\n        const baseVal = getNumberValue(values, baseForCPI);\n        // log(`baseVal = ${baseVal}`);\n        let oldStoredNumberVal = visiblePoundValue;\n        if (visiblePoundValue && growthObj && growthObj.adjustForCPI && baseVal) {\n          oldStoredNumberVal /= baseVal;\n        }\n        // log(`growthObj for ${moment.name} = ${showObj(growthObj)}`);\n        if (!growthObj) {\n          log(`BUG : missing growth for ${moment.name}`);\n        } else {\n          // We _do_ want to log changes of 0\n          // because this is how we generate monthly\n          // data to plot.  Set these here and call setValues later,\n          // even if these haven't changed.\n          let changedToStoredValue = 0.0;\n          let changeToVisibleCash = 0.0;\n\n          const growthChangeScale = growthObj.scale;\n\n          //if(growthObj.applyCPI && baseVal !== 1.0 && growthChangeScale !== 0 && moment.type !== momentType.expense){\n          //  throw new Error(`cpi computation for ${moment.type} has baseVal = ${baseVal}, growthChangeScale = ${growthChangeScale}`);\n          //}\n          if (printDebug()) {\n            log(`growthChangeScale = ${growthChangeScale}`);\n          }\n          if (growthChangeScale !== 0) {\n            changedToStoredValue = oldStoredNumberVal * growthChangeScale;\n            changeToVisibleCash = changedToStoredValue;\n            // log(`for ${growthChangeScale}, changedToStoredValue is ${changedToStoredValue}`);\n          }\n\n          let cPIChange = 0.0;\n          // log(`moment.type = ${moment.type}`);\n          if (growthObj.adjustForCPI) {\n            // log(`do work on a CPI change for ${moment.name}`);\n            if (!baseVal) {\n              log(`Bug - missing or zero baseVal`);\n            } else if (baseVal !== 1.0) {\n              cPIChange = oldStoredNumberVal * (baseVal - 1.0);\n              changeToVisibleCash = changedToStoredValue;\n              // log(`from baseVal ${baseVal}, real value adds ${cPIChange} to stored ${oldStoredNumberVal} to give ${cPIChange + oldStoredNumberVal}` );\n              // log(`from baseVal ${baseVal}, real growth value is ${growthChangeAsIncome} to give ${cPIChange + oldStoredNumberVal + growthChangeAsIncome}` );\n            }\n          }\n\n          // When we store back the value, don't apply CPI change, use growthChangeToStore.\n          // When we use the value to affect cash, do apply the CPI change, use cPIChange and growthChangeAsIncome.\n\n          let valToStore: string | number = oldStoredNumberVal;\n          if (changedToStoredValue === 0.0) {\n            // recover pre-existing value (don't save back as number value)\n            const storedVal = values.get(moment.name);\n            if (storedVal !== undefined) {\n              valToStore = storedVal;\n            }\n          } else {\n            valToStore += changedToStoredValue;\n            // log(`val to store at ${moment.date} = ${valToStore}`);\n          }\n\n          // We _do_ want to log changes of 0\n          // because this is how we generate monthly\n          // data to plot.\n          // if(change!==0){ // we _do_ want to log no-change evaluations!\n          // log(`in getEvaluations: log changes for moment.type = ${moment.type}`);\n          if (\n            moment.type === momentType.expensePrep ||\n            (moment.type === momentType.incomePrep &&\n              !moment.name.startsWith(pensionDB))\n          ) {\n            // log(`quietly set the value of ${moment.name} as ${valToStore}`);\n            values.set(\n              moment.name,\n              valToStore,\n              growths,\n              moment.date,\n              growth,\n              '22', //callerID\n            );\n          } else {\n            // log(`set the value of ${moment.name} as ${valToStore}`);\n            setValue(\n              values,\n              growths,\n              evaluations,\n              moment.date,\n              moment.name,\n              valToStore,\n              model,\n              growth,\n              '22', //callerID\n            );\n          }\n          // }\n          if (moment.type === momentType.asset) {\n            // some assets experience growth which is\n            // liable for tax\n            // log(`asset moment for growth : ${moment.date}, ${moment.name}`);\n            const changeToCash = cPIChange + changeToVisibleCash;\n            if (\n              moment.name.startsWith(crystallizedPension) &&\n              changeToCash > 0\n            ) {\n              // log(`skip asset moment for growth : ${moment.date}, ${moment.name}, ${change}`);\n            } else {\n              handleIncome(\n                changeToCash,\n                moment,\n                values,\n                growths,\n                evaluations,\n                model,\n                pensionTransactions,\n                liabilitiesMap,\n                liableIncomeInTaxYear,\n                liableIncomeInTaxMonth,\n                moment.name,\n              );\n            }\n          } else if (moment.type === momentType.income) {\n            const changeToCash =\n              oldStoredNumberVal + cPIChange + changeToVisibleCash;\n            handleIncome(\n              changeToCash,\n              moment,\n              values,\n              growths,\n              evaluations,\n              model,\n              pensionTransactions,\n              liabilitiesMap,\n              liableIncomeInTaxYear,\n              liableIncomeInTaxMonth,\n              moment.name,\n            );\n          } else if (moment.type === momentType.expense) {\n            // log('in getEvaluations, adjustCash:');\n            const changeToCash =\n              oldStoredNumberVal + cPIChange + changeToVisibleCash;\n            adjustCash(\n              -changeToCash,\n              moment.date,\n              values,\n              growths,\n              evaluations,\n              model,\n              moment.name,\n            );\n          }\n        }\n        if (printDebug()) {\n          log(`${moment.date.toDateString()},\n                    ${moment.name},\n                    value = ${values.get(moment.name)}`);\n        }\n      }\n    }\n\n    // Catch any tax information if we've just processed the last\n    // of the moments.\n    if (startYearOfTaxYear !== undefined && datedMoments.length === 0) {\n      // change of tax year - report count of moments\n      // log('last item in tax year...');\n      settleUpTax(\n        liableIncomeInTaxYear,\n        liableIncomeInTaxMonth,\n        taxMonthlyPaymentsPaid,\n        startYearOfTaxYear,\n        values,\n        growths,\n        evaluations,\n        model,\n      );\n    } else if (datedMoments.length === 0) {\n      // log('last item mo tax info...');\n    }\n  }\n\n  if (printDebug()) {\n    evaluations.forEach(evalns => {\n      log(showObj(evalns));\n    });\n  }\n  // log(`getEvaluations returning ${evaluations.length} evaluations`);\n\n  const report = values.getReport();\n  const result = {\n    evaluations: evaluations,\n    todaysAssetValues: todaysAssetValues,\n    todaysDebtValues: todaysDebtValues,\n    todaysIncomeValues: todaysIncomeValues,\n    todaysExpenseValues: todaysExpenseValues,\n    todaysSettingValues: todaysSettingValues,\n    reportData: report,\n  };\n  // log(`result.reportData.length = ${result.reportData.length}`);\n  return result;\n}\n","import {\n  CASH_ASSET_NAME,\n  assetChartFocus,\n  chartViewType,\n  autogen,\n  birthDate,\n  cgt,\n  conditional,\n  cpi,\n  crystallizedPension,\n  custom,\n  debtChartFocus,\n  expenseChartFocus,\n  incomeChartFocus,\n  incomeTax,\n  liquidateAsset,\n  moveTaxFreePart,\n  nationalInsurance,\n  payOffDebt,\n  pension,\n  pensionDB,\n  pensionSS,\n  pensionTransfer,\n  purchase,\n  quantity,\n  revalue,\n  revalueAsset,\n  revalueDebt,\n  revalueExp,\n  revalueInc,\n  revalueSetting,\n  roiEnd,\n  roiStart,\n  separator,\n  taxChartFocusType,\n  taxFree,\n  taxPot,\n  transferCrystallizedPension,\n  viewDetail,\n  viewFrequency,\n} from '../localization/stringConstants';\nimport {\n  Asset,\n  Expense,\n  Income,\n  ModelData,\n  Setting,\n  Transaction,\n  Trigger,\n  Evaluation,\n} from '../types/interfaces';\nimport { log, showObj } from '../utils';\n\nimport { evaluationType } from './evaluations';\nimport { getDisplayName } from '../views/tablePages';\nimport {\n  getTriggerDate,\n  makeDateFromString,\n  getNumberAndWordParts,\n  checkTriggerDate,\n} from '../stringUtils';\nimport {\n  getSettings,\n  isAnAssetOrAssets,\n  isAnIncome,\n  isADebt,\n  isAnExpense,\n  replaceCategoryWithAssetNames,\n} from './modelUtils';\n\nconst numberStringCache = new Map<string, boolean>();\n\n// let numCachedResults = 0;\n// let numComputedResults = 0;\nexport function isNumberString(input: string) {\n  if (input === '' || input === undefined) {\n    return false;\n  }\n  if (typeof input === 'number') {\n    return input;\n  }\n  const numberStringCacheResult = numberStringCache.get(input);\n  if (numberStringCacheResult !== undefined) {\n    // numCachedResults = numCachedResults + 1;\n    // log(`cached = ${numCachedResults}, computed = ${numComputedResults}`);\n    return numberStringCacheResult;\n  }\n  // numComputedResults = numComputedResults + 1;\n  // log(`cached = ${numCachedResults}, computed = ${numComputedResults}`);\n\n  if (!input.replace) {\n    log(`input has no replace; ${input}`);\n    return '';\n  }\n  const re = new RegExp('^[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)$');\n  const result = input.replace(re, '');\n  const outcome = result === '';\n  numberStringCache.set(input, outcome);\n  return outcome;\n}\nfunction checkTransactionWords(\n  name: string,\n  word: string,\n  date: string,\n  triggers: Trigger[],\n  assets: Asset[],\n  incomes: Income[],\n) {\n  // log(`date for check = ${getTriggerDate(date, triggers)}`);\n  const a = assets.find(\n    as =>\n      (as.NAME === word || as.CATEGORY === word) &&\n      getTriggerDate(as.START, triggers) <= getTriggerDate(date, triggers),\n  );\n  if (a !== undefined) {\n    return true;\n  }\n\n  // log(`name = ${name} and transaction from word ${word}`);\n  // maybe t.FROM is the name of an income\n  let i = incomes.find(\n    is =>\n      is.NAME === word &&\n      (name.startsWith(pensionDB) ||\n        name.startsWith(pensionSS) ||\n        getTriggerDate(is.START, triggers) <= getTriggerDate(date, triggers)),\n  );\n  if (i !== undefined) {\n    // the word is an income\n    // this only happens for transactions called Pension*\n    if (\n      !name.startsWith(pension) && // transfer out of income to pension\n      !name.startsWith(pensionSS) && // transfer out of income for contribution\n      !name.startsWith(pensionDB) && // transfer from income to pension benefit\n      !name.startsWith(pensionTransfer) // transfer from one pension to another\n    ) {\n      log(`Transaction ${name} from income\n        ${word} must be pension-related`);\n      return false;\n    }\n    return true;\n  }\n\n  // maybe t.FROM is an income liability\n  i = incomes.find(\n    is =>\n      is.LIABILITY.includes(word) &&\n      getTriggerDate(is.START, triggers) <= getTriggerDate(date, triggers),\n  );\n  if (i !== undefined) {\n    // the word is an income liability\n    return true;\n  }\n\n  return false;\n}\nfunction checkDate(d: Date) {\n  // log(`checking date ${d}, of type ${typeof d}`);\n  if (\n    Number.isNaN(d.getTime()) ||\n    d < makeDateFromString('1 Jan 1870') ||\n    d > makeDateFromString('1 Jan 2199')\n  ) {\n    return false;\n  }\n  return true;\n}\nexport function checkAssetLiability(l: string) {\n  if (\n    l.length > 0 &&\n    !l.endsWith(cgt) &&\n    !l.endsWith(incomeTax) &&\n    !l.endsWith(nationalInsurance)\n  ) {\n    return `Asset liability ${l} should end with ${cgt}, ${incomeTax} or ${nationalInsurance}`;\n  }\n  return '';\n}\n\nexport function isValidValue(value: string, model: ModelData): boolean {\n  if (value.length === 0) {\n    return false;\n  }\n  if (isNumberString(value)) {\n    return true;\n  }\n\n  const parsed = getNumberAndWordParts(value);\n  if (parsed.wordPart !== undefined) {\n    const settingVal = getSettings(\n      model.settings,\n      parsed.wordPart,\n      'missing',\n      false,\n    );\n    if (settingVal !== 'missing') {\n      // log(`guess setting ${settingVal} makes sense for a value...`);\n      return true; // still a guess as we don't know... TODO drill lower\n    }\n    if (isAnAssetOrAssets(parsed.wordPart, model)) {\n      return true; // could be appropriate ... TODO always workable?\n    }\n  }\n  return false;\n}\n\nexport function checkAsset(a: Asset, model: ModelData): string {\n  // log(`checkAsset ${showObj(a)}`);\n  if (a.NAME.length === 0) {\n    return 'Name should be not empty';\n  }\n  if (a.NAME.split(separator).length !== 1) {\n    return `Asset name '${a.NAME}' should not contain '${separator}'`;\n  }\n  const val = parseFloat(a.VALUE);\n  // log(`asset value is ${val}`);\n  if (val < 0 && !a.CAN_BE_NEGATIVE) {\n    return `Asset '${a.NAME}' can't be negative but has negative value '${a.VALUE}'`;\n  }\n  if (a.LIABILITY.length > 0) {\n    // log(`checking ${a.LIABILITY}`);\n    const words = a.LIABILITY.split(separator);\n    for (let idx = 0; idx < words.length; idx += 1) {\n      const word = words[idx];\n      const x = checkAssetLiability(word);\n      if (x.length > 0) {\n        return x;\n      }\n    }\n  }\n\n  if (!isNumberString(a.GROWTH)) {\n    const settingVal = getSettings(model.settings, a.GROWTH, 'missing');\n    if (settingVal === 'missing') {\n      return `Asset growth set to '${a.GROWTH}'\n        but no corresponding setting found`;\n    }\n    if (!isNumberString(settingVal)) {\n      return `Asset growth set to '${a.GROWTH}'\n        but corresponding setting not a number`;\n    }\n  }\n\n  if (!isValidValue(a.VALUE, model)) {\n    return `Asset value set to '${a.VALUE}'\n      but no corresponding setting found`;\n  }\n  if (!isNumberString(a.VALUE)) {\n    if (parseFloat(a.GROWTH) !== 0.0) {\n      return `Asset value '${a.VALUE}' may not have nonzero growth`;\n    }\n    if (!a.CPI_IMMUNE) {\n      return `Asset value '${a.VALUE}' may not grow with CPI`;\n    }\n  }\n\n  const isANumber = isNumberString(a.PURCHASE_PRICE);\n  if (!isANumber) {\n    const setting = getSettings(\n      model.settings,\n      a.PURCHASE_PRICE,\n      '',\n      false, // allow for it not being there\n    );\n    if (setting === '') {\n      return `Purchase price '${a.PURCHASE_PRICE}' should be a numerical or setting value`;\n    }\n  }\n\n  const d = checkTriggerDate(a.START, model.triggers);\n  if (d === undefined || !checkDate(d)) {\n    return `Asset start date doesn't make sense :\n      ${showObj(a.START)}`;\n  }\n  return '';\n}\n\nexport function checkIncomeLiability(l: string) {\n  if (\n    l.length > 0 &&\n    !l.endsWith(incomeTax) &&\n    !l.endsWith(nationalInsurance)\n  ) {\n    return (\n      `Income liability '${l}' should end with ` +\n      `'${incomeTax}' or '${nationalInsurance}'`\n    );\n  }\n  return '';\n}\nexport function checkIncome(i: Income, model: ModelData): string {\n  if (i.NAME.length === 0) {\n    return 'Income name needs some characters';\n  }\n  // log(`checking ${showObj(i)}`);\n  const parts = i.LIABILITY.split(separator);\n  if (parts.length > 3) {\n    return (\n      `Income liability for '${i.NAME}' has parts '${parts}' ` +\n      `but should contain at most two parts`\n    );\n  }\n  let incomeTaxName = '';\n  let niName = '';\n  for (const l of parts) {\n    /* eslint-disable-line no-restricted-syntax */\n    if (\n      l.length > 0 &&\n      !l.endsWith(incomeTax) &&\n      !l.endsWith(nationalInsurance)\n    ) {\n      const x = checkIncomeLiability(l);\n      if (x.length > 0) {\n        return (\n          `Income liability for '${i.NAME}' has parts '${parts}' ` +\n          `but the part '${l}' should end with ` +\n          `'${incomeTax}' or '${nationalInsurance}'`\n        );\n      }\n    }\n    if (l.endsWith(incomeTax)) {\n      incomeTaxName = l.substring(0, l.length - incomeTax.length);\n    } else if (l.endsWith(nationalInsurance)) {\n      niName = l.substring(0, l.length - nationalInsurance.length);\n    }\n    if (incomeTaxName !== '' && niName !== '' && incomeTaxName !== niName) {\n      return (\n        `Income liability for '${i.NAME}' has parts '${parts}' ` +\n        `but it should be the same person liable for NI and income tax'`\n      );\n    }\n  }\n  if (!isNumberString(i.GROWTH)) {\n    return `Income growth '${i.GROWTH}' is not a number`;\n  }\n  if (!isValidValue(i.VALUE, model)) {\n    return `Income value '${i.VALUE}' does not make sense`;\n  }\n  if (!isNumberString(i.VALUE)) {\n    if (parseFloat(i.GROWTH) !== 0.0) {\n      return `Income value '${i.VALUE}' may not have nonzero growth`;\n    }\n    if (!i.CPI_IMMUNE) {\n      return `Income value '${i.VALUE}' may not grow with CPI`;\n    }\n  }\n  const startDate = checkTriggerDate(i.START, model.triggers);\n  if (startDate === undefined || !checkDate(startDate)) {\n    return `Income start date doesn't make sense : ${showObj(i.START)}`;\n  }\n  const cashAssets = model.assets.filter(m => {\n    return m.NAME === CASH_ASSET_NAME;\n  });\n  if (cashAssets.length > 0) {\n    const cashStarts = getTriggerDate(cashAssets[0].START, model.triggers);\n    if (startDate < cashStarts) {\n      return `Income start date must be after cash starts; ${cashStarts.toDateString()}`;\n    }\n  }\n  const taxAssets = model.assets.filter(m => {\n    return m.NAME === taxPot;\n  });\n  if (taxAssets.length > 0) {\n    return `We don't need taxPot any more`;\n  }\n  const valueSetDate = checkTriggerDate(i.VALUE_SET, model.triggers);\n  if (valueSetDate === undefined || !checkDate(valueSetDate)) {\n    return `Income value set date doesn't make sense : ${showObj(i.VALUE_SET)}`;\n  }\n  const endDate = checkTriggerDate(i.END, model.triggers);\n  if (endDate === undefined || !checkDate(endDate)) {\n    return `Income end date doesn't make sense : ${showObj(i.END)}`;\n  }\n  if (valueSetDate > startDate) {\n    return `Income value must be set on or before the start of the income.\n      For ${i.NAME}, start is ${startDate.toDateString()} and\n      value is set ${valueSetDate.toDateString()}.`;\n  }\n  return '';\n}\n\nfunction checkRecurrence(rec: string) {\n  const lastChar = rec.substring(rec.length - 1);\n  // log(`lastChar of ${rec} = ${lastChar}`);\n  if (!(lastChar === 'm' || lastChar === 'y')) {\n    return `transaction recurrence '${rec}' must end in m or y`;\n  }\n  const firstPart = rec.substring(0, rec.length - 1);\n  // log(`firstPart of ${rec} = ${firstPart}`);\n\n  const val = parseFloat(firstPart);\n  // log(`val from ${rec} = ${val}`);\n  if (Number.isNaN(val)) {\n    return `transaction recurrence '${rec}' must be a number ending in m or y`;\n  }\n  return '';\n}\n\nexport function checkExpense(e: Expense, model: ModelData): string {\n  if (e.NAME.length === 0) {\n    return 'Expense name needs some characters';\n  }\n  if (!isNumberString(e.VALUE)) {\n    return `Expense value '${e.VALUE}' is not a number`;\n  }\n  if (!isNumberString(e.GROWTH)) {\n    return `Expense growth '${e.GROWTH}' is not a number`;\n  }\n  const startDate = checkTriggerDate(e.START, model.triggers);\n  if (startDate === undefined || !checkDate(startDate)) {\n    return `Expense start date doesn't make sense :\n      ${showObj(e.START)}`;\n  }\n  const valueSetDate = checkTriggerDate(e.VALUE_SET, model.triggers);\n  if (valueSetDate === undefined || !checkDate(valueSetDate)) {\n    return `Expense value set date doesn't make sense :\n      ${showObj(e.VALUE_SET)}`;\n  }\n  const endDate = checkTriggerDate(e.END, model.triggers);\n  if (endDate === undefined || !checkDate(endDate)) {\n    return `Expense end date doesn't make sense :\n      ${showObj(e.END)}`;\n  }\n  if (valueSetDate > startDate) {\n    return `Expense value must be set on or before the start of the income.\n      For ${e.NAME}, start is ${startDate.toDateString()} and\n      value is set ${valueSetDate.toDateString()}.`;\n  }\n  const checkRec = checkRecurrence(e.RECURRENCE);\n  if (checkRec !== '') {\n    return checkRec;\n  }\n  return '';\n}\nfunction checkTransactionFrom(word: string, settings: Setting[]) {\n  const matched = settings.find(s => s.NAME === word);\n  if (matched !== undefined) {\n    // the FROM value is a setting - assume that it\n    // will evaluate to a numebr without further checks\n    return '';\n  }\n  return `Transactions 'from' values must be numbers or a setting`;\n}\n\nfunction checkTransactionTo(\n  word: string,\n  t: Transaction,\n  assetsForChecking: Asset[],\n  incomes: Income[],\n  expenses: Expense[],\n  triggers: Trigger[],\n  settings: Setting[],\n) {\n  const a = assetsForChecking.find(\n    as => as.NAME === word || as.CATEGORY === word,\n  );\n  if (a !== undefined) {\n    if (t.NAME.startsWith(pensionDB)) {\n      return `Transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} should have TO an income not an asset : ${a.NAME}`;\n    }\n    if (getTriggerDate(a.START, triggers) > getTriggerDate(t.DATE, triggers)) {\n      return (\n        `Transaction ${getDisplayName(t.NAME, t.TYPE)} dated before start ` +\n        `of affected asset : ${a.NAME}`\n      );\n    }\n    return '';\n  }\n\n  const i = incomes.find(ic => ic.NAME === word);\n  if (i !== undefined) {\n    if (\n      !t.NAME.startsWith(revalue) &&\n      !t.NAME.startsWith(pensionDB) &&\n      !t.NAME.startsWith(pensionTransfer)\n    ) {\n      return (\n        `Transactions to incomes must begin '${revalue}' ` +\n        `or '${pensionDB} or ${pensionTransfer}`\n      );\n    }\n    if (t.NAME.startsWith(pensionDB)) {\n      if (!i.NAME.startsWith(pensionDB)) {\n        return `Transaction ${getDisplayName(\n          t.NAME,\n          t.TYPE,\n        )} must have TO income ${t.TO} named starting ${pensionDB}`;\n      }\n    }\n    // transacting on an income - check dates\n    if (!t.NAME.startsWith(pensionDB)) {\n      if (\n        getTriggerDate(i.START, triggers) > getTriggerDate(t.DATE, triggers)\n      ) {\n        return (\n          `Transaction ${getDisplayName(t.NAME, t.TYPE)} dated before start ` +\n          `of affected income : ${i.NAME}`\n        );\n      }\n    }\n    return '';\n  }\n\n  const exp = expenses.find(e => e.NAME === word);\n  if (exp !== undefined) {\n    // transacting on an expense - must be a revaluation\n    if (!t.NAME.startsWith(revalue)) {\n      return `Transactions to expenses must begin '${revalue}'`;\n    }\n    // transacting on an expense - check dates\n    if (\n      getTriggerDate(exp.START, triggers) > getTriggerDate(t.DATE, triggers)\n    ) {\n      return (\n        `Transaction ${getDisplayName(t.NAME, t.TYPE)} dated before start ` +\n        `of affected expense : ${exp.NAME}`\n      );\n    }\n    if (getTriggerDate(exp.END, triggers) < getTriggerDate(t.DATE, triggers)) {\n      return (\n        `Transaction ${getDisplayName(t.NAME, t.TYPE)} dated after end ` +\n        `of affected expense : ${exp.NAME}`\n      );\n    }\n    return '';\n  }\n\n  const s = settings.find(s => s.NAME === word);\n  if (s !== undefined) {\n    // transacting on an setting - must be a revaluation\n    if (!t.NAME.startsWith(revalue)) {\n      return `Transactions to setting must begin '${revalue}'`;\n    }\n    return '';\n  }\n  return `Transaction ${getDisplayName(\n    t.NAME,\n    t.TYPE,\n  )} to unrecognised thing : ${word}`;\n}\n\nfunction isAutogenType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${getDisplayName(t.NAME, t.TYPE)}`);\n  let recognised = false;\n  /*\n    const contributions: Transaction = {\n      NAME: (parseYNSS.value ? pensionSS : pension) + this.state.NAME,\n      FROM: this.state.DCP_INCOME_SOURCE,\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: this.state.DCP_CONTRIBUTION_AMOUNT,\n      TO: asset1Name,\n      TO_ABSOLUTE: false,\n      TO_VALUE: `${toProp}`,\n      DATE: this.state.START, // match the income start date\n      STOP_DATE: this.state.DCP_STOP, // match the income stop date\n      RECURRENCE: '',\n      CATEGORY: this.state.CATEGORY,\n      TYPE: autogen,\n    };\n*/\n  // A defined contributions pension\n  // takes money out of an income\n  // could be salary sacrifice, could be not,\n  // and puts it into an asset called pension*\n  if (\n    (t.NAME.startsWith(pension) || t.NAME.startsWith(pensionSS)) &&\n    (t.FROM === '' || isAnIncome(t.FROM, model)) &&\n    t.TO_ABSOLUTE === false &&\n    t.TO.startsWith(pension) &&\n    t.FROM_ABSOLUTE === false &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n    /*    \n  } else {\n    log(`for ${t.NAME}`);\n    if(!(t.NAME.startsWith(pension) || t.NAME.startsWith(pensionSS))){\n      log('not a DCP name');\n    }\n    if(!isAnIncome(t.FROM, model)){\n      log('not a DCP FROM');\n    }\n    if(t.TO_ABSOLUTE !== false){\n      log('not a DCP TO_ABSOLUTE');      \n    }\n    if(!t.TO.startsWith(pension)){\n      log('not a DCP TO');      \n    }\n    if(t.FROM_ABSOLUTE !== false){\n      log('not a DCP FROM_ABSOLUTE');          \n    }\n    if(t.RECURRENCE !== ''){\n      log('not a DCP RECURRENCE');            \n    }\n*/\n  }\n  /*\n      NAME: moveTaxFreePart + this.state.NAME,\n      FROM: asset1Name,\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.25', // TODO move hard coded value out of UI code\n      TO: asset2Name,\n      TO_ABSOLUTE: false,\n      TO_VALUE: `1.0`,\n      DATE: this.state.DCP_CRYSTALLIZE,\n      STOP_DATE: '',\n      RECURRENCE: '',\n      CATEGORY: this.state.CATEGORY,\n      TYPE: autogen,\n*/\n  // A defined contributions pension\n  // moves a tax free amount from the asset called pension*\n  // into another asset called TaxFree*\n  if (\n    !recognised &&\n    t.NAME.startsWith(moveTaxFreePart) &&\n    t.FROM.startsWith(pension) &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO.startsWith(taxFree) &&\n    t.TO_ABSOLUTE === false &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n  }\n  /*\n      NAME: crystallizedPension + this.state.NAME,\n      FROM: asset1Name,\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '1.0',\n      TO: asset3Name,\n      TO_ABSOLUTE: false,\n      TO_VALUE: `1.0`,\n      DATE: this.state.DCP_CRYSTALLIZE, // +1 sec\n      STOP_DATE: '',\n      RECURRENCE: '',\n      CATEGORY: this.state.CATEGORY,\n      TYPE: autogen,\n*/\n\n  // A defined contributions pension\n  // after taking a tax free part,\n  // moves the rest of from the asset called pension*\n  // into another asset called crystallized*\n  if (\n    !recognised &&\n    t.NAME.startsWith(crystallizedPension) &&\n    t.FROM.startsWith(pension) &&\n    // asNumber(t.FROM_VALUE) === 1.0 &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO.startsWith(crystallizedPension) &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n    /*\n  } else {\n    log(`t.NAME.startsWith(crystallizedPension) = ${t.NAME.startsWith(crystallizedPension)}`);\n    log(`t.FROM.startsWith(pension) = ${t.FROM.startsWith(pension)}`);\n    log(`t.FROM_ABSOLUTE === false = ${t.FROM_ABSOLUTE === false}`);\n    log(`t.FROM_ABSOLUTE === false = ${t.FROM_ABSOLUTE === false}`);\n    log(`t.TO.startsWith(crystallizedPension) = ${t.TO.startsWith(crystallizedPension)}`);\n    log(`t.RECURRENCE === '' = ${t.RECURRENCE === ''}`);\n*/\n  }\n  /*\n    Transfer DB pension\n        transfer = {\n          NAME: transferCrystallizedPension + this.state.NAME,\n          FROM: asset3Name, // crystallized for one person\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: '1.0',\n          TO: asset4Name, // crystallized for another person\n          TO_ABSOLUTE: false,\n          TO_VALUE: '1.0',\n          DATE: this.state.DCP_TRANSFER_DATE, \n          STOP_DATE: '',\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n        };\n  */\n  if (\n    !recognised &&\n    t.NAME.startsWith(transferCrystallizedPension) &&\n    t.FROM.startsWith(crystallizedPension) &&\n    // asNumber(t.FROM_VALUE) === 1.0 &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO.startsWith(crystallizedPension) &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n    /*\n  } else {\n    log(`t.NAME.startsWith(transferCrystallizedPension) = ${t.NAME.startsWith(transferCrystallizedPension)}`);\n    log(`t.FROM.startsWith(crystallizedPension) = ${t.FROM.startsWith(crystallizedPension)}`);\n    log(`t.FROM_ABSOLUTE === false = ${t.FROM_ABSOLUTE === false}`);\n    log(`t.TO.startsWith(crystallizedPension) = ${t.TO.startsWith(crystallizedPension)}`);\n    log(`t.RECURRENCE === '' = ${t.RECURRENCE === ''}`);\n*/\n  }\n\n  /*\n      const pensionDbptran1: Transaction = {\n        NAME: (parseYNDBSS.value ? pensionSS : pension) + this.state.NAME,\n        FROM: this.state.DB_INCOME_SOURCE,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: this.state.DB_CONTRIBUTION_AMOUNT,\n        TO: '',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '0.0',\n        DATE: this.state.VALUE_SET, // match the income start date\n        STOP_DATE: this.state.DB_STOP_SOURCE, // match the income stop date\n        RECURRENCE: '',\n        CATEGORY: this.state.CATEGORY,\n        TYPE: autogen,\n      };\n*/\n  // A defined benefits pension\n  // takes money from an income\n  // (optionally salary sacrifice)\n  // to nothing\n  if (\n    (t.NAME.startsWith(pension) || t.NAME.startsWith(pensionSS)) &&\n    isAnIncome(t.FROM, model) &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO === '' &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n    /*\n  } else {\n    log(`for ${t.NAME}`);\n    log(`t.NAME.startsWith(pension) || t.NAME.startsWith(pensionSS) = \n      ${t.NAME.startsWith(pension) || t.NAME.startsWith(pensionSS)}`);\n    log(`isAnIncome(t.FROM, model) = ${isAnIncome(t.FROM, model)}`);\n    log(`t.FROM_ABSOLUTE === false  = ${t.FROM_ABSOLUTE === false}`);\n    log(`t.TO === ''  =${t.TO === ''}`);\n    log(`t.RECURRENCE === '' =${t.RECURRENCE === ''}`);\n  */\n  }\n  /*\n        NAME: newIncomeName1, // kicks in when we see income java\n        FROM: this.state.DB_INCOME_SOURCE,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: monthlyAccrualValue, // percentage of income offered up to pension\n        TO: newIncomeName1,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: this.state.VALUE_SET, // match the income start date\n        STOP_DATE: this.state.DB_STOP_SOURCE, // match the income stop date\n        RECURRENCE: '',\n        CATEGORY: this.state.CATEGORY,\n        TYPE: autogen,\n*/\n  // A defined benefits pension\n  // accrues an amount to an income pensionDB*\n  if (\n    t.NAME.startsWith(pensionDB) &&\n    isAnIncome(t.FROM, model) &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO_ABSOLUTE === false &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n  }\n\n  /*\n          NAME: newIncomeName2,\n          FROM: newIncomeName1,\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: '1.0',\n          TO: newIncomeName2,\n          TO_ABSOLUTE: false,\n          TO_VALUE: this.state.DB_TRANSFER_PROPORTION,\n          DATE: this.state.DB_END,\n          STOP_DATE: this.state.DB_TRANSFERRED_STOP,\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n*/\n  // A defined benefits pension can be transferred to someone else\n  if (\n    t.NAME.startsWith(pensionTransfer) &&\n    isAnIncome(t.FROM, model) &&\n    t.FROM.startsWith(pensionDB) &&\n    t.FROM_ABSOLUTE === false &&\n    t.TO.startsWith(pensionTransfer) &&\n    t.TO_ABSOLUTE === false &&\n    t.RECURRENCE === ''\n  ) {\n    recognised = true;\n  }\n  //if(!recognised){\n  //  log(`bad transaction ${showObj(t)}`);\n  //}\n  return recognised;\n}\n\nfunction isLiquidateAssetType(t: Transaction) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (t.NAME.startsWith(conditional) && t.TO === CASH_ASSET_NAME) {\n    recognised = true;\n  }\n  return recognised;\n}\n\nfunction isRevalueDebtType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (t.NAME.startsWith(revalue) && isADebt(t.TO, model) && t.CATEGORY === '') {\n    // log(`for ${t.NAME} is a revalueDebt`);\n    recognised = true;\n    /*\n  } else {\n    log(`for ${t.NAME}`);\n    log(`t.NAME.startsWith(revalue) is ${t.NAME.startsWith(revalue)}`);\n    log(`isAnAssetOrAssets(t.TO, model) is ${isAnAssetOrAssets(t.TO, model)}`);\n    log(`t.RECURRENCE === '' is ${t.RECURRENCE === ''}`);\n    log(`t.CATEGORY === '' is ${t.CATEGORY === ''}`);\n*/\n  }\n  return recognised;\n}\n\nfunction isRevalueAssetType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (\n    t.NAME.startsWith(revalue) &&\n    isAnAssetOrAssets(t.TO, model) &&\n    t.CATEGORY === ''\n  ) {\n    // log(`for ${t.NAME} is a revalueAsset`);\n    recognised = true;\n    /*\n  } else {\n    log(`for ${t.NAME}`);\n    log(`t.NAME.startsWith(revalue) is ${t.NAME.startsWith(revalue)}`);\n    log(`isAnAssetOrAssets(t.TO, model) is ${isAnAssetOrAssets(t.TO, model)}`);\n    log(`t.RECURRENCE === '' is ${t.RECURRENCE === ''}`);\n    log(`t.CATEGORY === '' is ${t.CATEGORY === ''}`);\n    */\n  }\n  return recognised;\n}\n\nfunction isRevalueIncomeType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${getDisplayName(t.NAME, t.TYPE)}`);\n  let recognised = false;\n  if (\n    t.NAME.startsWith(revalue) &&\n    isAnIncome(t.TO, model) &&\n    t.CATEGORY === ''\n  ) {\n    recognised = true;\n  }\n  return recognised;\n}\n\nfunction isRevalueExpenseType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (\n    t.NAME.startsWith(revalue) &&\n    isAnExpense(t.TO, model) &&\n    t.CATEGORY === ''\n  ) {\n    recognised = true;\n    /*    \n  } else {\n    log(`for ${t.NAME}`);\n    log(`t.NAME.startsWith(revalue) =  ${t.NAME.startsWith(revalue)}`);\n    log(`t.RECURRENCE === '' ${t.RECURRENCE === ''}`);\n    log(`t.CATEGORY === '' ${t.CATEGORY === ''}`);\n*/\n  }\n  return recognised;\n}\n\nfunction isCustomType(t: Transaction) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (\n    !t.NAME.startsWith(conditional) &&\n    !t.NAME.startsWith(crystallizedPension) &&\n    !t.NAME.startsWith(pensionDB) &&\n    //!t.NAME.startsWith(pensionSS) &&\n    !t.NAME.startsWith(revalue)\n  ) {\n    recognised = true;\n  }\n  if (!recognised && t.NAME.startsWith(revalue)) {\n    recognised = true;\n  }\n  return recognised;\n}\n\nfunction isPayOffDebtType(t: Transaction, model: ModelData) {\n  // log(`check transaction ${t.NAME}`);\n  let recognised = false;\n  if (\n    t.NAME.startsWith(conditional) &&\n    t.FROM === CASH_ASSET_NAME &&\n    isADebt(t.TO, model)\n  ) {\n    recognised = true;\n  }\n  return recognised;\n}\n\nexport function checkTransaction(t: Transaction, model: ModelData): string {\n  // log(`checking transaction ${showObj(t)}`);\n  const { assets, incomes, expenses, triggers, settings } = model;\n  const assetsForChecking = assets;\n  if (t.NAME.length === 0) {\n    return 'Transaction name needs some characters';\n  }\n  if (t.NAME.startsWith(conditional) && t.TO === '') {\n    return 'conditional transactions need a To asset defined';\n  }\n  const d = checkTriggerDate(t.DATE, triggers);\n  if (d === undefined || !checkDate(d)) {\n    return `Transaction has bad date : ${showObj(t.DATE)}`;\n  }\n  // log(`transaction date ${getTriggerDate(t.DATE, triggers)}`);\n  if (t.FROM !== '') {\n    if (\n      !checkTransactionWords(\n        t.NAME,\n        t.FROM,\n        t.DATE,\n        triggers,\n        assetsForChecking,\n        incomes,\n      )\n    ) {\n      // log(`split up t.FROM ${t.FROM}`);\n      const words = t.FROM.split(separator);\n      // log(`words ${showObj(words)}`);\n      const arrayLength = words.length;\n      for (let i = 0; i < arrayLength; i += 1) {\n        const word = words[i];\n        // log(`word to check is ${word}`);\n        if (\n          !checkTransactionWords(\n            t.NAME,\n            word,\n            t.DATE,\n            triggers,\n            assetsForChecking,\n            incomes,\n          )\n        ) {\n          // flag a problem\n          return (\n            'Transaction from unrecognised asset (could ' +\n            `be typo or before asset start date?) : ${showObj(word)}`\n          );\n        }\n      }\n    }\n    if (t.FROM_VALUE === '') {\n      return `Transaction from ${t.FROM} needs a non-empty from value`;\n    } else if (!isNumberString(t.FROM_VALUE)) {\n      const outcome = checkTransactionFrom(t.FROM_VALUE, settings);\n      return outcome;\n    }\n  }\n  if (t.TO !== '') {\n    if (t.NAME.startsWith(revalue)) {\n      let words = t.TO.split(separator);\n      // log(`check transaction to words : ${words}`);\n      words = replaceCategoryWithAssetNames(words, model);\n      // log(`transaction to words as assets : ${words}`);\n      for (let idx = 0; idx < words.length; idx += 1) {\n        const w = words[idx];\n        const outcome = checkTransactionTo(\n          w,\n          t,\n          assetsForChecking,\n          incomes,\n          expenses,\n          triggers,\n          settings,\n        );\n        if (outcome.length > 0) {\n          return outcome;\n        }\n      }\n      /*\n      // Don't try this.\n      // Some revaluations are of type custom\n      // because we want to be able to type them in\n      // and see them appear on the Transactions page\n      // At least for now, because automated tests can't edit tables\n      // so we can't automate recurring revaluations of settings\n      // unless the action happens as a new Transaction\n      if(t.TYPE !== revalueAsset\n         && t.TYPE !== revalueDebt\n         && t.TYPE !== revalueExp\n         && t.TYPE !== revalueInc\n         && t.TYPE !== revalueSetting){\n        return `Revalue transaction has unexpected type ${t.TYPE}`;\n      }\n      */\n    } else {\n      const outcome = checkTransactionTo(\n        t.TO,\n        t,\n        assetsForChecking,\n        incomes,\n        expenses,\n        triggers,\n        settings,\n      );\n      if (outcome.length > 0) {\n        return outcome;\n      }\n    }\n    if (t.TYPE === revalueSetting) {\n      // log(`anything goes!`);\n    } else if (t.TO_VALUE === '') {\n      return `Transaction to ${t.TO} needs a non-empty to value`;\n    } else if (!isValidValue(t.TO_VALUE, model)) {\n      return `Transaction to value ${t.TO_VALUE} isn't a number or setting`;\n    }\n  }\n  if (t.RECURRENCE.length > 0) {\n    if (\n      t.NAME.startsWith(pension) ||\n      t.NAME.startsWith(pensionSS) ||\n      t.NAME.startsWith(pensionDB)\n    ) {\n      return (\n        `Pension transaction ${getDisplayName(\n          t.NAME,\n          t.TYPE,\n        )} gets frequency from income, ` +\n        `should not have recurrence ${t.RECURRENCE} defined`\n      );\n    }\n\n    const checkRec = checkRecurrence(t.RECURRENCE);\n    if (checkRec !== '') {\n      return checkRec;\n    }\n  }\n  if (\n    t.TYPE !== autogen &&\n    t.TYPE !== custom &&\n    t.TYPE !== liquidateAsset &&\n    t.TYPE !== payOffDebt &&\n    t.TYPE !== revalueAsset &&\n    t.TYPE !== revalueDebt &&\n    t.TYPE !== revalueInc &&\n    t.TYPE !== revalueExp &&\n    t.TYPE !== revalueSetting\n  ) {\n    return `transaction type  ${t.TYPE} for ${getDisplayName(\n      t.NAME,\n      t.TYPE,\n    )} is not one of allowed types - internal bug`;\n  }\n  if (t.TYPE === autogen) {\n    // there are a known set of type of\n    // autogenerated transactions - we should be one of these\n    const recognised = isAutogenType(t, model);\n    if (!recognised) {\n      log(`bad transaction ${showObj(t)} in model ${showObj(model)}`);\n      return `autogenerated type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === liquidateAsset) {\n    const recognised = isLiquidateAssetType(t);\n    if (!recognised) {\n      return `liquidating type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === payOffDebt) {\n    const recognised = isPayOffDebtType(t, model);\n    if (!recognised) {\n      return `payoff debt type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === revalueAsset) {\n    const recognised = isRevalueAssetType(t, model);\n    if (!recognised) {\n      return `revalue asset type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n      //} else {\n      //  log(`revalue asset type of transaction ${getDisplayName(t.NAME, t.TYPE)} is a recognised format`);\n      //}\n    }\n  }\n  if (t.TYPE === revalueDebt) {\n    const recognised = isRevalueDebtType(t, model);\n    if (!recognised) {\n      return `revalue debt type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === revalueInc) {\n    // there are a known set of type of\n    // autogenerated transactions - we should be one of these\n    const recognised = isRevalueIncomeType(t, model);\n    if (!recognised) {\n      return `revalue income type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === revalueExp) {\n    // there are a known set of type of\n    // autogenerated transactions - we should be one of these\n    const recognised = isRevalueExpenseType(t, model);\n    if (!recognised) {\n      return `revalue expense type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n  if (t.TYPE === custom) {\n    // there are a known set of type of\n    // autogenerated transactions - we should be one of these\n    const recognised = isCustomType(t);\n    if (!recognised) {\n      return `custom type of transaction ${getDisplayName(\n        t.NAME,\n        t.TYPE,\n      )} not a recognised format`;\n    }\n  }\n\n  const tToValue = parseFloat(t.TO_VALUE);\n  const tFromValue = parseFloat(t.FROM_VALUE);\n  // log(`transaction ${showObj(t)} appears OK`);\n  if (!t.FROM_ABSOLUTE && tFromValue > 1.0) {\n    log(`WARNING : not-absolute value from ${tFromValue} > 1.0`);\n  }\n  if (\n    !t.TO_ABSOLUTE &&\n    tToValue > 1.0 &&\n    !t.NAME.startsWith(pension) && // pensions can have employer contributions\n    !t.NAME.startsWith(pensionSS) &&\n    t.TYPE !== revalueAsset &&\n    t.TYPE !== revalueExp &&\n    t.TYPE !== revalueInc &&\n    t.TYPE !== revalueSetting\n  ) {\n    log(`WARNING : ${t.NAME} has not-absolute value to ${tToValue} > 1.0`);\n  }\n  // log(`checkTransaction is OK for ${t.NAME}`);\n  return '';\n}\n\nfunction checkTriggerName(tName: string): string {\n  if (tName.length === 0) {\n    return 'Date name needs some characters';\n  }\n  if (tName === 'today') {\n    return `Date name can't be 'today'`;\n  }\n  if (tName.includes('+')) {\n    return `Date names cannot contain a '+' character`;\n  }\n  if (tName.includes('-')) {\n    return `Date names cannot contain a '-' character`;\n  }\n  return '';\n}\n\nexport function checkTrigger(t: Trigger, model: ModelData): string {\n  // log(`check trigger ${showObj(t)}`);\n  const nameCheck = checkTriggerName(t.NAME);\n  if (nameCheck.length > 0) {\n    return nameCheck;\n  }\n  if (!checkTriggerDate(t.DATE, model.triggers)) {\n    return `Your important date is not valid : ${t.DATE}`;\n  }\n  return '';\n}\nfunction checkSettingAbsent(settings: Setting[], name: string) {\n  const vf = getSettings(settings, name, 'noneFound', false);\n  if (vf !== 'noneFound') {\n    return `\"${name}\" setting should not be present`;\n  }\n  return '';\n}\nfunction checkViewROI(settings: Setting[]) {\n  // log(`check settings ${showObj(settings)}`);\n  const start = getSettings(settings, roiStart, 'noneFound');\n  if (start === 'noneFound') {\n    return `\"${roiStart}\" should be present in settings (value is a date)`;\n  }\n  const startDate = makeDateFromString(start);\n  if (Number.isNaN(startDate.getTime())) {\n    return `Setting \"${roiStart}\" should be a valid date string (e.g. 1 April 2018)`;\n  }\n  const end = getSettings(settings, roiEnd, 'noneFound');\n  if (end === 'noneFound') {\n    return `\"${roiEnd}\" should be present in settings (value is a date)`;\n  }\n  const endDate = makeDateFromString(end);\n  if (Number.isNaN(endDate.getTime())) {\n    return `Setting \"${roiEnd}\" should be a valid date string (e.g. 1 April 2018)`;\n  }\n  if (endDate < startDate) {\n    return `Setting \"${roiEnd}\" should be after setting \"${roiStart}\"`;\n  }\n  return '';\n}\n\nfunction checkDateOfBirth(settings: Setting[]): string {\n  const dob = getSettings(settings, birthDate, '');\n  if (dob === '') {\n    return '';\n  }\n  const d = makeDateFromString(dob);\n  if (!checkDate(d)) {\n    return `Date of birth ${dob} should parse and be reasonable`;\n  }\n  return '';\n}\nfunction checkCpi(settings: Setting[]): string {\n  const stringVal = getSettings(settings, cpi, '');\n  const val = parseFloat(stringVal);\n  if (Number.isNaN(val)) {\n    return 'Setting for CPI should be a number';\n  }\n  return '';\n}\n\nfunction checkNames(model: ModelData): string {\n  let names = model.assets.map(a => {\n    return a.NAME;\n  });\n  names = names.concat(\n    model.incomes.map(a => {\n      return a.NAME;\n    }),\n  );\n  names = names.concat(\n    model.expenses.map(a => {\n      return a.NAME;\n    }),\n  );\n  names = names.concat(\n    model.transactions.map(a => {\n      return a.NAME;\n    }),\n  );\n  names = names.concat(\n    model.triggers.map(a => {\n      return a.NAME;\n    }),\n  );\n  names = names.concat(\n    model.settings.map(a => {\n      return a.NAME;\n    }),\n  );\n\n  const counts: Map<string, number> = names\n    .filter(n => {\n      return !n.startsWith(pension);\n    })\n    .filter(n => {\n      return !n.startsWith(pensionTransfer);\n    })\n    .filter(n => {\n      return !n.startsWith(pensionDB);\n    })\n    .reduce((acc: Map<string, number>, b: string) => {\n      const existingCount = acc.get(b);\n      if (existingCount === undefined) {\n        acc.set(b, 1);\n      } else {\n        acc.set(b, existingCount + 1);\n      }\n      return acc;\n    }, new Map<string, number>());\n\n  for (const [key, value] of counts) {\n    // log(`key = ${key}, value = ${value}`);\n    if (value > 1) {\n      return `duplicate name ${key}`;\n    }\n  }\n  return '';\n}\n\nexport function checkData(model: ModelData): string {\n  // log(`checking data ${showObj(model)}`);\n  // log(`check settings`);\n  let message = checkNames(model);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, viewFrequency);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, viewDetail);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkViewROI(model.settings);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, chartViewType);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkDateOfBirth(model.settings);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkCpi(model.settings);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, assetChartFocus);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, debtChartFocus);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, expenseChartFocus);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, incomeChartFocus);\n  if (message.length > 0) {\n    return message;\n  }\n  message = checkSettingAbsent(model.settings, taxChartFocusType);\n  if (message.length > 0) {\n    return message;\n  }\n\n  // Any transactions must have date inside\n  // the lifetime of relevant assets\n  // Don't use forEach because we want to log a bug and\n  // return if we meet bad data.\n\n  // linter doesn't like this loop\n  //  for (let i = 0; i < transactions.length; i += 1){\n  //    const t = transactions[i];\n  // ERROR: Expected a 'for-of' loop instead of a 'for'\n  // loop with this simple iteration\n\n  // codacy doesn't like this loop\n  // iterators/generators require regenerator-runtime,\n  // which is too heavyweight for this guide to allow them.\n  // Separately, loops should be avoided in favor of array iterations.\n  // (no-restricted-syntax)\n  // log(`check transactions`);\n  for (const t of model.transactions) {\n    /* eslint-disable-line no-restricted-syntax */\n    message = checkTransaction(t, model);\n    if (message.length > 0) {\n      return message;\n    }\n  }\n  // log(`check assets`);\n  for (const a of model.assets) {\n    /* eslint-disable-line no-restricted-syntax */\n    message = checkAsset(a, model);\n    if (message.length > 0) {\n      return message;\n    }\n  }\n  // log(`check incomes`);\n  for (const i of model.incomes) {\n    /* eslint-disable-line no-restricted-syntax */\n    message = checkIncome(i, model);\n    if (message.length > 0) {\n      return message;\n    }\n  }\n  // log(`check expenses`);\n  for (const e of model.expenses) {\n    /* eslint-disable-line no-restricted-syntax */\n    message = checkExpense(e, model);\n    if (message.length > 0) {\n      return message;\n    }\n  }\n  // log(`check triggers`);\n  for (const t of model.triggers) {\n    /* eslint-disable-line no-restricted-syntax */\n    message = checkTrigger(t, model);\n    if (message.length > 0) {\n      return message;\n    }\n  }\n  return '';\n}\n\nexport function checkEvalnType(\n  evaln: Evaluation,\n  nameToTypeMap: Map<string, string>,\n) {\n  // expect 'PurchaseAssetName' as valuation for cgt purposes\n  if (evaln.name.startsWith(purchase)) {\n    const evalnType = nameToTypeMap.get(evaln.name.substr(purchase.length));\n    if (evalnType === evaluationType.asset) {\n      // don't process this evaluation\n      // it was just logged to track CGT liability\n      return;\n    }\n    if (evalnType === undefined) {\n      throw new Error(\n        `BUG!! purchase evaluation of an unknown type: ${showObj(evaln)}`,\n      );\n      //return;\n    }\n    log(`BUG!! Purchase of non-asset? : ${showObj(evaln)}`);\n  } else if (evaln.name.startsWith(quantity)) {\n    // expect 'quantity' as keeping track of discrete assets\n    const evalnType = nameToTypeMap.get(evaln.name.substr(quantity.length));\n    if (evalnType === evaluationType.asset) {\n      return;\n    }\n  } else {\n    throw new Error(`BUG!! evaluation of an unknown type: ${showObj(evaln)}`);\n    //return;\n  }\n}\n","import { migrateViewSetting } from '../App';\nimport {\n  roiEnd,\n  viewType,\n  roiStart,\n  birthDate,\n  viewFrequency,\n  monthly,\n  viewDetail,\n  assetChartFocus,\n  debtChartFocus,\n  expenseChartFocus,\n  incomeChartFocus,\n  chartViewType,\n  cpi,\n  constType,\n  custom,\n  taxPot,\n  taxChartFocusPerson,\n  allItems,\n  taxChartFocusType,\n  taxChartShowNet,\n  pension,\n  moveTaxFreePart,\n  pensionDB,\n  pensionSS,\n  pensionTransfer,\n  taxFree,\n  transferCrystallizedPension,\n  crystallizedPension,\n  separator,\n  dot,\n} from '../localization/stringConstants';\nimport { ModelData } from '../types/interfaces';\nimport { getMinimalModelCopy, viewSetting } from './exampleModels';\nimport { log } from '../utils';\n\n// 0; // may not include assets or settings in minimalModel\n// 1; // may not include expense recurrence, asset/debt,\n//           // asset quantity, transaction and settings types\n// 2; // could use taxPot as an asset\n// 3; // doesn't include tax view focus settings\n// 4; // still includes many view settings\n// 5; // still includes English-language special words\n// 6; // uses -DC for pensions, even if they're DB pensions\n// 7; // uses one cyrstallizedPension pot per person\nconst currentVersion = 8;\n\nexport function getCurrentVersion() {\n  return currentVersion;\n}\n\nconst mapForGuessSettingTypeForv2 = new Map([\n  [roiEnd, viewType],\n  [roiStart, viewType],\n  [birthDate, viewType],\n  [viewFrequency, viewType],\n  [monthly, viewType],\n  [viewDetail, viewType],\n  [assetChartFocus, viewType],\n  [debtChartFocus, viewType],\n  [expenseChartFocus, viewType],\n  [incomeChartFocus, viewType],\n  [chartViewType, viewType],\n  [cpi, constType],\n]);\n\nfunction getGuessSettingTypeForv2(name: string) {\n  const mapResult = mapForGuessSettingTypeForv2.get(name);\n  if (mapResult !== undefined) {\n    return mapResult;\n  }\n  return constType;\n}\n\nconst showMigrationLogs = false;\n\nfunction migrateFromV0(model: ModelData) {\n  // log(`in migrateOldVersions at v0, model has ${model.settings.length} settings`);\n  // use getMinimalModelCopy and scan over all settings and assets\n  const minimalModel = getMinimalModelCopy();\n  minimalModel.settings.forEach(x => {\n    if (\n      model.settings.filter(existing => {\n        return existing.NAME === x.NAME;\n      }).length === 0\n    ) {\n      // log(`model needs insertion of missing data ${showObj(x)}`);\n      model.settings.push(x);\n      // throw new Error(`inserting missing data ${showObj(x)}`);\n    }\n  });\n  minimalModel.assets.forEach(x => {\n    if (\n      model.assets.filter(existing => {\n        return existing.NAME === x.NAME;\n      }).length === 0\n    ) {\n      //log(`inserting missing data ${showObj(x)}`);\n      model.assets.push(x);\n      // throw new Error(`inserting missing data ${showObj(x)}`);\n    }\n  });\n  model.version = 1;\n}\n\nfunction migrateFromV1(model: ModelData) {\n  if (showMigrationLogs) {\n    log(\n      `in migrateOldVersions at v1, model has ${model.settings.length} settings`,\n    );\n  }\n  for (const e of model.expenses) {\n    if (e.RECURRENCE === undefined) {\n      e.RECURRENCE = '1m';\n    }\n  }\n  for (const a of model.assets) {\n    if (a.IS_A_DEBT === undefined) {\n      a.IS_A_DEBT = false;\n    }\n    if (a.QUANTITY === undefined) {\n      a.QUANTITY = '';\n    }\n  }\n  for (const t of model.transactions) {\n    if (t.TYPE === undefined) {\n      t.TYPE = custom;\n    }\n  }\n  for (const s of model.settings) {\n    if (s.TYPE === undefined) {\n      s.TYPE = getGuessSettingTypeForv2(s.NAME);\n    }\n  }\n  model.version = 2;\n}\n\nfunction migrateFromV2(model: ModelData) {\n  if (showMigrationLogs) {\n    log(`in migrateOldVersions at v2, model has ${model.assets.length} assets`);\n    log(\n      `${model.assets.map(x => {\n        return x.NAME;\n      })}`,\n    );\n  }\n  // remove any asset called taxPot\n  let index = model.assets.findIndex(a => {\n    return a.NAME === taxPot;\n  });\n  if (index >= 0) {\n    // log(`found taxPot at index = ${index}!`);\n    model.assets.splice(index, 1);\n    // log(\n    //  `${model.assets.map(x => {\n    //    return x.NAME;\n    //  })}`,\n    // );\n    // log(\n    //  `in migrateOldVersions at v2, model now has ${model.assets.length} assets`,\n    // );\n  }\n  index = model.assets.findIndex(a => {\n    return a.NAME === taxPot;\n  });\n  if (index >= 0) {\n    log(`still found taxPot!`);\n    model.assets.splice(index, 1);\n  }\n  model.version = 3;\n}\nfunction migrateFromV3(model: ModelData) {\n  if (showMigrationLogs) {\n    log(\n      `in migrateOldVersions at v3, model has ${model.settings.length} settings`,\n    );\n  }\n  if (\n    model.settings.findIndex(x => {\n      return x.NAME === taxChartFocusPerson;\n    }) === -1\n  ) {\n    model.settings.push({\n      ...viewSetting,\n      NAME: taxChartFocusPerson,\n      VALUE: allItems,\n    });\n  }\n  if (\n    model.settings.findIndex(x => {\n      return x.NAME === taxChartFocusType;\n    }) === -1\n  ) {\n    model.settings.push({\n      ...viewSetting,\n      NAME: taxChartFocusType,\n      VALUE: allItems,\n    });\n  }\n  if (\n    model.settings.findIndex(x => {\n      return x.NAME === taxChartShowNet;\n    }) === -1\n  ) {\n    model.settings.push({\n      ...viewSetting,\n      NAME: taxChartShowNet,\n      VALUE: 'Y',\n    });\n  }\n  model.version = 4;\n}\nfunction migrateFromV4(model: ModelData) {\n  // log(`in migrateFromV4`);\n  if (showMigrationLogs) {\n    log(\n      `in migrateOldVersions at v4, model has ${model.settings.length} settings`,\n    );\n  }\n  // strip away any settings values which are no longer\n  // stored persistently\n  const debtChartView = 'Type of view for debt chart';\n  const namesForRemoval = [\n    viewFrequency,\n    chartViewType,\n    debtChartView,\n    viewDetail,\n    assetChartFocus,\n    debtChartFocus,\n    expenseChartFocus,\n    incomeChartFocus,\n    taxChartFocusPerson,\n    taxChartFocusType,\n    taxChartShowNet,\n  ];\n  namesForRemoval.forEach(name => {\n    const idx = model.settings.findIndex(s => {\n      return s.NAME === name;\n    });\n    if (idx >= 0) {\n      // log(`setting setting ${name} to value ${model.settings[idx].VALUE}`);\n      // When loading in an old model, set the view from the\n      // old-style settings data.\n      // This only matters for keeping tests passing.\n      migrateViewSetting(model.settings[idx]);\n      model.settings.splice(idx, 1);\n    }\n  });\n  model.version = 5;\n}\n\nfunction changeSpecialWords(\n  model: ModelData,\n  transactionChanges: {\n    oldPart: string;\n    newPart: string;\n  }[],\n  incomeChanges: {\n    oldPart: string;\n    newPart: string;\n  }[],\n  assetChanges: {\n    oldPart: string;\n    newPart: string;\n  }[],\n) {\n  model.transactions.forEach(t => {\n    transactionChanges.forEach(ch => {\n      if (t.NAME.startsWith(ch.oldPart)) {\n        // log(`old t.NAME=${t.NAME}`);\n        t.NAME = `${ch.newPart}${t.NAME.substring(\n          ch.oldPart.length,\n          t.NAME.length,\n        )}`;\n        // log(`new t.NAME=${t.NAME}`);\n      }\n      let words = t.FROM.split(separator);\n      let newWords: string[] = [];\n      let hasChanged = false;\n      words.forEach(w => {\n        if (w.startsWith(ch.oldPart)) {\n          // log(`old t.FROM w = ${w}`);\n          w = `${ch.newPart}${w.substring(ch.oldPart.length, w.length)}`;\n          hasChanged = true;\n          // log(`new t.FROM w = ${w}`);\n        }\n        if (ch.oldPart === 'TaxFree') {\n          if (w.endsWith(ch.oldPart)) {\n            // log(`old w = ${w`);\n            w = `${ch.newPart}${w.substring(0, w.length - ch.oldPart.length)}`;\n            hasChanged = true;\n            // log(`new w = ${w}`);\n          }\n        }\n        newWords.push(w);\n      });\n      if (hasChanged) {\n        t.FROM = '';\n        newWords.forEach(w => {\n          t.FROM = `${t.FROM}${w}${separator}`;\n        });\n        t.FROM = t.FROM.substring(0, t.FROM.length - 1);\n        // log(`new t.FROM = ${t.FROM}`);\n      }\n      words = t.TO.split(separator);\n      newWords = [];\n      hasChanged = false;\n      words.forEach(w => {\n        if (w.startsWith(ch.oldPart)) {\n          // log(`old t.TO w = ${w}`);\n          w = `${ch.newPart}${w.substring(ch.oldPart.length, w.length)}`;\n          hasChanged = true;\n          // log(`new t.TO w = ${w}`);\n        }\n        if (ch.oldPart === 'TaxFree') {\n          if (w.endsWith(ch.oldPart)) {\n            // log(`old w = ${w`);\n            w = `${ch.newPart}${w.substring(0, w.length - ch.oldPart.length)}`;\n            hasChanged = true;\n            // log(`new w = ${w}`);\n          }\n        }\n        newWords.push(w);\n      });\n      if (hasChanged) {\n        t.TO = '';\n        newWords.forEach(w => {\n          t.TO = `${t.TO}${w}${separator}`;\n        });\n        t.TO = t.TO.substring(0, t.TO.length - 1);\n        // log(`new t.TO = ${t.TO}`);\n      }\n    });\n  });\n  model.incomes.forEach(i => {\n    incomeChanges.forEach(ch => {\n      if (i.NAME.startsWith(ch.oldPart)) {\n        // log(`old i.NAME=${i.NAME}`);\n        i.NAME = `${ch.newPart}${i.NAME.substring(\n          ch.oldPart.length,\n          i.NAME.length,\n        )}`;\n        // log(`new i.NAME=${i.NAME}`);\n      }\n    });\n  });\n  model.assets.forEach(a => {\n    assetChanges.forEach(ch => {\n      // log(`check for name change ${a.NAME}`);\n      if (a.NAME.startsWith(ch.oldPart)) {\n        // log(`old a.NAME=${a.NAME}`);\n        a.NAME = `${ch.newPart}${a.NAME.substring(\n          ch.oldPart.length,\n          a.NAME.length,\n        )}`;\n        // log(`new a.NAME=${a.NAME}`);\n      }\n      if (ch.oldPart === 'TaxFree') {\n        if (a.NAME.endsWith(ch.oldPart)) {\n          // log(`old a.NAME=${a.NAME}`);\n          a.NAME = `${ch.newPart}${a.NAME.substring(\n            0,\n            a.NAME.length - ch.oldPart.length,\n          )}`;\n          // log(`new a.NAME=${a.NAME}`);\n        }\n      }\n    });\n  });\n}\n\nfunction migrateFromV5(model: ModelData) {\n  // log(`migrate from V5`);\n  const transactionChanges = [\n    {\n      oldPart: 'PensionSS',\n      newPart: pensionSS,\n    },\n    {\n      oldPart: 'PensionTransfer',\n      newPart: pensionTransfer,\n    },\n    {\n      oldPart: 'PensionDB',\n      newPart: pensionDB,\n    },\n    {\n      oldPart: 'Pension',\n      newPart: pension,\n    },\n    {\n      oldPart: 'TransferCrystallizedPension',\n      newPart: transferCrystallizedPension,\n    },\n    {\n      oldPart: 'CrystallizedPension',\n      newPart: crystallizedPension,\n    },\n    {\n      oldPart: 'TaxFree',\n      newPart: taxFree,\n    },\n    {\n      oldPart: 'MoveTaxFreePart',\n      newPart: moveTaxFreePart,\n    },\n  ];\n  const incomeChanges = [\n    {\n      oldPart: 'PensionDB',\n      newPart: pensionDB,\n    },\n    {\n      oldPart: 'PensionTransfer',\n      newPart: pensionTransfer,\n    },\n  ];\n  const assetChanges = [\n    {\n      oldPart: 'CrystallizedPension',\n      newPart: crystallizedPension,\n    },\n    {\n      oldPart: 'Pension',\n      newPart: pension,\n    },\n    {\n      oldPart: 'TaxFree',\n      newPart: taxFree,\n    },\n  ];\n  changeSpecialWords(model, transactionChanges, incomeChanges, assetChanges);\n  model.version = 6;\n  // log(`model is ${showObj(model)}`);\n}\nfunction migrateFromV6(model: ModelData) {\n  const transactionChanges = [\n    {\n      oldPart: '-DBT ',\n      newPart: pensionTransfer,\n    },\n    {\n      oldPart: '-DB ',\n      newPart: pensionDB,\n    },\n    {\n      oldPart: '-DC ',\n      newPart: pension,\n    },\n  ];\n  const incomeChanges = [\n    {\n      oldPart: '-DB ',\n      newPart: pensionDB,\n    },\n    {\n      oldPart: '-DBT ',\n      newPart: pensionTransfer,\n    },\n  ];\n  const assetChanges = [\n    {\n      oldPart: '-DC ',\n      newPart: pension,\n    },\n  ];\n  changeSpecialWords(model, transactionChanges, incomeChanges, assetChanges);\n  model.version = 7;\n}\nfunction migrateFromV7(model: ModelData) {\n  // assets were called\n  // crystallizedPension + name\n  // should now be called\n  // crystallizedPension + name + dot + pensionName\n\n  // Each cpAsset has a transaction which pays into it\n  // where the transactionName also begins crystallizedPension\n  const nameToPension = new Map<string, string>();\n  model.transactions.forEach(t => {\n    if (t.NAME.startsWith(crystallizedPension)) {\n      const name = t.TO.substring(crystallizedPension.length);\n      const pensionName = t.NAME.substring(crystallizedPension.length);\n      // log(`nameToPension gets [${name}, ${pensionName}]`);\n      nameToPension.set(name, pensionName);\n    }\n  });\n  model.transactions.forEach(t => {\n    // log(`check for name change ${a.NAME}`);\n    if (\n      t.FROM.startsWith(crystallizedPension) &&\n      t.TO.startsWith(crystallizedPension) &&\n      nameToPension.get(t.TO.substring(crystallizedPension.length)) ===\n        undefined\n    ) {\n      const fromName = nameToPension.get(\n        t.FROM.substring(crystallizedPension.length),\n      );\n      if (fromName !== undefined) {\n        nameToPension.set(t.TO.substring(crystallizedPension.length), fromName);\n      }\n    }\n  });\n\n  model.assets.forEach(a => {\n    // log(`check for name change ${a.NAME}`);\n    if (a.NAME.startsWith(crystallizedPension)) {\n      const person = a.NAME.substring(crystallizedPension.length);\n      let pensionName = 'pensionName';\n      const mapEntry = nameToPension.get(person);\n      // log(`nameToPension has [${person}, ${mapEntry}]`);\n      if (mapEntry !== undefined) {\n        pensionName = mapEntry;\n      }\n      a.NAME = `${crystallizedPension}${person}${dot}${pensionName}`;\n    }\n  });\n  model.transactions.forEach(t => {\n    let words = t.FROM.split(separator);\n    let newWords: string[] = [];\n    let hasChanged = false;\n    words.forEach(w => {\n      if (w.startsWith(crystallizedPension)) {\n        // log(`old t.FROM w = ${w}`);\n        const person = w.substring(crystallizedPension.length);\n        let pensionName = 'pensionName';\n        const mapEntry = nameToPension.get(person);\n        // log(`nameToPension has [${person}, ${mapEntry}]`);\n        if (mapEntry !== undefined) {\n          pensionName = mapEntry;\n        }\n        w = `${crystallizedPension}${person}${dot}${pensionName}`;\n        hasChanged = true;\n        // log(`new t.FROM w = ${w}`);\n      }\n      newWords.push(w);\n    });\n    if (hasChanged) {\n      t.FROM = '';\n      newWords.forEach(w => {\n        t.FROM = `${t.FROM}${w}${separator}`;\n      });\n      t.FROM = t.FROM.substring(0, t.FROM.length - 1);\n      // log(`new t.FROM = ${t.FROM}`);\n    }\n    words = t.TO.split(separator);\n    newWords = [];\n    hasChanged = false;\n    words.forEach(w => {\n      if (w.startsWith(crystallizedPension)) {\n        // log(`old t.FROM w = ${w}`);\n        const person = w.substring(crystallizedPension.length);\n        let pensionName = 'pensionName';\n        const mapEntry = nameToPension.get(person);\n        // log(`nameToPension has [${person}, ${mapEntry}]`);\n        if (mapEntry !== undefined) {\n          pensionName = mapEntry;\n        }\n        w = `${crystallizedPension}${person}${dot}${pensionName}`;\n        hasChanged = true;\n        // log(`new t.FROM w = ${w}`);\n      }\n      newWords.push(w);\n    });\n    if (hasChanged) {\n      t.TO = '';\n      newWords.forEach(w => {\n        t.TO = `${t.TO}${w}${separator}`;\n      });\n      t.TO = t.TO.substring(0, t.TO.length - 1);\n      // log(`new t.TO = ${t.TO}`);\n    }\n  });\n  model.version = 8;\n}\n/*\nfunction migrateFromV8(model: ModelData){\n  model.version = 9;\n}\n*/\nexport function migrateOldVersions(model: ModelData) {\n  if (showMigrationLogs) {\n    log(`in migrateOldVersions, model is ${model.version}`);\n    // log(`in migrateOldVersions, model has ${model.settings.map(showObj)}`);\n  }\n  if (model.version === 0) {\n    migrateFromV0(model);\n  }\n  if (model.version === 1) {\n    migrateFromV1(model);\n  }\n  if (model.version === 2) {\n    migrateFromV2(model);\n  }\n  if (model.version === 3) {\n    migrateFromV3(model);\n  }\n  if (model.version === 4) {\n    migrateFromV4(model);\n  }\n  if (model.version === 5) {\n    migrateFromV5(model);\n  }\n  if (model.version === 6) {\n    migrateFromV6(model);\n  }\n  if (model.version === 7) {\n    migrateFromV7(model);\n  }\n  /*\n  if (model.version === 8) {\n    migrateFromV8(model);\n  }\n  */\n  // log(`model after migration is ${showObj(model)}`);\n\n  // should throw immediately to alert of problems\n  if (model.version !== getCurrentVersion()) {\n    // log(`model.version = ${model.version}\n    //   but current version is ${getCurrentVersion()}`);\n    throw new Error('code not properly handling versions');\n  }\n}\n","import {\n  CASH_ASSET_NAME,\n  CoarseAndFine,\n  FutureExpense,\n  MinimalModel,\n  TestModel01,\n  TestModel02,\n  ThreeChryslerModel,\n  allItems,\n  annually,\n  assetChartFocus,\n  chartVals,\n  chartViewType,\n  birthDate,\n  birthDateHint,\n  coarse,\n  constType,\n  cpi,\n  cpiHint,\n  debtChartFocus,\n  expenseChartFocus,\n  fine,\n  incomeChartFocus,\n  incomeTax,\n  monthly,\n  payOffDebt,\n  revalueAsset,\n  roiEnd,\n  roiEndHint,\n  roiStart,\n  roiStartHint,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n  valueFocusDate,\n  valueFocusDateHint,\n  viewDetail,\n  viewFrequency,\n  viewType,\n  BenAndJerryModel,\n  custom,\n  pensionTransfer,\n  pensionDB,\n  taxFree,\n  crystallizedPension,\n  transferCrystallizedPension,\n  moveTaxFreePart,\n  pension,\n} from '../localization/stringConstants';\nimport {\n  Asset,\n  Expense,\n  Income,\n  ModelData,\n  Setting,\n  Transaction,\n} from '../types/interfaces';\nimport {\n  setSetting,\n  setROI,\n  makeModelFromJSONString,\n  makeModelFromJSON,\n} from './modelUtils';\nimport { getCurrentVersion } from './versioningUtils';\n\nexport const simpleExampleData = `{\"triggers\":[\n{\"NAME\":\"GetRidOfCar\",\"DATE\":\"2025-12-31\"},\n{\"NAME\":\"StopMainWork\",\"DATE\":\"2050-12-31\"},\n{\"NAME\":\"TransferMortgage\",\"DATE\":\"2028-01-01\"}],\n\"expenses\":[\n{\"NAME\":\"Look after dogs\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"2 February 2047\",\"VALUE\":\"500\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Run car\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"GetRidOfCar\",\"VALUE\":\"700\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"5\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Run house\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"2 February 2099\",\"VALUE\":\"1300\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"RECURRENCE\":\"1m\"}],\n\"incomes\":[\n{\"NAME\":\"Main income\",\"CATEGORY\":\"\",\"START\":\"1 March 2018\",\"END\":\"StopMainWork\",\"VALUE\":\"3500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"LIABILITY\":\"Joe(incomeTax)\"},\n{\"NAME\":\"Side hustle income\",\"CATEGORY\":\"hustle\",\"START\":\"1 March 2018\",\"END\":\"2 April 2025\",\"VALUE\":\"1500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Side hustle income later\",\"CATEGORY\":\"hustle\",\"START\":\"2 April 2025\",\"END\":\"2 April 2029\",\"VALUE\":\"1500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"0\",\"LIABILITY\":\"\"}],\n\"assets\":[\n{\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"December 2017\",\"VALUE\":\"2000\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":true,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"EarlyMortgage\",\"VALUE\":\"-234000\",\"QUANTITY\":\"\",\"START\":\"1 January 2018\",\"LIABILITY\":\"\",\"GROWTH\":\"2.33\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"mortgage\"},\n{\"NAME\":\"ISAs\",\"CATEGORY\":\"stock\",\"START\":\"December 2019\",\"VALUE\":\"2000\",\"GROWTH\":\"stockMarketGrowth\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"LateMortgage\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"1 January 2018\",\"LIABILITY\":\"\",\"GROWTH\":\"4.66\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"mortgage\"},\n{\"NAME\":\"Stocks\",\"CATEGORY\":\"stock\",\"START\":\"December 2017\",\"VALUE\":\"4000\",\"GROWTH\":\"stockMarketGrowth\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"}],\n\"transactions\":[\n{\"DATE\":\"1 January 2018\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"1500\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional pay early mortgage\",\"TO\":\"EarlyMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"TransferMortgage\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"pay mortgage\"},\n{\"DATE\":\"TransferMortgage\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"1500\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional pay late mortgage\",\"TO\":\"LateMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"pay mortgage\"},\n{\"NAME\":\"Each month buy food\",\"FROM\":\"Cash\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"200\",\"TO\":\"\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"0.0\",\"DATE\":\"January 2 2018\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"CATEGORY\":\"living costs\",\"TYPE\":\"custom\"},\n{\"DATE\":\"January 2 2020\",\"FROM\":\"\",\"FROM_VALUE\":\"0\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Revalue stocks after loss in 2020 market crash\",\"TO\":\"Stocks\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"3000\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"TYPE\":\"revalueAsset\",\"CATEGORY\":\"\"},\n{\"NAME\":\"SellCar\",\"FROM\":\"\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"0.0\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"1000\",\"DATE\":\"GetRidOfCar\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"custom\"},\n{\"NAME\":\"switchMortgage\",\"FROM\":\"EarlyMortgage\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1\",\"TO\":\"LateMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"TransferMortgage\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"custom\"}],\n\"settings\":[\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2019\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2042\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"stockMarketGrowth\",\"VALUE\":\"6.236\",\"HINT\":\"Custom setting for stock market growth\",\"TYPE\":\"adjustable\"},\n{\"NAME\": \"Today's value focus date\",\"VALUE\": \"\",\"HINT\": \"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\": \"view\"}\n]}`;\n\nexport const billAndBenExampleData = `{\"triggers\":[\n{\"NAME\":\"BenDies\",\"DATE\":\"2064-12-12\"},\n{\"NAME\":\"BenRetires\",\"DATE\":\"2037-07-27\"},\n{\"NAME\":\"BenStatePensionAge\",\"DATE\":\"2040-08-30\"},\n{\"NAME\":\"BillDies\",\"DATE\":\"2071-07-19\"},\n{\"NAME\":\"BillRetires\",\"DATE\":\"2040-05-04\"},\n{\"NAME\":\"BillStatePensionAge\",\"DATE\":\"2047-05-04\"},\n{\"NAME\":\"CareCostsStart\",\"DATE\":\"2055-12-12\"},\n{\"NAME\":\"DownsizeHouse\",\"DATE\":\"2047-02-28\"},\n{\"NAME\":\"start\",\"DATE\":\"2021-01-01\"}],\n\"expenses\":[\n{\"NAME\":\"BasicExpensesDownsize\",\"VALUE\":\"1600\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"DownsizeHouse\",\"END\":\"BillDies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Basic\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"BasicExpensesWorking\",\"VALUE\":\"1850\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"25/11/2019\",\"END\":\"DownsizeHouse\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"Basic\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"CareCosts\",\"CATEGORY\":\"Care\",\"START\":\"CareCostsStart\",\"END\":\"BillDies\",\"VALUE\":\"3500\",\"VALUE_SET\":\"25/11/2019\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"LeisureExpensesRetired\",\"CATEGORY\":\"Leisure\",\"START\":\"BillRetires\",\"END\":\"BillDies\",\"VALUE\":\"1500\",\"VALUE_SET\":\"25/11/2019\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"LeisureExpensesWorking\",\"VALUE\":\"1000\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"25/11/2019\",\"END\":\"CareCostsStart\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Leisure\",\"RECURRENCE\":\"1m\"}],\n\"incomes\":[\n{\"NAME\":\"BenSalary\",\"CATEGORY\":\"Salary\",\"START\":\"25/11/2019\",\"END\":\"BenRetires\",\"VALUE\":\"4000\",\"VALUE_SET\":\"25/11/2019\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Ben(incomeTax)/Ben(NI)\"},\n{\"NAME\":\"BenStatePension\",\"VALUE\":\"730\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"BenStatePensionAge\",\"END\":\"BenDies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Ben(incomeTax)\",\"CATEGORY\":\"Pension\"},\n{\"NAME\":\"BillDBPension\",\"VALUE\":\"2000\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"BillStatePensionAge\",\"END\":\"BillDies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Bill(incomeTax)\",\"CATEGORY\":\"Pension\"},\n{\"NAME\":\"BillSalary\",\"CATEGORY\":\"Salary\",\"START\":\"25/11/2019\",\"END\":\"BillRetires\",\"VALUE\":\"3000\",\"VALUE_SET\":\"25/11/2019\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Bill(incomeTax)/Bill(NI)\"},\n{\"NAME\":\"BillStatePension\",\"VALUE\":\"730\",\"VALUE_SET\":\"25/11/2019\",\"START\":\"BillStatePensionAge\",\"END\":\"BillDies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Bill(incomeTax)\",\"CATEGORY\":\"Pension\"}],\n\"transactions\":[\n{\"DATE\":\"DownsizeHouse\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"1\",\"FROM_ABSOLUTE\":false,\"NAME\":\"Conditional clear mortgage\",\"TO\":\"Mortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"\"},\n{\"DATE\":\"start\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"400\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Pay Ben Loan\",\"TO\":\"BenLoan\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"Clear Debts\"},\n{\"DATE\":\"start\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"300\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Pay Bill Loan\",\"TO\":\"BillLoan\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"Clear Debts\"},\n{\"DATE\":\"start\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"750\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Pay Mortgage\",\"TO\":\"Mortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"Clear Debts\"},\n{\"DATE\":\"BenRetires\",\"FROM\":\"CrystallizedPensionBen\",\"FROM_VALUE\":\"2000\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Sell Ben Pension For Cash\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\",\"CATEGORY\":\"\"},\n{\"DATE\":\"BillRetires\",\"FROM\":\"CrystallizedPensionBill\",\"FROM_VALUE\":\"2000\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Sell Bill Pension For Cash\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\",\"CATEGORY\":\"\"},\n{\"DATE\":\"start\",\"FROM\":\"BillStocks\",\"FROM_VALUE\":\"2000\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional Sell Stock For Cash\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\",\"CATEGORY\":\"\"},\n{\"DATE\":\"BenRetires\",\"FROM\":\"PensionBenDC\",\"FROM_VALUE\":\"1\",\"FROM_ABSOLUTE\":false,\"NAME\":\"CrystallizedPension Ben\",\"TO\":\"CrystallizedPensionBen\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"TYPE\":\"auto\",\"CATEGORY\":\"\"},\n{\"DATE\":\"BillRetires\",\"FROM\":\"PensionBillDC\",\"FROM_VALUE\":\"1\",\"FROM_ABSOLUTE\":false,\"NAME\":\"CrystallizedPension Bill\",\"TO\":\"CrystallizedPensionBill\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"TYPE\":\"auto\",\"CATEGORY\":\"\"},\n{\"DATE\":\"DownsizeHouse\",\"FROM\":\"House\",\"FROM_VALUE\":\"1\",\"FROM_ABSOLUTE\":false,\"NAME\":\"Sell House\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.95\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"custom\"}],\n\"assets\":[\n{\"NAME\":\"BenLoan\",\"VALUE\":\"-5000\",\"QUANTITY\":\"\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Debt\"},\n{\"NAME\":\"BillLoan\",\"VALUE\":\"-5000\",\"QUANTITY\":\"\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"2.5\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Debt\"},\n{\"NAME\":\"BillStocks\",\"VALUE\":\"25000\",\"START\":\"start\",\"LIABILITY\":\"Bill(CGT)\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"PURCHASE_PRICE\":\"14000\",\"CATEGORY\":\"Investment\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"Cash\",\"START\":\"1 Jan 2017\",\"VALUE\":\"0\",\"GROWTH\":\"0.0\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionBen\",\"VALUE\":\"0\",\"START\":\"start\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0\",\"LIABILITY\":\"\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionBill\",\"VALUE\":\"0\",\"START\":\"start\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0\",\"LIABILITY\":\"\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"House\",\"VALUE\":\"275000\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Property\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"ISA\",\"VALUE\":\"9000\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Investment\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"Mortgage\",\"VALUE\":\"-250000\",\"QUANTITY\":\"\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"3.5\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Debt\"},\n{\"NAME\":\"PensionBenDC\",\"VALUE\":\"75000\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Pension\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"PensionBillDC\",\"VALUE\":\"90000\",\"START\":\"start\",\"LIABILITY\":\"\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"Pension\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"}],\n\"settings\":[\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2020\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"0.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2075\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n {\"NAME\": \"Today's value focus date\",\"VALUE\": \"\",\"HINT\": \"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\": \"view\"}]}`;\n\nexport const mortgageSwitchExampleData = `{\"triggers\":[\n{\"NAME\":\"GetRidOfCar\",\"DATE\":\"2025-12-31\"},\n{\"NAME\":\"StopMainWork\",\"DATE\":\"2050-12-31\"},\n{\"NAME\":\"TransferMortgage\",\"DATE\":\"2028-01-01\"}],\n\"expenses\":[\n{\"NAME\":\"Look after dogs\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"2 February 2047\",\"VALUE\":\"500\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Run car\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"GetRidOfCar\",\"VALUE\":\"700\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"5\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Run house\",\"CATEGORY\":\"living costs\",\"START\":\"1 April 2018\",\"END\":\"2 February 2099\",\"VALUE\":\"1300\",\"VALUE_SET\":\"1 April 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"RECURRENCE\":\"1m\"}],\n\"incomes\":[\n{\"NAME\":\"Main income\",\"CATEGORY\":\"\",\"START\":\"1 March 2018\",\"END\":\"StopMainWork\",\"VALUE\":\"3500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"2\",\"LIABILITY\":\"Joe(incomeTax)\"},\n{\"NAME\":\"Side hustle income\",\"CATEGORY\":\"hustle\",\"START\":\"1 March 2018\",\"END\":\"2 April 2025\",\"VALUE\":\"1500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Side hustle income later\",\"CATEGORY\":\"hustle\",\"START\":\"2 April 2025\",\"END\":\"2 April 2029\",\"VALUE\":\"1500\",\"VALUE_SET\":\"1 March 2018\",\"CPI_IMMUNE\":false,\"GROWTH\":\"0\",\"LIABILITY\":\"\"}],\n\"assets\":[\n{\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"December 2017\",\"VALUE\":\"2000\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":true,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"EarlyMortgage\",\"VALUE\":\"-234000\",\"QUANTITY\":\"\",\"START\":\"1 January 2018\",\"LIABILITY\":\"\",\"GROWTH\":\"2.33\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"mortgage\"},\n{\"NAME\":\"ISAs\",\"CATEGORY\":\"stock\",\"START\":\"December 2019\",\"VALUE\":\"2000\",\"GROWTH\":\"stockMarketGrowth\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"},\n{\"NAME\":\"LateMortgage\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"1 January 2018\",\"LIABILITY\":\"\",\"GROWTH\":\"4.66\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"mortgage\"},\n{\"NAME\":\"Stocks\",\"CATEGORY\":\"stock\",\"START\":\"December 2017\",\"VALUE\":\"4000\",\"GROWTH\":\"stockMarketGrowth\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0\",\"IS_A_DEBT\":false,\"QUANTITY\":\"\"}],\n\"transactions\":[\n{\"DATE\":\"1 January 2018\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"1500\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional pay early mortgage\",\"TO\":\"EarlyMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"TransferMortgage\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"pay mortgage\"},\n{\"DATE\":\"TransferMortgage\",\"FROM\":\"Cash\",\"FROM_VALUE\":\"1500\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Conditional pay late mortgage\",\"TO\":\"LateMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"STOP_DATE\":\"1 January 2040\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\",\"CATEGORY\":\"pay mortgage\"},\n{\"NAME\":\"Each month buy food\",\"FROM\":\"Cash\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"200\",\"TO\":\"\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"0.0\",\"DATE\":\"January 2 2018\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"CATEGORY\":\"living costs\",\"TYPE\":\"custom\"},\n{\"DATE\":\"January 2 2020\",\"FROM\":\"\",\"FROM_VALUE\":\"0\",\"FROM_ABSOLUTE\":true,\"NAME\":\"Revalue stocks after loss in 2020 market crash\",\"TO\":\"Stocks\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"3000\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"TYPE\":\"revalueAsset\",\"CATEGORY\":\"\"},\n{\"NAME\":\"SellCar\",\"FROM\":\"\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"0.0\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":true,\"TO_VALUE\":\"1000\",\"DATE\":\"GetRidOfCar\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"custom\"},\n{\"NAME\":\"switchMortgage\",\"FROM\":\"EarlyMortgage\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1\",\"TO\":\"LateMortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"TransferMortgage\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"custom\"}],\n\"settings\":[\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2019\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2042\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"stockMarketGrowth\",\"VALUE\":\"6.236\",\"HINT\":\"Custom setting for stock market growth\",\"TYPE\":\"adjustable\"},\n {\"NAME\": \"Today's value focus date\",\"VALUE\": \"\",\"HINT\": \"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\": \"view\"}]}`;\n\nexport const definedBenefitsPension = `{\"assets\":[\n{\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"1 Jan 2019\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"GROWTH\":\"0.0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0.0\"}],\n\"incomes\":[\n{\"NAME\":\"TeachingJob\",\"VALUE\":\"2500\",\"VALUE_SET\":\"JobStart\",\"START\":\"JobStart\",\"END\":\"JobStop\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\",\"CATEGORY\":\"\"},\n{\"START\":\"PensionBegins\",\"END\":\"PensionStops\",\"NAME\":\"PensionTransferTeachersPensionScheme\",\"VALUE\":\"0.0\",\"VALUE_SET\":\"PensionExists\",\"LIABILITY\":\"Jack(incomeTax)\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"},\n{\"START\":\"PensionBegins\",\"END\":\"PensionTransfers\",\"NAME\":\"PensionDBTeachersPensionScheme\",\"VALUE\":\"0\",\"VALUE_SET\":\"PensionExists\",\"LIABILITY\":\"Joe(incomeTax)\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"}],\n\"expenses\":[\n],\"triggers\":[\n{\"NAME\":\"PensionTransfers\",\"DATE\":\"2035-01-01\"},\n{\"NAME\":\"PensionStops\",\"DATE\":\"2040-01-01\"},\n{\"NAME\":\"PensionExists\",\"DATE\":\"2022-01-01\"},\n{\"NAME\":\"PensionBegins\",\"DATE\":\"2030-01-01\"},\n{\"NAME\":\"JobStop\",\"DATE\":\"2028-01-01\"},\n{\"NAME\":\"JobStart\",\"DATE\":\"2020-01-01\"}],\n\"settings\":[\n{\"NAME\":\"Today's value focus date\",\"VALUE\":\"\",\"HINT\":\"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2045\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2017\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"}],\n\"transactions\":[\n{\"NAME\":\"PensionTransferTeachersPensionScheme\",\"FROM\":\"PensionDBTeachersPensionScheme\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"PensionTransferTeachersPensionScheme\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.5\",\"DATE\":\"PensionTransfers\",\"STOP_DATE\":\"PensionStops\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionTeachersPensionScheme\",\"FROM\":\"TeachingJob\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.0\",\"DATE\":\"PensionExists\",\"STOP_DATE\":\"JobStop\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionDBTeachersPensionScheme\",\"FROM\":\"TeachingJob\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.0016666666666666668\",\"TO\":\"PensionDBTeachersPensionScheme\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"PensionExists\",\"STOP_DATE\":\"JobStop\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"}],\n\"version\":4}`;\n\nexport const definedContributionsPension = `{\"expenses\":[\n],\"incomes\":[\n{\"NAME\":\"javaJob1\",\"CATEGORY\":\"programming\",\"START\":\"2021\",\"END\":\"2028\",\"VALUE\":\"2500\",\"VALUE_SET\":\"2020\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\"}],\n\"assets\":[\n{\"NAME\":\"PensionAegon\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"2.0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionJoe\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"2.0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionJack\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"2.0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"1 Jan 2017\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"GROWTH\":\"0.0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0.0\"},\n{\"NAME\":\"AegonTaxFree\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"2.0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"}],\n\"transactions\":[\n{\"NAME\":\"TransferCrystallizedPensionAegon\",\"FROM\":\"CrystallizedPensionJoe\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionJack\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2035\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionAegon\",\"FROM\":\"javaJob1\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"PensionAegon\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"11\",\"DATE\":\"2021\",\"STOP_DATE\":\"2025\",\"RECURRENCE\":\"\",\"CATEGORY\":\"pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"MoveTaxFreePartAegon\",\"FROM\":\"PensionAegon\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.25\",\"TO\":\"AegonTaxFree\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2030\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"CrystallizedPensionAegon\",\"FROM\":\"PensionAegon\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionJoe\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2030\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"pension\",\"TYPE\":\"auto\"}],\n\"settings\":[\n{\"NAME\":\"Today's value focus date\",\"VALUE\":\"\",\"HINT\":\"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\":\"view\"},\n{\"NAME\":\"stockMarketGrowth\",\"VALUE\":\"6.236\",\"HINT\":\"Custom setting for stock market growth\",\"TYPE\":\"const\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Feb 2045\",\"HINT\":\"\",\"TYPE\":\"const\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2019\",\"HINT\":\"\",\"TYPE\":\"const\"}],\n\"triggers\":[\n],\"version\":4}`;\n\nexport const nationalSavings = `{\"assets\":[\n{\"NAME\":\"NI\",\"VALUE\":\"1000000\",\"QUANTITY\":\"\",\"START\":\"startDate\",\"LIABILITY\":\"\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"\"},\n{\"NAME\":\"Cash\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"startDate\",\"LIABILITY\":\"\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":false,\"PURCHASE_PRICE\":\"0\",\"CATEGORY\":\"\"}],\n\"incomes\":[\n{\"NAME\":\"NIinterest\",\"CATEGORY\":\"\",\"START\":\"startDate\",\"END\":\"stopDate\",\"VALUE\":\"0.001241NI\",\"VALUE_SET\":\"startDate\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\"}],\n\"expenses\":[\n{\"NAME\":\"LivingCosts\",\"CATEGORY\":\"\",\"START\":\"startDate\",\"END\":\"stopDate\",\"VALUE\":\"900\",\"VALUE_SET\":\"startDate\",\"GROWTH\":\"5\",\"CPI_IMMUNE\":false,\"RECURRENCE\":\"1m\"}],\n\"triggers\":[\n{\"NAME\":\"stopDate\",\"DATE\":\"2040-01-01\"},\n{\"NAME\":\"startDate\",\"DATE\":\"2020-01-01\"}],\n\"settings\":[\n{\"NAME\":\"Today's value focus date\",\"VALUE\":\"\",\"HINT\":\"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2030\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"1 Jan 2017\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"}],\n\"transactions\":[\n],\"version\":4}`;\n\nexport const benAndJerryExampleData = `\n{\"assets\":[\n{\"NAME\":\"PensionJerry Aegon\",\"VALUE\":\"56324\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"PensionBen Prudential\",\"VALUE\":\"45000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Mortgage\",\"VALUE\":\"-150000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"3.5\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"CATEGORY\":\"Property\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Jerry stocks\",\"VALUE\":\"25000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Investment\",\"PURCHASE_PRICE\":\"14000\",\"LIABILITY\":\"Jerry(CGT)\"},\n{\"NAME\":\"Jerry loan\",\"VALUE\":\"-5000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"2.5\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Jerry AegonTaxFree\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"ISA\",\"VALUE\":\"9000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Investment\",\"PURCHASE_PRICE\":\"0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"House\",\"VALUE\":\"255000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Property\",\"PURCHASE_PRICE\":\"0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionJerry\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"CrystallizedPensionBen\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"1 Jan 2017\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"GROWTH\":\"0.0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0.0\"},\n{\"NAME\":\"Ben PrudentialTaxFree\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"4\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"Pension\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n{\"NAME\":\"Ben loan\",\"VALUE\":\"-5000\",\"QUANTITY\":\"\",\"START\":\"21/02/2020\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":true,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"}],\"incomes\":[\n{\"START\":\"Jerry state pension age\",\"END\":\"Ben dies\",\"NAME\":\"PensionTransferJerry work\",\"VALUE\":\"0.0\",\"VALUE_SET\":\"21/02/2020\",\"LIABILITY\":\"Ben(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Pension\"},\n{\"START\":\"Jerry state pension age\",\"END\":\"Jerry dies\",\"NAME\":\"PensionDBJerry work\",\"VALUE\":\"2000\",\"VALUE_SET\":\"21/02/2020\",\"LIABILITY\":\"Jerry(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Pension\"},\n{\"START\":\"Jerry state pension age\",\"END\":\"Jerry dies\",\"NAME\":\"PensionDBJerry state pension\",\"VALUE\":\"730\",\"VALUE_SET\":\"21/02/2020\",\"LIABILITY\":\"Jerry(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Pension\"},\n{\"START\":\"Ben state pension age\",\"END\":\"Ben dies\",\"NAME\":\"PensionDBBen state pension\",\"VALUE\":\"730\",\"VALUE_SET\":\"21/02/2020\",\"LIABILITY\":\"Ben(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Pension\"},\n{\"NAME\":\"Jerry salary\",\"VALUE\":\"2755\",\"VALUE_SET\":\"21/2/2020\",\"START\":\"21/2/2020\",\"END\":\"Jerry retires\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Jerry(incomeTax)/Jerry(NI)\",\"CATEGORY\":\"Salary\"},\n{\"NAME\":\"Ben salary\",\"VALUE\":\"3470\",\"VALUE_SET\":\"21/2/2020\",\"START\":\"21/2/2020\",\"END\":\"Ben retires\",\"GROWTH\":\"2\",\"CPI_IMMUNE\":false,\"LIABILITY\":\"Ben(incomeTax)/Ben(NI)\",\"CATEGORY\":\"Salary\"}],\"expenses\":[\n{\"NAME\":\"Replace car\",\"VALUE\":\"20000\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"21/02/2025\",\"END\":\"Care costs start\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Major costs\",\"RECURRENCE\":\"5y\"},\n{\"NAME\":\"Leisure expenses working\",\"VALUE\":\"1000\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"21/02/2020\",\"END\":\"Jerry retires\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Leisure\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Leisure expenses retired\",\"VALUE\":\"2000\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"Jerry retires\",\"END\":\"Care costs start\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Leisure\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"House maintenance\",\"VALUE\":\"8000\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"21/02/2020\",\"END\":\"Care costs start\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Major costs\",\"RECURRENCE\":\"4y\"},\n{\"NAME\":\"Care costs\",\"VALUE\":\"3000\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"Care costs start\",\"END\":\"Ben dies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Care\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Basic expenses small house\",\"VALUE\":\"1600\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"Downsize house\",\"END\":\"Ben dies\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Basic\",\"RECURRENCE\":\"1m\"},\n{\"NAME\":\"Basic expenses current house\",\"VALUE\":\"1850\",\"VALUE_SET\":\"21/02/2020\",\"START\":\"21/02/2020\",\"END\":\"Downsize house\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CATEGORY\":\"Basic\",\"RECURRENCE\":\"1m\"}],\n\"triggers\":[\n{\"NAME\":\"Ben dies\",\"DATE\":\"2068-08-30\"},\n{\"NAME\":\"Ben retires\",\"DATE\":\"2032-07-27\"},\n{\"NAME\":\"Ben state pension age\",\"DATE\":\"2040-08-30\"},\n{\"NAME\":\"Care costs start\",\"DATE\":\"2060-02-20\"},\n{\"NAME\":\"Downsize house\",\"DATE\":\"2047-02-28\"},\n{\"NAME\":\"Jerry dies\",\"DATE\":\"2065-05-04\"},\n{\"NAME\":\"Jerry retires\",\"DATE\":\"2030-05-04\"},\n{\"NAME\":\"Jerry state pension age\",\"DATE\":\"2037-05-04\"}],\"settings\":[\n{\"NAME\":\"Today's value focus date\",\"VALUE\":\"\",\"HINT\":\"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\":\"view\"},\n{\"NAME\":\"End of view range\",\"VALUE\":\"2069\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n{\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n{\"NAME\":\"cpi\",\"VALUE\":\"2.5\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n{\"NAME\":\"Beginning of view range\",\"VALUE\":\"2020\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"}],\"transactions\":[\n{\"NAME\":\"TransferCrystallizedPensionJerry Aegon\",\"FROM\":\"CrystallizedPensionJerry\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionBen\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Jerry dies\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"TransferCrystallizedPensionBen Prudential\",\"FROM\":\"CrystallizedPensionBen\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionJerry\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Ben dies\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionTransferJerry work\",\"FROM\":\"PensionDBJerry work\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"PensionTransferJerry work\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.5\",\"DATE\":\"Jerry dies\",\"STOP_DATE\":\"Ben dies\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionJerry work\",\"FROM\":\"Jerry salary\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"Jerry retires\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionJerry Aegon\",\"FROM\":\"\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0\",\"TO\":\"PensionJerry Aegon\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionDBJerry work\",\"FROM\":\"Jerry salary\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.00125\",\"TO\":\"PensionDBJerry work\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"Jerry retires\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"PensionBen Prudential\",\"FROM\":\"Ben salary\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.06\",\"TO\":\"PensionBen Prudential\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"3\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"Ben retires\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"MoveTaxFreePartJerry Aegon\",\"FROM\":\"PensionJerry Aegon\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.25\",\"TO\":\"Jerry AegonTaxFree\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Jerry retires\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"MoveTaxFreePartBen Prudential\",\"FROM\":\"PensionBen Prudential\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.25\",\"TO\":\"Ben PrudentialTaxFree\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Ben retires\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"CrystallizedPensionJerry Aegon\",\"FROM\":\"PensionJerry Aegon\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionJerry\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Jerry retires\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"CrystallizedPensionBen Prudential\",\"FROM\":\"PensionBen Prudential\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"CrystallizedPensionBen\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"Ben retires\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"Pension\",\"TYPE\":\"auto\"},\n{\"NAME\":\"ConditionalSell stocks for cash\",\"CATEGORY\":\"Cashflow\",\"FROM\":\"Jerry stocks\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"500\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalSell PrudentialTaxFree \",\"CATEGORY\":\"Cashflow\",\"FROM\":\"Ben PrudentialTaxFree\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"250\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalSell ISAs for cash\",\"CATEGORY\":\"Cashflow\",\"FROM\":\"ISA\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"500\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalSell CrystallizedPensionJerry \",\"CATEGORY\":\"Cashflow\",\"FROM\":\"CrystallizedPensionJerry\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"1000\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalSell CrystallizedPensionBen \",\"CATEGORY\":\"Cashflow\",\"FROM\":\"CrystallizedPensionBen\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"1000\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalSell AegonTaxFree\",\"CATEGORY\":\"Cashflow\",\"FROM\":\"Jerry AegonTaxFree\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"250\",\"TO\":\"Cash\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"liquidateAsset\"},\n{\"NAME\":\"ConditionalPayment to Mortgage 1\",\"CATEGORY\":\"Property\",\"FROM\":\"Cash\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"700\",\"TO\":\"Mortgage\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\"},\n{\"NAME\":\"ConditionalPayment to Jerry loan 1\",\"CATEGORY\":\"\",\"FROM\":\"Cash\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"250\",\"TO\":\"Jerry loan\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\"},\n{\"NAME\":\"ConditionalPayment to Ben loan 1\",\"CATEGORY\":\"\",\"FROM\":\"Cash\",\"FROM_ABSOLUTE\":true,\"FROM_VALUE\":\"500\",\"TO\":\"Ben loan\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"21/02/2020\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"1m\",\"TYPE\":\"payOffDebt\"}],\n\"version\":4,\n}`;\nexport const pensionExampleData = `\n{\"assets\":[\n  {\"NAME\":\"Cash\",\"CATEGORY\":\"\",\"START\":\"1 Jan 2017\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"GROWTH\":\"0.0\",\"CPI_IMMUNE\":true,\"CAN_BE_NEGATIVE\":true,\"IS_A_DEBT\":false,\"LIABILITY\":\"\",\"PURCHASE_PRICE\":\"0.0\"},\n  {\"NAME\":\"-PEN javaDCP\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-PEN cppDCP\",\"VALUE\":\"0\",\"QUANTITY\":\"\",\"START\":\"2022\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxFree javaDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxFree cppDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2022\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxable Joe.javaDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxable Joe.cppDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2022\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxable Jen.cppDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2022\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"},\n  {\"NAME\":\"-CPTaxable Jane.javaDCP\",\"VALUE\":\"0.0\",\"QUANTITY\":\"\",\"START\":\"2021\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":false,\"CAN_BE_NEGATIVE\":false,\"IS_A_DEBT\":false,\"CATEGORY\":\"\",\"PURCHASE_PRICE\":\"0.0\",\"LIABILITY\":\"\"}],\n  \"incomes\":[\n  {\"NAME\":\"JoeBasic\",\"VALUE\":\"1050\",\"VALUE_SET\":\"2020\",\"START\":\"2020\",\"END\":\"2030\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"JenBasic\",\"VALUE\":\"1050\",\"VALUE_SET\":\"2020\",\"START\":\"2020\",\"END\":\"2030\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Jen(incomeTax)/Jen(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"JeffBasic\",\"VALUE\":\"1050\",\"VALUE_SET\":\"2020\",\"START\":\"2020\",\"END\":\"2030\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Jeff(incomeTax)/Jeff(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"java\",\"VALUE\":\"3000\",\"VALUE_SET\":\"2020\",\"START\":\"2021\",\"END\":\"2022\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"JaneBasic\",\"VALUE\":\"1050\",\"VALUE_SET\":\"2020\",\"START\":\"2020\",\"END\":\"2030\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Jane(incomeTax)/Jane(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"JakeBasic\",\"VALUE\":\"1050\",\"VALUE_SET\":\"2020\",\"START\":\"2020\",\"END\":\"2030\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Jake(incomeTax)/Jake(NI)\",\"CATEGORY\":\"\"},\n  {\"NAME\":\"cpp\",\"VALUE\":\"4000\",\"VALUE_SET\":\"2020\",\"START\":\"2022\",\"END\":\"2023\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"LIABILITY\":\"Joe(incomeTax)/Joe(NI)\",\"CATEGORY\":\"\"},\n  {\"START\":\"2026\",\"END\":\"2028\",\"NAME\":\"-PT javaPensh\",\"VALUE\":\"0.0\",\"VALUE_SET\":\"2021\",\"LIABILITY\":\"Jeff(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"},\n  {\"START\":\"2026\",\"END\":\"2028\",\"NAME\":\"-PT cppPensh\",\"VALUE\":\"0.0\",\"VALUE_SET\":\"2022\",\"LIABILITY\":\"Jake(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"},\n  {\"START\":\"2026\",\"END\":\"2027\",\"NAME\":\"-PDB javaPensh\",\"VALUE\":\"0\",\"VALUE_SET\":\"2021\",\"LIABILITY\":\"Joe(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"},\n  {\"START\":\"2026\",\"END\":\"2027\",\"NAME\":\"-PDB cppPensh\",\"VALUE\":\"0\",\"VALUE_SET\":\"2022\",\"LIABILITY\":\"Joe(incomeTax)\",\"GROWTH\":\"0\",\"CPI_IMMUNE\":true,\"CATEGORY\":\"\"}],\n  \"expenses\":[],\n  \"triggers\":[],\n  \"settings\":[\n  {\"NAME\":\"Today's value focus date\",\"VALUE\":\"\",\"HINT\":\"Date to use for 'today's value' tables (defaults to '' meaning today)\",\"TYPE\":\"view\"},\n  {\"NAME\":\"End of view range\",\"VALUE\":\"1 Jan 2030\",\"HINT\":\"Date at the end of range to be plotted\",\"TYPE\":\"view\"},\n  {\"NAME\":\"Date of birth\",\"VALUE\":\"\",\"HINT\":\"Date used for representing dates as ages\",\"TYPE\":\"view\"},\n  {\"NAME\":\"cpi\",\"VALUE\":\"0\",\"HINT\":\"Annual rate of inflation\",\"TYPE\":\"const\"},\n  {\"NAME\":\"Beginning of view range\",\"VALUE\":\"30 Dec 2019\",\"HINT\":\"Date at the start of range to be plotted\",\"TYPE\":\"view\"}],\n  \"transactions\":[\n  {\"NAME\":\"-PT javaPensh\",\"FROM\":\"-PDB javaPensh\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-PT javaPensh\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.5\",\"DATE\":\"2027\",\"STOP_DATE\":\"2028\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PT cppPensh\",\"FROM\":\"-PDB cppPensh\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-PT cppPensh\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.5\",\"DATE\":\"2027\",\"STOP_DATE\":\"2028\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PEN javaPensh\",\"FROM\":\"java\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.0\",\"DATE\":\"2021\",\"STOP_DATE\":\"2022\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PEN javaDCP\",\"FROM\":\"java\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"-PEN javaDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"2\",\"DATE\":\"2021\",\"STOP_DATE\":\"2022\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PEN cppPensh\",\"FROM\":\"cpp\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"0.0\",\"DATE\":\"2022\",\"STOP_DATE\":\"2023\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PEN cppDCP\",\"FROM\":\"cpp\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.05\",\"TO\":\"-PEN cppDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"2\",\"DATE\":\"2022\",\"STOP_DATE\":\"2025\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PDB javaPensh\",\"FROM\":\"java\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.0016666666666666668\",\"TO\":\"-PDB javaPensh\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2021\",\"STOP_DATE\":\"2022\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-PDB cppPensh\",\"FROM\":\"cpp\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.0016666666666666668\",\"TO\":\"-PDB cppPensh\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2022\",\"STOP_DATE\":\"2023\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPTaxFreeM javaDCP\",\"FROM\":\"-PEN javaDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.25\",\"TO\":\"-CPTaxFree javaDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2023\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPTaxFreeM cppDCP\",\"FROM\":\"-PEN cppDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"0.25\",\"TO\":\"-CPTaxFree cppDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2024\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPTaxable javaDCP\",\"FROM\":\"-PEN javaDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-CPTaxable Joe.javaDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2023\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPTaxable cppDCP\",\"FROM\":\"-PEN cppDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-CPTaxable Joe.cppDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2024\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPT javaDCP\",\"FROM\":\"-CPTaxable Joe.javaDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-CPTaxable Jane.javaDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2024\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"},\n  {\"NAME\":\"-CPT cppDCP\",\"FROM\":\"-CPTaxable Joe.cppDCP\",\"FROM_ABSOLUTE\":false,\"FROM_VALUE\":\"1.0\",\"TO\":\"-CPTaxable Jen.cppDCP\",\"TO_ABSOLUTE\":false,\"TO_VALUE\":\"1.0\",\"DATE\":\"2025\",\"STOP_DATE\":\"\",\"RECURRENCE\":\"\",\"CATEGORY\":\"\",\"TYPE\":\"auto\"}],\n  \"version\":8}\n`;\n\nexport const simpleExpense: Expense = {\n  NAME: 'NoName',\n  CATEGORY: '',\n  START: '1 Jan 2017',\n  END: '1 Jan 2017',\n  VALUE: '0.0',\n  VALUE_SET: '1 Jan 2017',\n  CPI_IMMUNE: false,\n  GROWTH: '0.0',\n  RECURRENCE: '1m',\n};\nexport const simpleIncome: Income = {\n  NAME: 'NoName',\n  CATEGORY: '',\n  START: '1 Jan 2017',\n  END: '1 Jan 2017',\n  VALUE: '0',\n  VALUE_SET: '1 Jan 2017',\n  CPI_IMMUNE: false,\n  GROWTH: '0',\n  LIABILITY: '',\n};\nexport const simpleTransaction: Transaction = {\n  NAME: 'NoName',\n  FROM: '',\n  FROM_ABSOLUTE: true,\n  FROM_VALUE: '0.0',\n  TO: '',\n  TO_ABSOLUTE: true,\n  TO_VALUE: '0.0',\n  DATE: '1 Jan 2017',\n  STOP_DATE: '', // for regular transactions\n  RECURRENCE: '',\n  CATEGORY: '',\n  TYPE: custom,\n};\n\nexport const emptyModel: ModelData = {\n  triggers: [],\n  incomes: [],\n  expenses: [],\n  transactions: [],\n  assets: [],\n  settings: [],\n  version: 0,\n  undoModel: undefined,\n  redoModel: undefined,\n};\nexport const simpleSetting: Setting = {\n  NAME: 'NoName',\n  VALUE: 'NoValue',\n  HINT: 'NoHint',\n  TYPE: constType,\n};\nexport const viewSetting: Setting = {\n  ...simpleSetting,\n  HINT: '',\n  TYPE: viewType,\n};\n\nconst browserTestSettingsForMigration: Setting[] = [\n  {\n    ...viewSetting,\n    NAME: roiStart,\n    VALUE: '1 Jan 2019',\n    HINT: roiStartHint,\n  },\n  {\n    ...viewSetting,\n    NAME: roiEnd,\n    VALUE: '1 Feb 2019',\n    HINT: roiEndHint,\n  },\n  {\n    ...viewSetting,\n    NAME: chartViewType,\n    VALUE: chartVals, // could be 'deltas'\n  },\n  {\n    ...viewSetting,\n    NAME: viewFrequency,\n    VALUE: annually, // could be 'Monthly'\n  },\n  {\n    ...viewSetting,\n    NAME: viewDetail,\n    VALUE: fine, // could be coarse\n  },\n  {\n    ...simpleSetting,\n    NAME: cpi,\n    VALUE: '2.5',\n    HINT: cpiHint,\n  },\n  {\n    ...simpleSetting,\n    NAME: 'stockMarketGrowth',\n    VALUE: '6.236',\n    HINT: 'Custom setting for stock market growth',\n  },\n  {\n    ...viewSetting,\n    NAME: assetChartFocus,\n    VALUE: CASH_ASSET_NAME,\n  },\n  {\n    ...viewSetting,\n    NAME: expenseChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: incomeChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: birthDate,\n    VALUE: '',\n    HINT: birthDateHint,\n  },\n  {\n    ...viewSetting,\n    NAME: valueFocusDate,\n    VALUE: '',\n    HINT: valueFocusDateHint,\n  },\n];\n\nconst defaultModelSettingsForMigration: Setting[] = [\n  { ...viewSetting, NAME: viewDetail, VALUE: fine },\n  { ...viewSetting, NAME: chartViewType, VALUE: chartVals },\n  {\n    ...viewSetting,\n    NAME: assetChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: debtChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: expenseChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: incomeChartFocus,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: taxChartFocusPerson,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: taxChartFocusType,\n    VALUE: allItems,\n  },\n  {\n    ...viewSetting,\n    NAME: taxChartShowNet,\n    VALUE: 'Y',\n  },\n  {\n    ...simpleSetting,\n    NAME: cpi,\n    VALUE: '0.0',\n    HINT: cpiHint,\n  },\n  {\n    ...viewSetting,\n    NAME: birthDate,\n    VALUE: '',\n    HINT: birthDateHint,\n  },\n  {\n    ...viewSetting,\n    NAME: valueFocusDate,\n    VALUE: '',\n    HINT: valueFocusDateHint,\n  },\n];\n\nexport const simpleAsset: Asset = {\n  NAME: 'NoName',\n  CATEGORY: '',\n  START: '1 Jan 2017',\n  VALUE: '0',\n  QUANTITY: '',\n  GROWTH: '0',\n  CPI_IMMUNE: false,\n  CAN_BE_NEGATIVE: false,\n  IS_A_DEBT: false,\n  LIABILITY: '',\n  PURCHASE_PRICE: '0',\n};\n\nfunction getTestModel01ForMigration() {\n  const model: ModelData = {\n    expenses: [\n      {\n        ...simpleExpense,\n        NAME: 'Look after dogs',\n        VALUE: '500',\n        VALUE_SET: '1 April 2018',\n        START: '1 April 2018',\n        END: '2 February 2047',\n        GROWTH: '2',\n        CATEGORY: 'living costs',\n      },\n      {\n        ...simpleExpense,\n        NAME: 'Run car',\n        VALUE: '700',\n        VALUE_SET: '1 April 2018',\n        START: '1 April 2018',\n        END: 'GetRidOfCar',\n        GROWTH: '5',\n        CATEGORY: 'living costs',\n      },\n      {\n        ...simpleExpense,\n        NAME: 'Run house',\n        VALUE: '1300',\n        VALUE_SET: '1 April 2018',\n        START: '1 April 2018',\n        END: '2 February 2099',\n        GROWTH: '2',\n        CATEGORY: 'living costs',\n      },\n    ],\n    incomes: [\n      {\n        ...simpleIncome,\n        NAME: 'Main income',\n        VALUE: '3500',\n        VALUE_SET: '1 March 2018',\n        START: '1 March 2018',\n        END: 'StopMainWork',\n        GROWTH: '2',\n        LIABILITY: `Joe${incomeTax}`,\n      },\n    ],\n    assets: [\n      {\n        ...simpleAsset,\n        NAME: CASH_ASSET_NAME,\n        START: 'December 2017',\n        VALUE: '2000',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'Stocks',\n        START: 'December 2017',\n        VALUE: '4000',\n        GROWTH: 'stockMarketGrowth',\n        CATEGORY: 'stock',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'ISAs',\n        START: 'December 2019',\n        VALUE: '2000',\n        GROWTH: 'stockMarketGrowth',\n        CATEGORY: 'stock',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'EarlyMortgage',\n        START: '1 January 2018',\n        VALUE: '-234000', // how much was borrowed\n        IS_A_DEBT: true,\n        GROWTH: '2.33', // good rate for early part of deal (excl cpi)\n        CATEGORY: 'mortgage',\n        CAN_BE_NEGATIVE: true,\n      },\n      {\n        ...simpleAsset,\n        NAME: 'LateMortgage',\n        START: '1 January 2018',\n        GROWTH: '4.66', // after rate goes up (excl cpi)\n        IS_A_DEBT: true,\n        CATEGORY: 'mortgage',\n      },\n    ],\n    transactions: [\n      {\n        ...simpleTransaction,\n        NAME: 'Each month buy food',\n        FROM: CASH_ASSET_NAME,\n        FROM_VALUE: '200',\n        DATE: 'January 2 2018',\n        RECURRENCE: '1m',\n        CATEGORY: 'living costs',\n      },\n      {\n        ...simpleTransaction,\n        NAME: 'Revalue stocks after loss in 2020 market crash',\n        TO: 'Stocks',\n        TO_ABSOLUTE: true,\n        TO_VALUE: '3000',\n        DATE: 'January 2 2020',\n        TYPE: revalueAsset,\n      },\n      {\n        ...simpleTransaction,\n        NAME: 'SellCar',\n        TO: CASH_ASSET_NAME,\n        TO_ABSOLUTE: true,\n        TO_VALUE: '1000',\n        DATE: 'GetRidOfCar',\n      },\n      {\n        ...simpleTransaction,\n        NAME: 'switchMortgage', // at a predetermined time, rate switched\n        FROM: 'EarlyMortgage',\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1', // all of debt at old rate\n        TO: 'LateMortgage',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1', // becomes all of debt at new rate\n        DATE: 'TransferMortgage',\n      },\n      {\n        ...simpleTransaction,\n        NAME: 'Conditional pay early mortgage',\n        FROM: CASH_ASSET_NAME,\n        FROM_VALUE: '1500', // a regular monthly payment\n        TO: 'EarlyMortgage',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1', // all of amount paid goes to mortgage\n        DATE: '1 January 2018',\n        STOP_DATE: 'TransferMortgage',\n        RECURRENCE: '1m',\n        CATEGORY: 'pay mortgage',\n        TYPE: payOffDebt,\n      },\n      {\n        ...simpleTransaction,\n        NAME: 'Conditional pay late mortgage',\n        FROM: CASH_ASSET_NAME,\n        FROM_VALUE: '1500',\n        TO: 'LateMortgage',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: 'TransferMortgage',\n        STOP_DATE: '1 January 2040',\n        RECURRENCE: '1m',\n        CATEGORY: 'pay mortgage',\n        TYPE: payOffDebt,\n      },\n    ],\n    settings: [...browserTestSettingsForMigration],\n    triggers: [\n      {\n        NAME: 'TransferMortgage',\n        DATE: 'Jan 01 2028',\n      },\n      {\n        NAME: 'StopMainWork',\n        DATE: 'Dec 31 2050',\n      },\n      {\n        NAME: 'GetRidOfCar',\n        DATE: 'Dec 31 2025',\n      },\n    ],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  setSetting(model.settings, roiStart, '1 Jan 2019', viewType);\n  setSetting(model.settings, roiEnd, '1 Feb 2019', viewType);\n  return model;\n}\n\nfunction getTestModel02ForMigration() {\n  const model: ModelData = {\n    expenses: [],\n    incomes: [],\n    assets: [],\n    transactions: [],\n    settings: [...browserTestSettingsForMigration],\n    triggers: [],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  setSetting(model.settings, roiStart, '1 Jan 2019', constType);\n  setSetting(model.settings, roiEnd, '1 Feb 2019', constType);\n  return model;\n}\nexport function defaultModelSettings(roi: { start: string; end: string }) {\n  return [\n    {\n      ...simpleSetting,\n      NAME: cpi,\n      VALUE: '0.0',\n      HINT: cpiHint,\n    },\n    {\n      ...viewSetting,\n      NAME: birthDate,\n      VALUE: '',\n      HINT: birthDateHint,\n    },\n    {\n      ...viewSetting,\n      NAME: valueFocusDate,\n      VALUE: '',\n      HINT: valueFocusDateHint,\n    },\n    {\n      ...viewSetting,\n      NAME: roiStart,\n      VALUE: roi.start,\n      HINT: roiStartHint,\n    },\n    {\n      ...viewSetting,\n      NAME: roiEnd,\n      VALUE: roi.end,\n      HINT: roiEndHint,\n    },\n  ];\n}\n\nexport function getModelCoarseAndFine(): ModelData {\n  const roi = {\n    start: 'April 1, 2018',\n    end: 'July 10, 2018',\n  };\n\n  const model: ModelData = {\n    ...emptyModel,\n    incomes: [\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'April 2 2018',\n        NAME: 'PRn1',\n        VALUE: '10',\n        VALUE_SET: 'January 1 2018',\n        CATEGORY: 'PaperRound',\n      },\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'June 2 2018',\n        NAME: 'PRn2',\n        VALUE: '10', // single payment\n        VALUE_SET: 'January 1 2018',\n        CATEGORY: 'PaperRound',\n      },\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'April 2 2018',\n        NAME: 'PRn3',\n        VALUE: '10', // single payment\n        VALUE_SET: 'January 1 2018',\n      },\n    ],\n    assets: [\n      {\n        ...simpleAsset,\n        NAME: CASH_ASSET_NAME,\n        CAN_BE_NEGATIVE: true,\n        START: 'April 1 2018',\n        VALUE: '500',\n        CATEGORY: 'Accessible',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'stocks',\n        START: 'April 1 2018',\n        VALUE: '500',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'savings',\n        START: 'June 1 2018',\n        VALUE: '500',\n        CATEGORY: 'Accessible',\n      },\n    ],\n    settings: [...defaultModelSettings(roi)],\n    expenses: [\n      {\n        ...simpleExpense,\n        START: 'April 1 2018',\n        END: 'June 2 2018',\n        NAME: 'Phon',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n        CATEGORY: 'comms',\n      },\n      {\n        ...simpleExpense,\n        START: 'February 1 2018',\n        END: 'June 2 2018',\n        NAME: 'broadband',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n        CATEGORY: 'comms',\n      },\n      {\n        ...simpleExpense,\n        START: 'January 1 2018',\n        END: 'July 2 2018',\n        NAME: 'pet food',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n      },\n    ],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n\n  return model;\n}\n\nexport function getModelCoarseAndFineForMigration(): ModelData {\n  const roi = {\n    start: 'April 1, 2018',\n    end: 'July 10, 2018',\n  };\n\n  const settings = defaultModelSettingsForMigration;\n  setSetting(settings, viewDetail, coarse, viewType);\n  setSetting(settings, viewFrequency, monthly, viewType);\n\n  const model: ModelData = {\n    ...emptyModel,\n    incomes: [\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'April 2 2018',\n        NAME: 'PRn1',\n        VALUE: '10',\n        VALUE_SET: 'January 1 2018',\n        CATEGORY: 'PaperRound',\n      },\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'June 2 2018',\n        NAME: 'PRn2',\n        VALUE: '10', // single payment\n        VALUE_SET: 'January 1 2018',\n        CATEGORY: 'PaperRound',\n      },\n      {\n        ...simpleIncome,\n        START: 'April 1 2018',\n        END: 'April 2 2018',\n        NAME: 'PRn3',\n        VALUE: '10', // single payment\n        VALUE_SET: 'January 1 2018',\n      },\n    ],\n    assets: [\n      {\n        ...simpleAsset,\n        NAME: CASH_ASSET_NAME,\n        CAN_BE_NEGATIVE: true,\n        START: 'April 1 2018',\n        VALUE: '500',\n        CATEGORY: 'Accessible',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'stocks',\n        START: 'April 1 2018',\n        VALUE: '500',\n      },\n      {\n        ...simpleAsset,\n        NAME: 'savings',\n        START: 'June 1 2018',\n        VALUE: '500',\n        CATEGORY: 'Accessible',\n      },\n    ],\n    settings: settings,\n    expenses: [\n      {\n        ...simpleExpense,\n        START: 'April 1 2018',\n        END: 'June 2 2018',\n        NAME: 'Phon',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n        CATEGORY: 'comms',\n      },\n      {\n        ...simpleExpense,\n        START: 'February 1 2018',\n        END: 'June 2 2018',\n        NAME: 'broadband',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n        CATEGORY: 'comms',\n      },\n      {\n        ...simpleExpense,\n        START: 'January 1 2018',\n        END: 'July 2 2018',\n        NAME: 'pet food',\n        VALUE_SET: 'January 1 2018',\n        VALUE: '12.0',\n      },\n    ],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n\n  setROI(model, roi);\n\n  return model;\n}\n\nexport const minimalModel: ModelData = {\n  assets: [\n    {\n      NAME: CASH_ASSET_NAME,\n      CATEGORY: '',\n      START: '1 Jan 2017',\n      VALUE: '0.0',\n      QUANTITY: '',\n      GROWTH: '0.0',\n      CPI_IMMUNE: true,\n      CAN_BE_NEGATIVE: true,\n      IS_A_DEBT: false,\n      LIABILITY: '',\n      PURCHASE_PRICE: '0.0',\n    },\n  ],\n  incomes: [],\n  expenses: [],\n  triggers: [],\n  settings: [\n    {\n      NAME: cpi,\n      VALUE: '2.5',\n      HINT: cpiHint,\n      TYPE: constType,\n    },\n    {\n      NAME: roiStart,\n      VALUE: '1 Jan 2017',\n      HINT: roiStartHint,\n      TYPE: viewType,\n    },\n    {\n      NAME: roiEnd,\n      VALUE: '1 Jan 2023',\n      HINT: roiEndHint,\n      TYPE: viewType,\n    },\n    {\n      NAME: birthDate,\n      VALUE: '',\n      HINT: birthDateHint,\n      TYPE: viewType,\n    },\n    {\n      NAME: valueFocusDate,\n      VALUE: '',\n      HINT: valueFocusDateHint,\n      TYPE: viewType,\n    },\n  ],\n  transactions: [],\n  version: getCurrentVersion(),\n  undoModel: undefined,\n  redoModel: undefined,\n};\n\nexport function getMinimalModelCopy(): ModelData {\n  // log('in getMinimalModelCopy');\n  return makeModelFromJSONString(JSON.stringify(minimalModel));\n}\n\nfunction getModelFutureExpenseForMigration() {\n  const roi = {\n    start: 'Dec 1, 2016 00:00:00',\n    end: 'March 1, 2017 00:00:00',\n  };\n  const minimalModel = getMinimalModelCopy();\n  const model: ModelData = {\n    ...minimalModel,\n    expenses: [\n      {\n        ...simpleExpense,\n        START: 'January 1 2018',\n        END: 'July 2 2018',\n        NAME: 'Phon',\n        VALUE: '99',\n        VALUE_SET: 'January 1 2018',\n        GROWTH: '12.0',\n      },\n    ],\n    settings: [...defaultModelSettings(roi)],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  model.settings.push({\n    ...viewSetting,\n    NAME: viewFrequency,\n    VALUE: monthly,\n  });\n\n  //log(`future expense settings ${model.settings.map(showObj)}`);\n  return model;\n}\nexport function getThreeChryslerModel(): ModelData {\n  const roi = {\n    start: 'Dec 1, 2017 00:00:00',\n    end: 'June 1, 2018 00:00:00',\n  };\n  const minimalModel = getMinimalModelCopy();\n  const model: ModelData = {\n    ...minimalModel,\n    assets: [\n      ...minimalModel.assets,\n      {\n        ...simpleAsset,\n        NAME: 'Cars',\n        START: 'January 2 2018',\n        VALUE: 'chrysler',\n        QUANTITY: '3',\n        CPI_IMMUNE: true,\n      },\n    ],\n    settings: [\n      ...minimalModel.settings,\n      {\n        NAME: 'twoChryslers',\n        VALUE: '2chrysler',\n        HINT: '',\n        TYPE: 'const',\n      },\n      {\n        NAME: 'chrysler',\n        VALUE: '50USD',\n        HINT: '',\n        TYPE: 'const',\n      },\n      {\n        NAME: 'USD',\n        VALUE: '2',\n        HINT: '',\n        TYPE: 'adjustable',\n      },\n    ],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  model.assets.filter(a => {\n    return a.NAME === CASH_ASSET_NAME;\n  })[0].START = '1 Jan 2018';\n\n  setROI(model, roi);\n  return model;\n}\n\nexport function getThreeChryslerModelForMigration(): ModelData {\n  const roi = {\n    start: 'Dec 1, 2017 00:00:00',\n    end: 'June 1, 2018 00:00:00',\n  };\n  const minimalModel = getMinimalModelCopy();\n  const model: ModelData = {\n    ...minimalModel,\n    assets: [\n      ...minimalModel.assets,\n      {\n        ...simpleAsset,\n        NAME: 'Cars',\n        START: 'January 2 2018',\n        VALUE: 'chrysler',\n        QUANTITY: '3',\n        CPI_IMMUNE: true,\n      },\n    ],\n    settings: [\n      ...minimalModel.settings,\n      {\n        NAME: 'twoChryslers',\n        VALUE: '2chrysler',\n        HINT: '',\n        TYPE: 'const',\n      },\n      {\n        NAME: 'chrysler',\n        VALUE: '50USD',\n        HINT: '',\n        TYPE: 'const',\n      },\n      {\n        NAME: 'USD',\n        VALUE: '2',\n        HINT: '',\n        TYPE: 'adjustable',\n      },\n      {\n        ...viewSetting,\n        NAME: viewFrequency,\n        VALUE: monthly,\n      },\n    ],\n    version: 0,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  model.assets.filter(a => {\n    return a.NAME === CASH_ASSET_NAME;\n  })[0].START = '1 Jan 2018';\n\n  setROI(model, roi);\n  return model;\n}\n\nfunction getBenAndJerryModel(): ModelData {\n  const model: ModelData = {\n    assets: [\n      {\n        NAME: 'PensionJerry Aegon',\n        VALUE: '56324',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'PensionBen Prudential',\n        VALUE: '45000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'Mortgage',\n        VALUE: '-150000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '3.5',\n        CPI_IMMUNE: true,\n        CAN_BE_NEGATIVE: true,\n        IS_A_DEBT: true,\n        CATEGORY: 'Property',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'Jerry stocks',\n        VALUE: '25000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Investment',\n        PURCHASE_PRICE: '14000',\n        LIABILITY: 'Jerry(CGT)',\n      },\n      {\n        NAME: 'Jerry loan',\n        VALUE: '-5000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '2.5',\n        CPI_IMMUNE: true,\n        CAN_BE_NEGATIVE: true,\n        IS_A_DEBT: true,\n        CATEGORY: '',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: `${taxFree}Jerry Aegon`,\n        VALUE: '0.0',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'ISA',\n        VALUE: '9000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Investment',\n        PURCHASE_PRICE: '0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'House',\n        VALUE: '255000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '2',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Property',\n        PURCHASE_PRICE: '0',\n        LIABILITY: '',\n      },\n      {\n        NAME: `${crystallizedPension}Jerry`,\n        VALUE: '0.0',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: `${crystallizedPension}Ben`,\n        VALUE: '0.0',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'Cash',\n        CATEGORY: '',\n        START: '1 Jan 2017',\n        VALUE: '0.0',\n        QUANTITY: '',\n        GROWTH: '0.0',\n        CPI_IMMUNE: true,\n        CAN_BE_NEGATIVE: true,\n        IS_A_DEBT: false,\n        LIABILITY: '',\n        PURCHASE_PRICE: '0.0',\n      },\n      {\n        NAME: `${taxFree}Ben Prudential`,\n        VALUE: '0.0',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '4',\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: 'Pension',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n      {\n        NAME: 'Ben loan',\n        VALUE: '-5000',\n        QUANTITY: '',\n        START: '21/02/2020',\n        GROWTH: '0',\n        CPI_IMMUNE: true,\n        CAN_BE_NEGATIVE: true,\n        IS_A_DEBT: true,\n        CATEGORY: '',\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      },\n    ],\n    incomes: [\n      {\n        START: 'Jerry state pension age',\n        END: 'Ben dies',\n        NAME: `${pensionTransfer}Jerry work`,\n        VALUE: '0.0',\n        VALUE_SET: '21/02/2020',\n        LIABILITY: 'Ben(incomeTax)',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Pension',\n      },\n      {\n        START: 'Jerry state pension age',\n        END: 'Jerry dies',\n        NAME: `${pensionDB}Jerry work`,\n        VALUE: '2000',\n        VALUE_SET: '21/02/2020',\n        LIABILITY: 'Jerry(incomeTax)',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Pension',\n      },\n      {\n        START: 'Jerry state pension age',\n        END: 'Jerry dies',\n        NAME: `${pensionDB}Jerry state pension`,\n        VALUE: '730',\n        VALUE_SET: '21/02/2020',\n        LIABILITY: 'Jerry(incomeTax)',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Pension',\n      },\n      {\n        START: 'Ben state pension age',\n        END: 'Ben dies',\n        NAME: `${pensionDB}Ben state pension`,\n        VALUE: '730',\n        VALUE_SET: '21/02/2020',\n        LIABILITY: 'Ben(incomeTax)',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Pension',\n      },\n      {\n        NAME: 'Jerry salary',\n        VALUE: '2755',\n        VALUE_SET: '21/2/2020',\n        START: '21/2/2020',\n        END: 'Jerry retires',\n        GROWTH: '2',\n        CPI_IMMUNE: false,\n        LIABILITY: 'Jerry(incomeTax)/Jerry(NI)',\n        CATEGORY: 'Salary',\n      },\n      {\n        NAME: 'Ben salary',\n        VALUE: '3470',\n        VALUE_SET: '21/2/2020',\n        START: '21/2/2020',\n        END: 'Ben retires',\n        GROWTH: '2',\n        CPI_IMMUNE: false,\n        LIABILITY: 'Ben(incomeTax)/Ben(NI)',\n        CATEGORY: 'Salary',\n      },\n    ],\n    expenses: [\n      {\n        NAME: 'Replace car',\n        VALUE: '20000',\n        VALUE_SET: '21/02/2020',\n        START: '21/02/2025',\n        END: 'Care costs start',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Major costs',\n        RECURRENCE: '5y',\n      },\n      {\n        NAME: 'Leisure expenses working',\n        VALUE: '1000',\n        VALUE_SET: '21/02/2020',\n        START: '21/02/2020',\n        END: 'Jerry retires',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Leisure',\n        RECURRENCE: '1m',\n      },\n      {\n        NAME: 'Leisure expenses retired',\n        VALUE: '2000',\n        VALUE_SET: '21/02/2020',\n        START: 'Jerry retires',\n        END: 'Care costs start',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Leisure',\n        RECURRENCE: '1m',\n      },\n      {\n        NAME: 'House maintenance',\n        VALUE: '8000',\n        VALUE_SET: '21/02/2020',\n        START: '21/02/2020',\n        END: 'Care costs start',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Major costs',\n        RECURRENCE: '4y',\n      },\n      {\n        NAME: 'Care costs',\n        VALUE: '3000',\n        VALUE_SET: '21/02/2020',\n        START: 'Care costs start',\n        END: 'Ben dies',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Care',\n        RECURRENCE: '1m',\n      },\n      {\n        NAME: 'Basic expenses small house',\n        VALUE: '1600',\n        VALUE_SET: '21/02/2020',\n        START: 'Downsize house',\n        END: 'Ben dies',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Basic',\n        RECURRENCE: '1m',\n      },\n      {\n        NAME: 'Basic expenses current house',\n        VALUE: '1850',\n        VALUE_SET: '21/02/2020',\n        START: '21/02/2020',\n        END: 'Downsize house',\n        GROWTH: '0',\n        CPI_IMMUNE: false,\n        CATEGORY: 'Basic',\n        RECURRENCE: '1m',\n      },\n    ],\n    triggers: [\n      { NAME: 'Ben dies', DATE: '2068-08-30' },\n      { NAME: 'Ben retires', DATE: '2032-07-27' },\n      {\n        NAME: 'Ben state pension age',\n        DATE: '2040-08-30',\n      },\n      { NAME: 'Care costs start', DATE: '2060-02-20' },\n      { NAME: 'Downsize house', DATE: '2047-02-28' },\n      { NAME: 'Jerry dies', DATE: '2065-05-04' },\n      { NAME: 'Jerry retires', DATE: '2030-05-04' },\n      {\n        NAME: 'Jerry state pension age',\n        DATE: '2037-05-04',\n      },\n    ],\n    settings: [\n      {\n        NAME: \"Today's value focus date\",\n        VALUE: '',\n        HINT:\n          \"Date to use for 'today's value' tables (defaults to '' meaning today)\",\n        TYPE: 'view',\n      },\n      {\n        NAME: 'End of view range',\n        VALUE: '2069',\n        HINT: 'Date at the end of range to be plotted',\n        TYPE: 'view',\n      },\n      {\n        NAME: 'Date of birth',\n        VALUE: '',\n        HINT: 'Date used for representing dates as ages',\n        TYPE: 'view',\n      },\n      {\n        NAME: 'cpi',\n        VALUE: '2.5',\n        HINT: 'Annual rate of inflation',\n        TYPE: 'const',\n      },\n      {\n        NAME: 'Beginning of view range',\n        VALUE: '2020',\n        HINT: 'Date at the start of range to be plotted',\n        TYPE: 'view',\n      },\n    ],\n    transactions: [\n      {\n        NAME: `${transferCrystallizedPension}Jerry Aegon`,\n        FROM: `${crystallizedPension}Jerry`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: `${crystallizedPension}Ben`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Jerry dies',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${transferCrystallizedPension}Ben Prudential`,\n        FROM: `${crystallizedPension}Ben`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: `${crystallizedPension}Jerry`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Ben dies',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${pensionTransfer}Jerry work`,\n        FROM: `${pensionDB}Jerry work`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: `${pensionTransfer}Jerry work`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '0.5',\n        DATE: 'Jerry dies',\n        STOP_DATE: 'Ben dies',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: 'PensionJerry work',\n        FROM: 'Jerry salary',\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.05',\n        TO: '',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '0.0',\n        DATE: '21/02/2020',\n        STOP_DATE: 'Jerry retires',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: 'PensionJerry Aegon',\n        FROM: '',\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0',\n        TO: 'PensionJerry Aegon',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '0',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${pensionDB}Jerry work`,\n        FROM: 'Jerry salary',\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.00125',\n        TO: `${pensionDB}Jerry work`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: '21/02/2020',\n        STOP_DATE: 'Jerry retires',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${pension}Ben Prudential`,\n        FROM: 'Ben salary',\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.06',\n        TO: `${pension}Ben Prudential`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '3',\n        DATE: '21/02/2020',\n        STOP_DATE: 'Ben retires',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${moveTaxFreePart}Jerry Aegon`,\n        FROM: `${pension}Jerry Aegon`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.25',\n        TO: `${taxFree}Jerry Aegon`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Jerry retires',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${moveTaxFreePart}Ben Prudential`,\n        FROM: `${pension}Ben Prudential`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.25',\n        TO: `${taxFree}Ben Prudential`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Ben retires',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${crystallizedPension}Jerry Aegon`,\n        FROM: `${pension}Jerry Aegon`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: `${crystallizedPension}Jerry`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Jerry retires',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: `${crystallizedPension}Ben Prudential`,\n        FROM: `${pension}Ben Prudential`,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: `${crystallizedPension}Ben`,\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: 'Ben retires',\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: 'Pension',\n        TYPE: 'auto',\n      },\n      {\n        NAME: 'ConditionalSell stocks for cash',\n        CATEGORY: 'Cashflow',\n        FROM: 'Jerry stocks',\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '500',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: `ConditionalSell ${taxFree}Ben Prudential`,\n        CATEGORY: 'Cashflow',\n        FROM: `${taxFree}Ben Prudential`,\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '250',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: 'ConditionalSell ISAs for cash',\n        CATEGORY: 'Cashflow',\n        FROM: 'ISA',\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '500',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: `ConditionalSell ${crystallizedPension}Jerry`,\n        CATEGORY: 'Cashflow',\n        FROM: `${crystallizedPension}Jerry`,\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '1000',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: `ConditionalSell ${crystallizedPension}Ben`,\n        CATEGORY: 'Cashflow',\n        FROM: `${crystallizedPension}Ben`,\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '1000',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: `ConditionalSell ${taxFree}Jerry Aegon`,\n        CATEGORY: 'Cashflow',\n        FROM: `${taxFree}Jerry Aegon`,\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '250',\n        TO: 'Cash',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'liquidateAsset',\n      },\n      {\n        NAME: 'ConditionalPayment to Mortgage 1',\n        CATEGORY: 'Property',\n        FROM: 'Cash',\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '700',\n        TO: 'Mortgage',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'payOffDebt',\n      },\n      {\n        NAME: 'ConditionalPayment to Jerry loan 1',\n        CATEGORY: '',\n        FROM: 'Cash',\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '250',\n        TO: 'Jerry loan',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'payOffDebt',\n      },\n      {\n        NAME: 'ConditionalPayment to Ben loan 1',\n        CATEGORY: '',\n        FROM: 'Cash',\n        FROM_ABSOLUTE: true,\n        FROM_VALUE: '500',\n        TO: 'Ben loan',\n        TO_ABSOLUTE: false,\n        TO_VALUE: '1.0',\n        DATE: '21/02/2020',\n        STOP_DATE: '',\n        RECURRENCE: '1m',\n        TYPE: 'payOffDebt',\n      },\n    ],\n    version: 5,\n    undoModel: undefined,\n    redoModel: undefined,\n  };\n  return model;\n}\n\nexport function getDefinedBenefitsPension(): ModelData {\n  return makeModelFromJSON(definedBenefitsPension);\n}\n\nexport function getDefinedContributionsPension(): ModelData {\n  return makeModelFromJSON(definedContributionsPension);\n}\n\nexport function getPensionExampleData(): ModelData {\n  return makeModelFromJSON(pensionExampleData);\n}\n\nexport function getTestModel(input: string): ModelData {\n  // log(`getTestModel making model for ${input}`);\n  if (input === TestModel01) {\n    return getTestModel01ForMigration();\n  } else if (input === TestModel02) {\n    return getTestModel02ForMigration();\n  } else if (input === CoarseAndFine) {\n    return getModelCoarseAndFineForMigration();\n  } else if (input === FutureExpense) {\n    return getModelFutureExpenseForMigration();\n  } else if (input === ThreeChryslerModel) {\n    return getThreeChryslerModelForMigration();\n  } else if (input === MinimalModel) {\n    return getMinimalModelCopy();\n  } else if (input === BenAndJerryModel) {\n    return getBenAndJerryModel();\n  } else if (input === definedBenefitsPension) {\n    return getDefinedBenefitsPension();\n  } else if (input === definedContributionsPension) {\n    return getDefinedContributionsPension();\n  } else if (input === pensionExampleData) {\n    return getPensionExampleData();\n  }\n  throw new Error('test model name not recognised');\n}\n","import React, { Component, createContext, useContext } from 'react';\nimport createAuth0Client from '@auth0/auth0-spa-js';\nimport { log, printDebug, showObj } from './../utils';\n\n// create the context\nconst Auth0Context = createContext();\nexport const useAuth0 = () => {\n  // log(`in useAuth0`);\n  return useContext(Auth0Context);\n}\n\n// create a provider\nexport class Auth0Provider extends Component {\n  state = {\n    auth0Client: null,\n    isLoading: true,\n    isAuthenticated: false,\n    user: null\n  };\n  config = {\n    domain: process.env.REACT_APP_AUTH0_DOMAIN_NOT_SECRET,\n    client_id: process.env.REACT_APP_AUTH0_CLIENT_ID_NOT_SECRET,\n    redirect_uri:\n      window.location.origin + process.env.REACT_APP_ORIGIN_APPENDAGE,\n  };\n\n  componentDidMount() {\n    this.initializeAuth0();\n  }\n\n  // initialize the auth0 library\n  initializeAuth0 = async () => {\n    if(printDebug()){\n      log(`auth config is ${showObj(this.config)}`);\n    }\n    const auth0Client = await createAuth0Client(this.config);\n    this.setState({ auth0Client });\n\n    // check to see if they have been redirected after login\n    if (window.location.search.includes('code=')) {\n      return this.handleRedirectCallback();\n    }\n\n    const isAuthenticated = await auth0Client.isAuthenticated();\n    const user = isAuthenticated ? await auth0Client.getUser() : null;\n    this.setState({ isLoading: false, isAuthenticated, user });\n  };\n\n  handleRedirectCallback = async () => {\n    this.setState({ isLoading: true });\n\n    await this.state.auth0Client.handleRedirectCallback();\n    const user = await this.state.auth0Client.getUser();\n\n    this.setState({ user, isAuthenticated: true, isLoading: false });\n    window.history.replaceState({}, document.title, window.location.pathname);\n  };\n\n  render() {\n    const { auth0Client, isLoading, isAuthenticated, user } = this.state;\n    const { children } = this.props;\n\n    const configObject = {\n      isLoading,\n      isAuthenticated,\n      user,\n      loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n      loginForTesting: (...p) => {\n        if (printDebug()) {\n          log(`p is ${p}`);\n        }\n        this.setState({\n          user: { sub: 'TestUserID' },\n          isAuthenticated: true,\n          isLoading: false,\n        });\n      },\n      getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n      getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n      logout: (...p) => auth0Client.logout(...p)\n    };\n\n    return (\n      <Auth0Context.Provider value={configObject}>\n        {children}\n      </Auth0Context.Provider>\n    );\n  }\n}\n","import { separator, growth, revalue } from '../localization/stringConstants';\nimport { ItemCategory, ModelData } from '../types/interfaces';\nimport { makeSourceForFromChange } from './evaluations';\n\nfunction getCategoryFromItems(name: string, items: ItemCategory[]) {\n  const found = items.find(i => i.NAME === name);\n  if (found !== undefined) {\n    if (found.CATEGORY.length > 0) {\n      return found.CATEGORY;\n    } else {\n      return name;\n    }\n  }\n  return undefined;\n}\n\nfunction getCategorySub(name: string, model: ModelData) {\n  // log(`look for category for ${name}`);\n  let category: string | undefined = getCategoryFromItems(name, model.incomes);\n  if (category === undefined) {\n    category = getCategoryFromItems(name, model.expenses);\n  }\n  if (category === undefined) {\n    category = getCategoryFromItems(name, model.assets);\n  }\n  if (category === undefined) {\n    category = getCategoryFromItems(name, model.transactions);\n  }\n  const foundTransaction = model.transactions.find(i => {\n    const source1 = makeSourceForFromChange(i);\n    if (source1 === name) {\n      return true;\n    }\n    return false;\n  });\n  if (foundTransaction !== undefined) {\n    if (foundTransaction.CATEGORY.length > 0) {\n      // log(`returning transaction ${category}`);\n      return foundTransaction.CATEGORY;\n    }\n    // log(`no transaction category`);\n    return name;\n  }\n  if (category === undefined) {\n    // log(`no category`);\n    return name;\n  }\n  // log(`returning ${category}`);\n  return category;\n}\n\n//let numCacheHits = 0;\n//let numComputed = 0;\nexport function getCategory(\n  name: string,\n  cache: Map<string, string>,\n  model: ModelData,\n) {\n  const cachedResult = cache.get(name);\n  if (cachedResult !== undefined) {\n    //numCacheHits = numCacheHits + 1;\n    //log(`numComputed = ${numComputed}, numCacheHits = ${numCacheHits}`);\n    return cachedResult;\n  }\n  //numComputed = numComputed + 1;\n  //log(`numComputed = ${numComputed}, numCacheHits = ${numCacheHits}`);\n  // log(`get category for ${name}`);\n  const words = name.split(separator);\n  if (words.length === 0) {\n    cache.set(name, '');\n    return '';\n  }\n  const firstPart = words[0];\n  const firstPartCat = getCategorySub(firstPart, model);\n  if (words.length === 1) {\n    if (firstPartCat !== firstPart) {\n      cache.set(name, firstPartCat);\n      return firstPartCat;\n    }\n  }\n  // maybe use second part? for growth or revalue\n  if (words.length > 1 && (firstPart === growth || firstPart === revalue)) {\n    const secondPart = words[1];\n    const secondPartCat = getCategorySub(secondPart, model);\n    if (secondPartCat !== secondPart) {\n      const cat = firstPart + separator + secondPartCat;\n      cache.set(name, cat);\n      return cat;\n    }\n  }\n  // maybe use second part? for deltas\n  if (words.length > 1) {\n    const secondPart = words[1];\n    const secondPartCat = getCategorySub(secondPart, model);\n    const cat = firstPartCat + separator + secondPartCat;\n    cache.set(name, cat);\n    return cat;\n  }\n  // log(`no category for ${name}`);\n  cache.set(name, name);\n  return name;\n}\n","import {\n  AssetVal,\n  ChartDataPoint,\n  DataForView,\n  ItemCategory,\n  ModelData,\n  Setting,\n  DebtVal,\n  Evaluation,\n  ExpenseVal,\n  IncomeVal,\n  Interval,\n  ItemChartData,\n  SettingVal,\n} from '../types/interfaces';\nimport {\n  allItems,\n  chartAdditions,\n  assetChartFocus,\n  chartReductions,\n  chartVals,\n  chartViewType,\n  birthDate,\n  cgt,\n  coarse,\n  crystallizedPension,\n  debtChartFocus,\n  expenseChartFocus,\n  fine,\n  gain,\n  income,\n  incomeChartFocus,\n  incomeTax,\n  monthly,\n  nationalInsurance,\n  pensionDB,\n  revalue,\n  roiEnd,\n  roiStart,\n  separator,\n  taxChartFocusPerson,\n  taxChartFocusType,\n  taxChartShowNet,\n  total,\n  viewDetail,\n  viewFrequency,\n  dot,\n  annually,\n} from '../localization/stringConstants';\nimport { Context, log, printDebug, showObj } from '../utils';\nimport { evaluationType, generateSequenceOfDates } from './evaluations';\n\nimport { checkEvalnType } from './checks';\nimport {\n  makeTwoDP,\n  makeDateFromString,\n  makeIncomeTaxTag,\n  makeNetIncomeTag,\n  makeNationalInsuranceTag,\n  makeCGTTag,\n  makeNetGainTag,\n  getTriggerDate,\n  deconstructTaxTag,\n} from '../stringUtils';\nimport { getSettings } from './modelUtils';\nimport { getCategory } from './category';\n\nexport class ViewSettings {\n  private kvPairs: Map<string, string> = new Map<string, string>();\n  private show = {\n    [Context.Asset]: new Map<string, boolean>(),\n    [Context.Debt]: new Map<string, boolean>(),\n    [Context.Income]: new Map<string, boolean>(),\n    [Context.Expense]: new Map<string, boolean>(),\n  };\n  private dependents = {\n    [Context.Asset]: new Map<string, string[]>(),\n    [Context.Debt]: new Map<string, string[]>(),\n    [Context.Income]: new Map<string, string[]>(),\n    [Context.Expense]: new Map<string, string[]>(),\n  };\n  private supercategories = {\n    [Context.Asset]: new Map<string, string[]>(),\n    [Context.Debt]: new Map<string, string[]>(),\n    [Context.Income]: new Map<string, string[]>(),\n    [Context.Expense]: new Map<string, string[]>(),\n  };\n  /*\ne.g.\n    {\n      NAME: viewFrequency,\n      VALUE: monthly,\n    },\n    {\n      NAME: assetChartView,\n      VALUE: assetChartVal,\n    },\n    {\n      NAME: viewDetail,\n      VALUE: fine,\n    },\n    {\n      NAME: assetChartFocus,\n      VALUE: CASH_ASSET_NAME,\n    },\n    {\n      NAME: debtChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: expenseChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: incomeChartFocus,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartFocusPerson,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartFocusType,\n      VALUE: allItems,\n    },\n    {\n      NAME: taxChartShowNet,\n      VALUE: 'Y',\n    },\n    {\n      NAME: valueFocusDate,\n      VALUE: '',\n    },\n*/\n\n  public constructor(pairs: { NAME: string; VALUE: string }[]) {\n    // log(`build new ViewSettings object`);\n    pairs.forEach(p => {\n      // log(`input pair ${p.NAME}, ${p.VALUE}`);\n      this.kvPairs.set(p.NAME, p.VALUE);\n      const ctxt = this.makeContextFromString(p.NAME);\n      if (ctxt !== undefined) {\n        this.show[ctxt].set(p.VALUE, true);\n      }\n    });\n    this.dependents = this.makeEmptyDependents();\n    this.supercategories = this.makeEmptySuperCategories();\n  }\n  private makeEmptyDependents() {\n    const result: {\n      [Context.Asset]: Map<string, string[]>;\n      [Context.Debt]: Map<string, string[]>;\n      [Context.Income]: Map<string, string[]>;\n      [Context.Expense]: Map<string, string[]>;\n    } = {\n      [Context.Asset]: new Map<string, string[]>(),\n      [Context.Debt]: new Map<string, string[]>(),\n      [Context.Income]: new Map<string, string[]>(),\n      [Context.Expense]: new Map<string, string[]>(),\n    };\n    result[Context.Asset].set(allItems, []);\n    result[Context.Debt].set(allItems, []);\n    result[Context.Income].set(allItems, []);\n    result[Context.Expense].set(allItems, []);\n    return result;\n  }\n  private makeEmptySuperCategories() {\n    const result: {\n      [Context.Asset]: Map<string, string[]>;\n      [Context.Debt]: Map<string, string[]>;\n      [Context.Income]: Map<string, string[]>;\n      [Context.Expense]: Map<string, string[]>;\n    } = {\n      [Context.Asset]: new Map<string, string[]>(),\n      [Context.Debt]: new Map<string, string[]>(),\n      [Context.Income]: new Map<string, string[]>(),\n      [Context.Expense]: new Map<string, string[]>(),\n    };\n    return result;\n  }\n  private setInMapIfAbsent(context: Context, key: string, ascendent: string) {\n    const map = this.show[context];\n    if (map.get(key) !== undefined) {\n      return;\n    }\n    const value =\n      this.highlightButton(context, ascendent) ||\n      this.highlightButton(context, allItems);\n    map.set(key, value);\n  }\n\n  private addToDependents(context: Context, key: string, value: string) {\n    const map = this.dependents[context];\n    let arr: string[] | undefined = map.get(key);\n    if (arr === undefined) {\n      arr = [];\n      map.set(key, arr);\n    }\n    if (\n      arr.find(v => {\n        return v === value;\n      }) === undefined\n    ) {\n      arr.push(value);\n    }\n    this.addToSuperCategories(context, value, key);\n  }\n  private addToSuperCategories(context: Context, key: string, value: string) {\n    const map = this.supercategories[context];\n    let arr: string[] | undefined = map.get(key);\n    if (arr === undefined) {\n      arr = [];\n      map.set(key, arr);\n    }\n    if (\n      arr.find(v => {\n        return v === value;\n      }) === undefined\n    ) {\n      arr.push(value);\n    }\n  }\n\n  private setItemFromModel(context: Context, a: ItemCategory) {\n    this.addToDependents(context, allItems, a.NAME);\n    this.addToDependents(context, allItems, a.CATEGORY);\n    this.addToDependents(context, a.CATEGORY, a.NAME);\n    this.setInMapIfAbsent(context, a.CATEGORY, a.CATEGORY);\n    this.setInMapIfAbsent(context, a.NAME, a.CATEGORY);\n  }\n\n  public setModel(model: ModelData) {\n    // log(`in setModel`);\n    // log(`model assets ${model.assets.map((a)=>{return a.NAME})}`);\n    // for incomes and expenses the filters list is\n    // allIncomes, all expenses\n    // all income names and categories\n    // all expense names and categories\n    // allAssets,\n    // all asset names and categories\n\n    this.dependents = this.makeEmptyDependents();\n    this.supercategories = this.makeEmptySuperCategories();\n\n    model.assets.forEach(a => {\n      if (a.IS_A_DEBT) {\n        this.setItemFromModel(Context.Debt, a);\n      } else {\n        this.setItemFromModel(Context.Asset, a);\n      }\n    });\n    model.expenses.forEach(a => {\n      this.setItemFromModel(Context.Expense, a);\n    });\n    model.incomes.forEach(a => {\n      this.setItemFromModel(Context.Income, a);\n    });\n\n    //for (const [key, value] of this.kvPairs) {\n    /* eslint-disable-line no-restricted-syntax */\n    //log(`after setModel, this.kvPairs[${key}]=${value}`);\n    //}\n    //for (const [key, value] of this.show[Context.Asset]) {\n    /* eslint-disable-line no-restricted-syntax */\n    //log(`after setModel, this.show[Context.Asset][${key}]=${value}`);\n    //}\n  }\n\n  private makeContextFromString(context: string) {\n    if (context === assetChartFocus) {\n      return Context.Asset;\n    } else if (context === debtChartFocus) {\n      return Context.Debt;\n    } else if (context === incomeChartFocus) {\n      return Context.Income;\n    } else if (context === expenseChartFocus) {\n      return Context.Expense;\n    } else {\n      return undefined;\n    }\n  }\n\n  // call from e.g. people adding a new Setting in a UI\n  public setViewSetting(settingName: string, settingValue: string): boolean {\n    //if(settingName === viewFrequency &&  settingValue !== annually){\n    //  log(`setViewSetting seting non-annual frequency`);\n    //}\n    if (this.kvPairs.get(settingName)) {\n      this.kvPairs.set(settingName, settingValue);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  private setViewFilter(context: Context, settingType: string, value: boolean) {\n    // log(`switch show(${settingType}) to ${value}`);\n    this.show[context].set(settingType, value);\n    const deps = this.dependents[context].get(settingType);\n    if (deps !== undefined) {\n      deps.forEach(dep => {\n        // log(`switch dependent show(${dep}) to ${value}`);\n        this.show[context].set(dep, value);\n      });\n    }\n    if (value === false) {\n      const sups = this.supercategories[context].get(settingType);\n      if (sups !== undefined) {\n        sups.forEach(sup => {\n          // log(`switch superCategory show(${dep}) to ${false}`);\n          this.show[context].set(sup, false);\n        });\n      }\n    }\n  }\n\n  public toggleViewFilter(context: Context, filterName: string) {\n    // log(`toggleViewFilter with context = ${context}, filterName = ${filterName}`);\n    if (this.highlightButton(context, filterName)) {\n      this.setViewFilter(context, filterName, false);\n    } else {\n      // log(`switch show(${value}) from false to true`);\n      this.setViewFilter(context, filterName, true);\n    }\n  }\n\n  public migrateViewSettingString(context: string, value: string) {\n    const ctxt = this.makeContextFromString(context);\n    if (ctxt !== undefined) {\n      if (this.show[ctxt].get(value) === undefined) {\n        return false;\n      }\n      this.migrateViewSetting(ctxt, value);\n      return true;\n    }\n    if (this.kvPairs.get(context)) {\n      this.kvPairs.set(context, value);\n      if (context === viewFrequency && value !== annually) {\n        log(`migrateViewSettingString seting non-annual frequency`);\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  private migrateViewSetting(context: Context, value: string) {\n    //clear pre-existing settings\n    for (const [key] of this.show[context]) {\n      // clear value\n      // log(`clear values: set show(${key})  = false`);\n      this.show[context].set(key, false);\n    }\n    // log(`set show(${value})  = true`);\n    this.setViewFilter(context, value, true);\n  }\n\n  public getShowItem(context: Context, item: string): boolean {\n    const result: boolean | undefined = this.show[context].get(item);\n    if (result === undefined) {\n      return false;\n    } else {\n      return result;\n    }\n  }\n\n  //no need to optimise this\n  public getShowAll(context: Context): boolean {\n    const result = this.show[context].get(allItems);\n    if (result === undefined) {\n      return false;\n    } else {\n      return result;\n    }\n  }\n\n  //no need to optimise this\n  public getViewSetting(settingType: string, defaultValue: string) {\n    let result = this.kvPairs.get(settingType);\n    if (result === undefined) {\n      result = defaultValue;\n    }\n    return result;\n  }\n\n  //no need to optimise this\n  public getChartViewType(chartVal: string) {\n    return this.kvPairs.get(chartViewType) === chartVal;\n  }\n\n  public highlightButton(context: Context, value: string) {\n    const mapVal = this.show[context].get(value);\n    // log(`highlightButton ${value}? ${mapVal}`)\n    return mapVal !== undefined && mapVal;\n  }\n}\n\nfunction logMapOfMap(\n  twoMap: Map<string, Map<string, number>>,\n  display = false,\n) {\n  if (display) {\n    log('twoMap:');\n    for (const [key, value] of twoMap) {\n      /* eslint-disable-line no-restricted-syntax */\n      log(`twoMap[${key}]...`);\n      for (const [key2, value2] of value) {\n        /* eslint-disable-line no-restricted-syntax */\n        log(`twoMap[${key}][${key2}]=${value2}`);\n      }\n    }\n  }\n}\n\nfunction logMapOfMapofMap(\n  threeMap: Map<any, Map<any, Map<any, any>>>,\n  display = false,\n) {\n  if (display) {\n    log('threeMap:');\n    for (const [key, value] of threeMap) {\n      /* eslint-disable-line no-restricted-syntax */\n      log(`threeMap[${key}]...`);\n      for (const [key2, value2] of value) {\n        /* eslint-disable-line no-restricted-syntax */\n        log(`threeMap[${key}][${key2}]...`);\n        for (const [key3, value3] of value2) {\n          /* eslint-disable-line no-restricted-syntax */\n          log(`threeMap[${key}][${key2}][${key3}] = ${showObj(value3)}`);\n        }\n      }\n    }\n  }\n}\n\nfunction totalChartDataPoints(\n  dateNameValueMap: Map<string, Map<string, number>>,\n  dates: Date[],\n  items: string[],\n) {\n  const result = new Map<string, Map<string, number>>();\n  dates.forEach(date => {\n    let totalValue = 0.0;\n    const dateString = date.toDateString();\n    items.forEach(item => {\n      // log(`get data from map for date ${dateString}`);\n      const nameValueMap = dateNameValueMap.get(dateString);\n      if (nameValueMap !== undefined) {\n        const mapValue = nameValueMap.get(item);\n        if (mapValue !== undefined) {\n          totalValue += mapValue;\n        }\n      }\n    });\n    let nvm = result.get(dateString);\n    if (nvm === undefined) {\n      result.set(dateString, new Map<string, number>());\n      nvm = result.get(dateString);\n    }\n    if (nvm !== undefined) {\n      nvm.set('Total', totalValue);\n    }\n  });\n  logMapOfMap(result);\n  return result;\n}\n\nfunction makeChartDataPoints(\n  dateNameValueMapIncoming: Map<string, Map<string, number>>,\n  dates: Date[],\n  itemsIncoming: string[],\n  settings: Setting[],\n  negateValues = false,\n  totalValues = false,\n): ItemChartData[] {\n  let dateNameValueMap = dateNameValueMapIncoming;\n  let items = itemsIncoming;\n  if (totalValues) {\n    // log(`total the items in map`);\n    dateNameValueMap = totalChartDataPoints(dateNameValueMap, dates, items);\n    items = ['Total'];\n  }\n\n  // log(`now make chart data for ${items}`);\n  logMapOfMap(dateNameValueMap);\n  const chartDataPointMap = new Map<\n    string, // name\n    ChartDataPoint[]\n  >();\n\n  dates.forEach(date => {\n    const dateString = date.toDateString();\n    items.forEach(item => {\n      let value = 0.0;\n      // log(`get data from map for date ${dateString}`);\n      const nameValueMap = dateNameValueMap.get(dateString);\n      if (nameValueMap !== undefined) {\n        const mapValue = nameValueMap.get(item);\n        // log(`got ${item} data ${mapValue} out of map`);\n        if (mapValue !== undefined) {\n          value = mapValue;\n          // log(`value for ${item.NAME} from map = ${value}`);\n          if (negateValues) {\n            // for plotting debt values we negate\n            value = -value;\n          }\n        } else {\n          // this type of effect; this source;\n          // didn't have an effect in this date period\n          // log(`item.NAME ${item.NAME} not found in nameValueMap`);\n        }\n      } else {\n        // nothing happened during this date period\n        // log(`dateString ${dateString} not found in dateNameValueMap`);\n      }\n      if (!chartDataPointMap.has(item)) {\n        // log(`first time for ${showObj(item)}, set up fresh array`);\n        chartDataPointMap.set(item, []);\n      }\n      const chartArray = chartDataPointMap.get(item);\n      if (chartArray === undefined) {\n        log('BUG; chartArray should be defined');\n      } else {\n        // log(`add to array ${showObj({label: dateString, y:value})}`);\n        const twoDPstring = makeTwoDP(value);\n        const birthDateSetting = getSettings(settings, birthDate, '');\n        let dataLabel = dateString;\n        if (birthDateSetting !== '') {\n          const diff =\n            date.getTime() - makeDateFromString(birthDateSetting).getTime();\n          const age = Math.floor(diff / 31557600000); // Divide by 1000*60*60*24*365.25\n          // log(`age from birthDate '${birthDateSetting}' = ${age}`);\n          dataLabel = `${age}`;\n        } else {\n          // log(`no birthDate given, dataLabel = ${dataLabel}`);\n        }\n        chartArray.push({\n          label: dataLabel,\n          y: value,\n          ttip: `${parseFloat(twoDPstring).toFixed(2)} at ${dateString}`,\n        });\n      }\n    });\n  });\n  const allChartDataPoints: {\n    name: string;\n    chartDataPoints: ChartDataPoint[];\n  }[] = [];\n  for (const [item, array] of chartDataPointMap) {\n    /* eslint-disable-line no-restricted-syntax */\n    allChartDataPoints.push({ name: item, chartDataPoints: array });\n  }\n\n  if (printDebug()) {\n    allChartDataPoints.forEach(\n      (entry: { name: string; chartDataPoints: ChartDataPoint[] }) => {\n        const name = entry.name;\n        const message =\n          `item ${name} has chart points ` +\n          `${showObj(entry.chartDataPoints)}`;\n        log(message);\n      },\n    );\n  }\n  const result: ItemChartData[] = [];\n  // log(`done making asset points@`);\n  allChartDataPoints.forEach(pr => {\n    const nonZeroInstance = pr.chartDataPoints.findIndex(cdp => {\n      return cdp.y !== 0;\n    });\n    if (nonZeroInstance >= 0) {\n      // log(`non-zero instance found ${showObj(pr)}`);\n      result.push({\n        item: { NAME: pr.name },\n        chartDataPoints: pr.chartDataPoints,\n      });\n    }\n  });\n  return result;\n}\n\nfunction displayWordAs(\n  word: string,\n  model: ModelData,\n  viewSettings: ViewSettings,\n) {\n  // log(`determine where/how to display ${showObj(word)} in a chart`);\n  const result = {\n    asset: false,\n    debt: false,\n    tax: false,\n  };\n\n  const assetMatch = model.assets.filter(a => {\n    return a.NAME === word;\n  });\n  if (assetMatch.length !== 0) {\n    // log(`matched name ${word}`);\n    if (!assetMatch[0].IS_A_DEBT) {\n      // have a matching asset\n      // Include if focus is allItems or this asset name\n      const setAsset = viewSettings.getShowItem(\n        Context.Asset,\n        assetMatch[0].NAME,\n      );\n      if (setAsset) {\n        result.asset = true;\n      }\n    } else {\n      // have a matching debt\n      // Include if focus is allItems or this debt name\n      const setDebt = viewSettings.getShowItem(\n        Context.Debt,\n        assetMatch[0].NAME,\n      );\n      if (setDebt) {\n        result.debt = true;\n      }\n    }\n  }\n\n  const catMatch = model.assets.filter(a => {\n    return a.CATEGORY === word;\n  });\n  if (catMatch.length !== 0) {\n    catMatch.forEach(a => {\n      // log(`matched category ${word}`);\n      if (a.IS_A_DEBT) {\n        // Have a debt with a matching category\n        // Include if focus is allItems or this category name\n        const setDebt = viewSettings.getShowItem(Context.Debt, a.NAME);\n        if (setDebt) {\n          result.debt = true;\n        }\n      } else {\n        // Have an asset with a matching category\n        // Include if focus is allItems or this category name\n        const setAsset = viewSettings.getShowItem(Context.Asset, a.NAME);\n        if (setAsset) {\n          result.asset = true;\n        }\n      }\n    });\n  }\n  return result;\n}\n\nfunction displayAs(name: string, model: ModelData, viewSettings: ViewSettings) {\n  const words = name.split(separator);\n  const result = {\n    asset: false,\n    debt: false,\n    tax: false,\n  };\n  if (words.length > 1) {\n    words.shift(); // remove the first item which is the description\n    // the second item is the thing that's affected and determine\n    // where to display\n  }\n  words.forEach(w => {\n    const x = displayWordAs(w, model, viewSettings);\n    if (x.asset) {\n      result.asset = true;\n    }\n    if (x.debt) {\n      result.debt = true;\n    }\n    if (x.tax) {\n      result.tax = true;\n    }\n  });\n  if (printDebug()) {\n    if (result.asset) {\n      log(`display ${name} as an asset`);\n    }\n    if (result.debt) {\n      log(`display ${name} as an debt`);\n    }\n    if (result.tax) {\n      log(`display ${name} as tax`);\n    }\n  }\n  return result;\n}\nfunction makeADTChartNames(\n  allNames: string[],\n  model: ModelData,\n  viewSettings: ViewSettings,\n) {\n  // log(`allNames = ${showObj(allNames)}`)\n  const assetChartNames: string[] = [];\n  const debtChartNames: string[] = [];\n  allNames.forEach(n => {\n    const x = displayAs(n, model, viewSettings);\n    if (x.asset) {\n      assetChartNames.push(n);\n    } else if (x.debt) {\n      debtChartNames.push(n);\n    }\n  });\n\n  return {\n    assetChartNames,\n    debtChartNames,\n  };\n}\n\nfunction assignCategories(\n  dateNameValueMap: Map<\n    string, // date\n    Map<\n      string, // name\n      number // value\n    >\n  >,\n  allDates: Date[],\n  items: string[],\n  model: ModelData,\n  categoryCache: Map<string, string>,\n) {\n  // log(`categorise these ${items}`);\n  const categoryNames = new Set<string>();\n  const mapForChart = new Map<string, Map<string, number>>();\n  allDates.forEach(date => {\n    items.forEach(item => {\n      // log(`item = ${showObj(item)}`);\n      const d = date.toDateString();\n\n      const NVM = dateNameValueMap.get(d);\n      if (NVM === undefined) {\n        // no data to log here\n        return;\n      }\n      const val = NVM.get(item);\n      if (val === undefined) {\n        // no data to log here\n        return;\n      }\n      if (!mapForChart.has(d)) {\n        mapForChart.set(d, new Map<string, number>());\n      }\n      const nameValueMap = mapForChart.get(d);\n      if (nameValueMap === undefined) {\n        log('BUG - map should exist');\n        return;\n      }\n\n      const category = getCategory(item, categoryCache, model);\n      categoryNames.add(category);\n      const existingVal = nameValueMap.get(category);\n      if (existingVal === undefined) {\n        nameValueMap.set(category, val);\n        // log(`set map ${category}->${val}`);\n      } else {\n        const newVal = existingVal + val;\n        nameValueMap.set(category, newVal);\n        // log(`set map ${category}->${newVal}`);\n      }\n    });\n  });\n  return {\n    map: mapForChart,\n    sources: categoryNames,\n  };\n}\n\nfunction filterIncomeOrExpenseItems(\n  dateNameValueMap: Map<\n    string, // date\n    Map<\n      string, // name\n      number // value\n    >\n  >,\n  allDates: Date[],\n  names: string[],\n  viewSettings: ViewSettings,\n  context: Context,\n) {\n  // log(`filter items by ${focus}`);\n  const categoryNames = new Set<string>();\n  const mapForChart = new Map<string, Map<string, number>>();\n  allDates.forEach(date => {\n    names.forEach(item => {\n      const d = date.toDateString();\n\n      const NVM = dateNameValueMap.get(d);\n      if (NVM === undefined) {\n        // no data to log here\n        return;\n      }\n      const val = NVM.get(item);\n      if (val === undefined) {\n        // no data to log here\n        return;\n      }\n      if (!mapForChart.has(d)) {\n        mapForChart.set(d, new Map<string, number>());\n      }\n      const nameValueMap = mapForChart.get(d);\n      if (nameValueMap === undefined) {\n        log('BUG - map should exist');\n        return;\n      }\n      // log(`item ${item} has category ${category}`);\n\n      if (viewSettings.getShowItem(context, item)) {\n        // log(`include this item for ${focus}`);\n        nameValueMap.set(item, val);\n      } else {\n        // log(`do not include this item for ${focus}`);\n      }\n    });\n  });\n  return {\n    map: mapForChart,\n    sources: categoryNames,\n  };\n}\n\nfunction ensureDateValueMapsExist(\n  typeDateNameValueMap: Map<\n    string, // type\n    Map<\n      string, // date\n      Map<\n        string, // name\n        number // value\n      >\n    >\n  >,\n  name: string,\n) {\n  const dateNameValueMap = typeDateNameValueMap.get(name);\n  if (dateNameValueMap === undefined) {\n    // log(`add storage for ${name} to typeDateNameValueMap`)\n    typeDateNameValueMap.set(\n      name,\n      new Map<\n        string, // date\n        Map<\n          string, // name\n          number // value\n        >\n      >(),\n    );\n  }\n}\n\nfunction getSettingsValues(viewSettings: ViewSettings) {\n  const detail: string = viewSettings.getViewSetting(viewDetail, fine);\n  const frequency: string = viewSettings.getViewSetting(\n    viewFrequency,\n    annually,\n  );\n  //if(frequency !== annually){\n  //  log(`viewSettings gave monthly viewSetting`);\n  //}\n  const taxChartType: string = viewSettings.getViewSetting(\n    taxChartFocusType,\n    allItems,\n  );\n  const taxChartPerson: string = viewSettings.getViewSetting(\n    taxChartFocusPerson,\n    allItems,\n  );\n  const taxChartNetString: string = viewSettings.getViewSetting(\n    taxChartShowNet,\n    allItems,\n  );\n  const taxChartNet =\n    taxChartNetString === 'Y' ||\n    taxChartNetString === 'y' ||\n    taxChartNetString === 'yes';\n  return {\n    detail,\n    frequency,\n    taxChartType,\n    taxChartPerson,\n    taxChartNet,\n  };\n}\n\nfunction mapNamesToTypes(model: ModelData) {\n  const nameToTypeMap = new Map<string, string>();\n  model.expenses.forEach(expense => {\n    nameToTypeMap.set(expense.NAME, evaluationType.expense);\n  });\n  model.incomes.forEach(income => {\n    nameToTypeMap.set(income.NAME, evaluationType.income);\n    const liabilities = income.LIABILITY.split(separator);\n    liabilities.forEach(l => {\n      if (l.endsWith(incomeTax)) {\n        const person = l.substring(0, l.length - incomeTax.length);\n        const icTag = makeIncomeTaxTag(person);\n        const netIncomeTag = makeNetIncomeTag(person);\n\n        // log(`netIncomeTag = ${netIncomeTag}, icTag   = ${icTag}`);\n        nameToTypeMap.set(netIncomeTag, evaluationType.taxLiability);\n        nameToTypeMap.set(icTag, evaluationType.taxLiability);\n      } else if (l.endsWith(nationalInsurance)) {\n        const person = l.substring(0, l.length - nationalInsurance.length);\n        const niTag = makeNationalInsuranceTag(person);\n        const netIncomeTag = makeNetIncomeTag(person);\n        // log(`netIncomeTag = ${netIncomeTag}, niTag   = ${niTag}`);\n        nameToTypeMap.set(netIncomeTag, evaluationType.taxLiability);\n        nameToTypeMap.set(niTag, evaluationType.taxLiability);\n      }\n    });\n  });\n  model.assets.forEach(asset => {\n    nameToTypeMap.set(asset.NAME, evaluationType.asset);\n    if (asset.NAME.startsWith(pensionDB)) {\n      nameToTypeMap.set(\n        `${asset.NAME}Contribution`,\n        evaluationType.taxLiability,\n      );\n    }\n    const liabilities = asset.LIABILITY.split(separator);\n    liabilities.forEach(l => {\n      if (l.endsWith(cgt)) {\n        const person = l.substring(0, l.length - cgt.length);\n        const cgtTag = makeCGTTag(person);\n        const netGainTag = makeNetGainTag(person);\n        // log(`netGainTag = ${netGainTag}, cgtTag   = ${cgtTag}`);\n        nameToTypeMap.set(netGainTag, evaluationType.taxLiability);\n        nameToTypeMap.set(cgtTag, evaluationType.taxLiability);\n      } else if (l.endsWith(incomeTax)) {\n        const person = l.substring(0, l.length - incomeTax.length);\n        const icTag = makeIncomeTaxTag(person);\n        const netIncomeTag = makeNetIncomeTag(person);\n        // log(`netIncomeTag = ${netIncomeTag}, icTag   = ${icTag}`);\n        nameToTypeMap.set(netIncomeTag, evaluationType.taxLiability);\n        nameToTypeMap.set(icTag, evaluationType.taxLiability);\n      } else if (l.endsWith(nationalInsurance)) {\n        const person = l.substring(0, l.length - nationalInsurance.length);\n        const niTag = makeNationalInsuranceTag(person);\n        const netIncomeTag = makeNetIncomeTag(person);\n        // log(`netIncomeTag = ${netIncomeTag}, niTag   = ${niTag}`);\n        nameToTypeMap.set(netIncomeTag, evaluationType.taxLiability);\n        nameToTypeMap.set(niTag, evaluationType.taxLiability);\n      }\n    });\n    if (asset.NAME.startsWith(crystallizedPension)) {\n      const person = asset.NAME.substring(crystallizedPension.length).split(\n        dot,\n      )[0];\n      const icTag = makeIncomeTaxTag(person);\n      const netIncomeTag = makeNetIncomeTag(person);\n\n      // log(`netIncomeTag = ${netIncomeTag}, icTag   = ${icTag}`);\n      nameToTypeMap.set(netIncomeTag, evaluationType.taxLiability);\n      nameToTypeMap.set(icTag, evaluationType.taxLiability);\n    }\n  });\n  model.settings.forEach(setting => {\n    nameToTypeMap.set(setting.NAME, evaluationType.setting);\n  });\n  nameToTypeMap.set(incomeTax, evaluationType.taxLiability);\n  nameToTypeMap.set(nationalInsurance, evaluationType.taxLiability);\n  nameToTypeMap.set(cgt, evaluationType.taxLiability);\n\n  //for (const [key, value] of nameToTypeMap) {\n  /* eslint-disable-line no-restricted-syntax */\n  //log(`nameToTypeMap[${key}]=${value}`);\n  //}\n\n  return nameToTypeMap;\n}\n\nfunction generateEvaluationDates(roi: Interval, frequency: string) {\n  const addPreDate = true;\n  let freqString = '';\n  if (frequency === monthly) {\n    freqString = '1m';\n  } else {\n    freqString = '1y';\n  }\n  return generateSequenceOfDates(roi, freqString, addPreDate);\n}\n\nfunction getDisplayType(evaln: Evaluation, nameToTypeMap: Map<string, string>) {\n  // ensure that for this evaluation, its type\n  // is present in the typeDateNameValueMap\n  const evalnType = nameToTypeMap.get(evaln.name);\n  if (evalnType === undefined) {\n    checkEvalnType(\n      // could print 'BUG'\n      evaln,\n      nameToTypeMap,\n    );\n    return undefined; // don't include in chart\n  }\n  return evalnType;\n}\n\nexport function makeChartData(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  evaluationsAndVals: {\n    evaluations: Evaluation[];\n    todaysAssetValues: Map<string, AssetVal>;\n    todaysDebtValues: Map<string, DebtVal>;\n    todaysIncomeValues: Map<string, IncomeVal>;\n    todaysExpenseValues: Map<string, ExpenseVal>;\n    todaysSettingValues: Map<string, SettingVal>;\n  },\n) {\n  if (evaluationsAndVals.evaluations.length === 0) {\n    const emptyData: DataForView = {\n      labels: [],\n      expensesData: [],\n      incomesData: [],\n      assetData: [],\n      debtData: [],\n      taxData: [],\n      todaysAssetValues: new Map<string, AssetVal>(),\n      todaysDebtValues: new Map<string, DebtVal>(),\n      todaysIncomeValues: new Map<string, IncomeVal>(),\n      todaysExpenseValues: new Map<string, ExpenseVal>(),\n      todaysSettingValues: new Map<string, SettingVal>(),\n      reportData: [],\n    };\n    return emptyData;\n  }\n\n  const roiStartDate: Date = makeDateFromString(\n    getSettings(model.settings, roiStart, 'Oct 1, 2017'),\n  );\n  const roiEndDate: Date = makeDateFromString(\n    getSettings(model.settings, roiEnd, 'Oct 1, 2022'),\n  );\n  const roi = {\n    start: roiStartDate,\n    end: roiEndDate,\n  };\n\n  let incomeNames: string[] = model.incomes.map(i => i.NAME);\n  let expenseNames: string[] = model.expenses.map(e => e.NAME);\n  let assetNames: string[] = model.assets\n    .filter(a => {\n      return a.IS_A_DEBT === false;\n    })\n    .map(a => a.NAME);\n  let debtNames: string[] = model.assets\n    .filter(a => {\n      return a.IS_A_DEBT === true;\n    })\n    .map(a => a.NAME);\n\n  const categoryCache = new Map<string, string>();\n  const {\n    detail,\n    frequency,\n    taxChartType,\n    taxChartPerson,\n    taxChartNet,\n  } = getSettingsValues(viewSettings);\n\n  const showAllAssets = viewSettings.getShowAll(Context.Asset);\n  const showAllDebts = viewSettings.getShowAll(Context.Debt);\n  const showAllIncomes = viewSettings.getShowAll(Context.Income);\n  const showAllExpenses = viewSettings.getShowAll(Context.Expense);\n  const showAssetAdditions = viewSettings.getChartViewType(chartAdditions);\n  const showAssetReductions = viewSettings.getChartViewType(chartReductions);\n  const showAssetValues = viewSettings.getChartViewType(chartVals);\n\n  // set up empty data structure for result\n  const result: DataForView = {\n    labels: [],\n    expensesData: [],\n    incomesData: [],\n    assetData: [],\n    debtData: [],\n    taxData: [],\n    todaysAssetValues: new Map<string, AssetVal>(),\n    todaysDebtValues: new Map<string, DebtVal>(),\n    todaysIncomeValues: new Map<string, IncomeVal>(),\n    todaysExpenseValues: new Map<string, ExpenseVal>(),\n    todaysSettingValues: new Map<string, SettingVal>(),\n    reportData: [],\n  };\n\n  result.todaysAssetValues = evaluationsAndVals.todaysAssetValues;\n  result.todaysDebtValues = evaluationsAndVals.todaysDebtValues;\n  result.todaysIncomeValues = evaluationsAndVals.todaysIncomeValues;\n  result.todaysExpenseValues = evaluationsAndVals.todaysExpenseValues;\n  result.todaysSettingValues = evaluationsAndVals.todaysSettingValues;\n\n  // each expense/income/asset has a name\n  // remember, for each name, whether it's an expense/income/asset\n  // so we can draw that data into the chart view\n  // for expense/income/asset\n  const nameToTypeMap = mapNamesToTypes(model);\n\n  const allDates: Date[] = generateEvaluationDates(roi, frequency);\n\n  // log(`dates for chart = ${showObj(allDates)}`);\n  // type, date, name, value\n  const typeDateNameValueMap = new Map<\n    string, // type\n    Map<\n      string, // date\n      Map<\n        string, // name\n        number // value\n      >\n    >\n  >();\n\n  typeDateNameValueMap.set(\n    'assetOrDebtFocus', // we will track data for this special asset\n    new Map<\n      string, // date\n      Map<\n        string, // name\n        number // value\n      >\n    >(),\n  );\n  typeDateNameValueMap.set(\n    'tax', // we will track data for this special \"asset\"\n    new Map<\n      string, // date\n      Map<\n        string, // name\n        number // value\n      >\n    >(),\n  );\n  let assetOrDebtValueSources: string[] = [];\n\n  const prevEvalAssetValue = new Map<string, number>();\n  // prev is used to calc + or -\n\n  evaluationsAndVals.evaluations.forEach(evaln => {\n    const firstDateAfterEvaln = allDates.find(d => d >= evaln.date);\n    if (firstDateAfterEvaln === undefined) {\n      // no need to capture data from this evaluation\n      // it's after all our dates for the chart\n      // log(`evaln = ${showObj(evaln)} not in date range - don't process`);\n      return;\n    }\n    const evalnType = getDisplayType(evaln, nameToTypeMap);\n    if (!evalnType) {\n      return;\n    }\n    // log(`processing ${showObj(evaln)}`);\n    // log(`evalnType = ${evalnType}`);\n    //\n    // revalues or pensionDB incomes and expenses\n    if (\n      evalnType === evaluationType.income ||\n      evalnType === evaluationType.expense\n    ) {\n      if (evaln.source === revalue) {\n        // expenses and incomes are accumulated for the chart data\n        // each evaluation of an income or an expense\n        // represents money coming in or going out\n        // but the exception is a revaluation.\n        // A revaluation of income or expense isn't included\n        // as an effect on the charts.  Chart elements\n        // only show incomes and expenses as these affect\n        // assets.\n        // log(`skip expense or income revaluation`);\n        return;\n      }\n      if (evaln.name.startsWith(pensionDB)) {\n        // log(`charting value for ${evaln.name}, ${evaln.value}`);\n        const matchingIncome = model.incomes.find(i => {\n          return i.NAME === evaln.name;\n        });\n        if (matchingIncome === undefined) {\n          throw new Error(`couldn't match income for ${evaln.name}`);\n        }\n        if (evaln.date < getTriggerDate(matchingIncome.START, model.triggers)) {\n          // we tracked this evaluation just to adjust accrued benefit\n          // but don't actually received any of this income yet...\n          // so skip for charting purposes\n          return;\n        }\n      }\n    }\n    // log(`generate chart data for dates ${showObj(dates)}`);\n\n    // Get a map ready to hold date->Map(name->value)\n    ensureDateValueMapsExist(typeDateNameValueMap, evalnType);\n    const dateNameValueMap = typeDateNameValueMap.get(evalnType);\n    if (dateNameValueMap !== undefined) {\n      const date = firstDateAfterEvaln.toDateString();\n      if (!dateNameValueMap.has(date)) {\n        // log(`make a map for date ${date}`);\n        dateNameValueMap.set(date, new Map<string, number>());\n      }\n      // for this type and date, we have a map ready to hold\n      // name->value\n      const nameValueMap = dateNameValueMap.get(date);\n      if (nameValueMap !== undefined) {\n        // log(`set data for ${evalnType}, ${date}, `\n        //   +`${evaln.name}, ${evaln.value}, ${evaln.source}`);\n        const existingValue = nameValueMap.get(evaln.name);\n\n        if (evalnType === evaluationType.taxLiability) {\n          //  log(`set taxLiability ${showObj(evaln)}`);\n          nameValueMap.set(evaln.source, evaln.value);\n        } else if (\n          existingValue === undefined ||\n          evalnType === evaluationType.asset\n        ) {\n          // asset valuations over-write previous values\n          nameValueMap.set(evaln.name, evaln.value);\n        } else if (\n          evalnType === evaluationType.income ||\n          evalnType === evaluationType.expense ||\n          evalnType === evaluationType.expense\n        ) {\n          // income or expense values accumulate over time\n          // log(`accumulate chart values for ${evaln.name}`);\n          const newValue = existingValue + evaln.value;\n          // log(`change ${existingValue} to ${newValue}`);\n          nameValueMap.set(evaln.name, newValue);\n        } else if (evalnType === evaluationType.setting) {\n          // nameValueMap.set(evaln.name, evaln.value);\n        } else {\n          throw new Error(`unhandled evaluation type ${evalnType}`);\n        }\n      }\n    }\n\n    logMapOfMapofMap(typeDateNameValueMap);\n    // log(`evaln.name = ${evaln.name}, evalnType = ${evalnType}`);\n\n    // accumulate data for assets, debts, tax\n    let doIncludeEvaln = false;\n    if (evalnType === evaluationType.taxLiability) {\n      // log(`tax evaln = ${showObj(evaln)}`);\n      const tagData = deconstructTaxTag(evaln.source);\n      // log(`tag = ${showObj(tagData)}`);\n      let rightType = false;\n      let rightPerson = false;\n      if (taxChartType === allItems) {\n        rightType = true;\n      } else if (taxChartType === gain) {\n        if (tagData.isGain) {\n          rightType = true;\n        }\n      } else if (taxChartType === income) {\n        if (tagData.isIncome) {\n          rightType = true;\n        }\n      }\n      if (rightType) {\n        // log(`taxChartNet = ${taxChartNet} and tagData.isNet = ${tagData.isNet}`);\n        if (!taxChartNet && tagData.isNet) {\n          // log(`exclude ${evaln.source} from graph`);\n          rightType = false;\n        }\n      }\n      if (rightType) {\n        if (taxChartPerson === allItems) {\n          rightPerson = true;\n        } else {\n          if (tagData.person === taxChartPerson) {\n            rightPerson = true;\n          }\n        }\n      }\n      doIncludeEvaln = rightType && rightPerson;\n      // log(`include taxLiability? = ${doIncludeEvaln}`);\n    } else {\n      doIncludeEvaln =\n        viewSettings.getShowItem(Context.Asset, evaln.name) ||\n        viewSettings.getShowItem(Context.Debt, evaln.name);\n      // log(`include ${evaln.name}? = ${doIncludeEvaln}`);\n    }\n    // log(`doIncludeEvaln = ${doIncludeEvaln}`);\n    if (doIncludeEvaln) {\n      // log(`evaln of asset ${showObj(evaln)} for val or delta...`);\n      // direct asset data to the assets part of typeDateNameValueMap\n      // and the tax part to the \"tax\" part of typeDateNameValueMap\n      let assetOrDebtDateNameValueMap;\n      if (evalnType === evaluationType.taxLiability) {\n        // log(`evaln for tax chart = ${showObj(evaln)}`);\n        assetOrDebtDateNameValueMap = typeDateNameValueMap.get('tax');\n      } else {\n        assetOrDebtDateNameValueMap = typeDateNameValueMap.get(\n          'assetOrDebtFocus',\n        );\n      }\n      if (assetOrDebtDateNameValueMap !== undefined) {\n        const date = firstDateAfterEvaln.toDateString();\n        if (!assetOrDebtDateNameValueMap.has(date)) {\n          assetOrDebtDateNameValueMap.set(date, new Map<string, number>());\n        }\n        const assetOrDebtNameValueMap = assetOrDebtDateNameValueMap.get(date);\n        if (assetOrDebtNameValueMap !== undefined) {\n          // log(`${date} asset source '${evaln.source}' and value '${evaln.value}'`);\n          // log(`assetChartSetting = ${assetChartSetting}`);\n          // Either log values or deltas;\n          // and assets plot values or deltas according to assetChartSetting.\n          if (evalnType !== evaluationType.taxLiability && showAssetValues) {\n            // Log asset values.\n            // log(`add data[${evaln.name}] = ${evaln.value}`);\n            if (assetOrDebtValueSources.indexOf(evaln.name) < 0) {\n              // log(`add value source ${evaln.name}`);\n              assetOrDebtValueSources.push(evaln.name);\n            }\n            // we display the latest evaluation, even if there\n            // was one already, we overwrite the value\n            assetOrDebtNameValueMap.set(evaln.name, evaln.value);\n          } else if (evalnType === evaluationType.taxLiability) {\n            const mapKey = evaln.source;\n            // log(`setting tax chart data ${mapKey}, ${evaln.value}`);\n            assetOrDebtNameValueMap.set(mapKey, evaln.value);\n            if (assetOrDebtValueSources.indexOf(mapKey) < 0) {\n              assetOrDebtValueSources.push(mapKey);\n            }\n          } else {\n            // view a delta - what has been the change to the asset?\n            const mapKey = evaln.source + separator + evaln.name;\n            let prevValue = 0.0;\n            const mapValue = prevEvalAssetValue.get(evaln.name);\n            if (mapValue !== undefined) {\n              prevValue = mapValue;\n            }\n            // log(`asset ${evaln.name} val is `+\n            //    `${evaln.value}, was ${prevValue}`);\n            // log(`and the source of change is ${evaln.source}`);\n            // log(`and change happened ${evaln.date}`);\n            let valueForChart = evaln.value - prevValue;\n            // log(`asset val change is ${valueForChart}\n            //   from ${evaln.source}`);\n            // log(`this delta is ${valueForChart}`);\n            const existingDelta = assetOrDebtNameValueMap.get(mapKey);\n            if (existingDelta !== undefined) {\n              // accumulate changes\n              // log(`existing delta is ${existingDelta}`);\n              valueForChart += existingDelta;\n              // log(`accumulated delta is ${valueForChart}`);\n            } else if (valueForChart !== 0) {\n              // log(`no pre-existing delta`);\n            }\n            if (showAssetAdditions && valueForChart < 0) {\n              // log(`suppress -ve deltas when looking for additions`);\n            } else if (showAssetReductions && valueForChart > 0) {\n              // log(`suppress +ve deltas when looking for reductions`);\n            } else if (valueForChart === 0) {\n              // log(`don\\'t include zero values for chart: ${evaln.source}`);\n            } else {\n              // log(`log chart delta ${valueForChart}`);\n              assetOrDebtNameValueMap.set(mapKey, valueForChart);\n              if (assetOrDebtValueSources.indexOf(mapKey) < 0) {\n                // log(`log chart mapKey ${mapKey}`);\n                assetOrDebtValueSources.push(mapKey);\n              }\n            }\n            // log(`set asset value as 'previous'\n            //   for ${evaln.name} is ${evaln.value}`);\n            prevEvalAssetValue.set(evaln.name, evaln.value);\n          }\n        }\n      }\n    }\n  });\n\n  logMapOfMapofMap(typeDateNameValueMap);\n\n  // remove the 'preDate' (helped with defining first displayable bucket)\n  allDates.shift();\n\n  const taxValueSources = assetOrDebtValueSources;\n  if (detail === coarse || detail === total) {\n    // log('gather chart data into categories');\n    let dateNameValueMap = typeDateNameValueMap.get('assetOrDebtFocus');\n    if (dateNameValueMap !== undefined) {\n      const categories = assignCategories(\n        dateNameValueMap,\n        allDates,\n        assetOrDebtValueSources,\n        model,\n        categoryCache,\n      );\n      if (categories !== undefined) {\n        typeDateNameValueMap.set('assetOrDebtFocus', categories.map);\n        assetOrDebtValueSources = [...categories.sources];\n      }\n      assetNames = [...categories.sources]; // NQR\n      debtNames = [...categories.sources]; // NQR\n    }\n    if (showAllExpenses) {\n      // unfocussed expense views can have coarse views\n      dateNameValueMap = typeDateNameValueMap.get(evaluationType.expense);\n      if (dateNameValueMap !== undefined) {\n        const categories = assignCategories(\n          dateNameValueMap,\n          allDates,\n          expenseNames,\n          model,\n          categoryCache,\n        );\n        typeDateNameValueMap.set(evaluationType.expense, categories.map);\n        expenseNames = [...categories.sources];\n      }\n    }\n    if (showAllIncomes) {\n      // unfocussed income views can have coarse views\n      dateNameValueMap = typeDateNameValueMap.get(evaluationType.income);\n      if (dateNameValueMap !== undefined) {\n        const categories = assignCategories(\n          dateNameValueMap,\n          allDates,\n          incomeNames,\n          model,\n          categoryCache,\n        );\n        typeDateNameValueMap.set(evaluationType.income, categories.map);\n        incomeNames = [...categories.sources];\n      }\n    }\n  }\n\n  // log(`compare ${expenseChartFocus} against ${expenseChartFocusAll}`);\n  if (!showAllExpenses) {\n    // apply a filter to expense data\n    // focussed expense views have fewer items displayed\n    const dateNameValueMap = typeDateNameValueMap.get(evaluationType.expense);\n    if (dateNameValueMap !== undefined) {\n      const focusItems = filterIncomeOrExpenseItems(\n        dateNameValueMap,\n        allDates,\n        expenseNames,\n        viewSettings,\n        Context.Expense,\n      );\n      typeDateNameValueMap.set(evaluationType.expense, focusItems.map);\n    }\n  }\n  if (!showAllIncomes) {\n    // apply a filter to income data\n    // focussed income views have fewer items displayed\n    const dateNameValueMap = typeDateNameValueMap.get(evaluationType.income);\n    if (dateNameValueMap !== undefined) {\n      const focusItems = filterIncomeOrExpenseItems(\n        dateNameValueMap,\n        allDates,\n        incomeNames,\n        viewSettings,\n        Context.Income,\n      );\n      typeDateNameValueMap.set(evaluationType.income, focusItems.map);\n    }\n  }\n\n  const mapForChart = typeDateNameValueMap.get('assetOrDebtFocus');\n  if (mapForChart !== undefined) {\n    // log(`go to make asset points@`);\n\n    let assetChartNames = [];\n    let debtChartNames = [];\n    // when we plot the values of a single asset\n    // we want to use assetValueSources as the chart items\n    // (i.e. in the chart legend)\n    // when we plot deltas, additions or reductions,\n    // use the source as the item\n    if (/*showSingleAsset || */ !showAssetValues) {\n      assetChartNames = assetOrDebtValueSources;\n    } else if (showAllAssets) {\n      // when showing all assets and values,\n      // use assetNames (not sources)\n      assetChartNames = assetNames;\n    } else {\n      assetChartNames = assetOrDebtValueSources;\n    }\n    if (!showAllAssets && /*!showSingleAsset && */ showAssetValues) {\n      assetChartNames = assetChartNames.filter(i => assetNames.includes(i));\n    }\n    // log(`assetChartNames = ${showObj(assetChartNames)}`);\n\n    if (/*showSingleDebt || */ !showAssetValues) {\n      debtChartNames = assetOrDebtValueSources;\n    } else if (showAllDebts) {\n      // when showing all debt and values,\n      // use debtNames (not sources)\n      debtChartNames = debtNames;\n    } else {\n      debtChartNames = assetOrDebtValueSources;\n    }\n    if (!showAllDebts && /*!showSingleDebt && */ showAssetValues) {\n      debtChartNames = debtChartNames.filter(i => debtNames.includes(i));\n    }\n\n    const aDTAssetChartNames = makeADTChartNames(\n      assetChartNames,\n      model,\n      viewSettings,\n    );\n    const aDTDebtChartNames = makeADTChartNames(\n      debtChartNames,\n      model,\n      viewSettings,\n    );\n\n    result.assetData = makeChartDataPoints(\n      mapForChart,\n      allDates,\n      aDTAssetChartNames.assetChartNames,\n      model.settings,\n      false, // don't negate\n      detail === total,\n    );\n\n    result.debtData = makeChartDataPoints(\n      mapForChart,\n      allDates,\n      aDTDebtChartNames.debtChartNames,\n      model.settings,\n      true, // negate values\n      detail === total,\n    );\n  }\n\n  const mapForTaxChart = typeDateNameValueMap.get('tax');\n  if (mapForTaxChart !== undefined) {\n    logMapOfMap(mapForTaxChart);\n    result.taxData = makeChartDataPoints(\n      mapForTaxChart,\n      allDates,\n      taxValueSources,\n      model.settings,\n      false, // don't negate\n      detail === total,\n    );\n  }\n\n  logMapOfMapofMap(typeDateNameValueMap);\n\n  const expenseDateNameValueMap = typeDateNameValueMap.get(\n    evaluationType.expense,\n  );\n  if (expenseDateNameValueMap !== undefined) {\n    result.expensesData = makeChartDataPoints(\n      expenseDateNameValueMap,\n      allDates,\n      expenseNames,\n      model.settings,\n      false, // don't negate\n      detail === total,\n    );\n  }\n  const incomeDateNameValueMap = typeDateNameValueMap.get(\n    evaluationType.income,\n  );\n  if (incomeDateNameValueMap !== undefined) {\n    result.incomesData = makeChartDataPoints(\n      incomeDateNameValueMap,\n      allDates,\n      incomeNames,\n      model.settings,\n      false, // don't negate\n      detail === total,\n    );\n  }\n\n  // log(`chart data produced: ${showObj(result)}`);\n  result.labels = allDates.map(d => {\n    return d.toDateString();\n  });\n\n  // log(`labels = ${result.labels}`);\n  return result;\n}\n\nexport function makeChartDataFromEvaluations(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  evaluationsAndVals: {\n    evaluations: Evaluation[];\n    todaysAssetValues: Map<string, AssetVal>;\n    todaysDebtValues: Map<string, DebtVal>;\n    todaysIncomeValues: Map<string, IncomeVal>;\n    todaysExpenseValues: Map<string, ExpenseVal>;\n    todaysSettingValues: Map<string, SettingVal>;\n  },\n) {\n  viewSettings.setModel(model);\n  return makeChartData(model, viewSettings, evaluationsAndVals);\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\n\nimport { ModelData, Trigger, FormProps } from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeDateFromString } from '../../stringUtils';\nimport { makeButton } from './Button';\nimport { Input } from './Input';\n\ninterface EditTriggerFormState {\n  NAME: string;\n  DATE: string;\n}\ninterface EditTriggerProps extends FormProps {\n  checkFunction: (t: Trigger, modelData: ModelData) => string;\n  submitFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n  deleteFunction: (settingName: string) => Promise<boolean>;\n}\n\nexport function newTriggerButtonData(\n  submitTriggerFunction: (e: Trigger) => void,\n  showAlert: (arg0: string) => void,\n) {\n  return {\n    text: 'Make new important date',\n    action: async (e: FormEvent<Element>) => {\n      // e.persist();\n      e.preventDefault();\n      const nameString = prompt('Name for new important date', '');\n      if (nameString === null || nameString.length === 0) {\n        showAlert('names need to have some characters');\n        return;\n      }\n      const dateString = prompt('Important date (e.g. 1 Jan 2019)', '');\n      if (dateString === null || dateString.length === 0) {\n        showAlert(`date didn't make sense`);\n        return;\n      }\n      const dateTry = makeDateFromString(dateString);\n      if (!dateTry.getTime()) {\n        showAlert(`date didn't make sense`);\n        return;\n      }\n      await submitTriggerFunction({\n        NAME: nameString,\n        DATE: dateString,\n      });\n    },\n  };\n}\nexport class AddDeleteTriggerForm extends Component<\n  EditTriggerProps,\n  EditTriggerFormState\n> {\n  public defaultState: EditTriggerFormState;\n\n  public constructor(props: EditTriggerProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteIncomeForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      DATE: '',\n    };\n\n    this.state = this.defaultState;\n\n    this.handleName = this.handleName.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  public render() {\n    return (\n      <form className=\"container-fluid\" onSubmit={this.add}>\n        <Row>\n          <Col>\n            Name:\n            <Input\n              type={'text'}\n              name={'triggername'}\n              value={this.state.NAME}\n              placeholder={'Enter name'}\n              onChange={this.handleName}\n            />\n          </Col>{' '}\n        </Row>{' '}\n        <Row>\n          <Col>\n            Date:\n            <Input\n              type={'text'}\n              name={'date'}\n              value={this.state.DATE}\n              placeholder={'Enter date'}\n              onChange={this.handleValueChange}\n            />\n            {makeButton(\n              'Create new important date (over-writes any existing with the same name)',\n              this.add,\n              'addTrigger',\n              'addTrigger',\n              'primary',\n            )}\n          </Col>{' '}\n        </Row>{' '}\n      </form>\n    );\n  }\n\n  private handleName(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ NAME: value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ DATE: value });\n  }\n\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.triggers.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        this.props.showAlert(\n          `There's already a date called ${this.state.NAME}`,\n        );\n        return;\n      }\n    }\n\n    // log('adding something ' + showObj(this));\n    const trigger: Trigger = {\n      NAME: this.state.NAME,\n      DATE: this.state.DATE,\n    };\n    const message = this.props.checkFunction(trigger, this.props.model);\n    if (message.length > 0) {\n      this.props.showAlert(message);\n    } else {\n      await this.props.submitFunction(trigger, this.props.model);\n      // this.props.showAlert('added new important date');\n      // clear fields\n      this.setState(this.defaultState);\n      this.props.showAlert('added important date OK');\n    }\n  }\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteFunction(this.state.NAME)) {\n      this.setState(this.defaultState);\n      this.props.showAlert('deleted important date');\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n}\n","import React, { Component, FormEvent } from 'react';\n\nimport { Trigger, ModelData, FormProps } from '../../types/interfaces';\nimport { newTriggerButtonData } from './AddDeleteTriggerForm';\nimport { lessThan } from '../../stringUtils';\n\nconst welcomeString = 'Choose a date (optional)';\n\ninterface TriggerOptionListProps extends FormProps {\n  triggers: Trigger[];\n  handleChange: (value: string) => void;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n  selectedItem: string;\n}\n\nexport class TriggerOptionList extends Component<TriggerOptionListProps, {}> {\n  public constructor(props: TriggerOptionListProps) {\n    super(props);\n    this.state = { selectedItem: '' };\n  }\n  private newTriggerMade(e: Trigger) {\n    this.props.submitTriggerFunction(e, this.props.model);\n    this.setState({\n      ...this.state,\n      selectedItem: e.NAME,\n    });\n    this.props.handleChange(e.NAME);\n  }\n  public render() {\n    const optionData = this.props.triggers\n      .sort((a, b) => {\n        return lessThan(a.NAME, b.NAME);\n      })\n      .map(trigger => {\n        return {\n          text: trigger.NAME,\n          action: (e: FormEvent<Element>) => {\n            // log(`detected action`);\n            // e.persist();\n            e.preventDefault();\n            this.props.handleChange(trigger.NAME);\n          },\n        };\n      });\n    optionData.push(\n      newTriggerButtonData(\n        this.newTriggerMade.bind(this),\n        this.props.showAlert,\n      ),\n    );\n    const options = optionData.map(bd => (\n      <option\n        value={bd.text}\n        id={`option-useTrigger-${bd.text}`}\n        key={bd.text}\n        className=\"text-muted\"\n      >\n        {bd.text}\n      </option>\n    ));\n    return (\n      <select\n        className=\"custom-select\"\n        onChange={e => {\n          const found = optionData.find(od => {\n            return od.text === e.target.value;\n          });\n          if (found !== undefined) {\n            found.action(e);\n          }\n        }}\n        value={this.props.selectedItem}\n      >\n        <option>{welcomeString}</option>\n        {options}\n      </select>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport { Trigger, ModelData, FormProps } from '../../types/interfaces';\nimport { TriggerOptionList } from './TriggerOptionList';\nimport { log, showObj, printDebug } from '../../utils';\nimport { makeDateTooltip } from '../../stringUtils';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n\ninterface DateSelectionProps extends FormProps {\n  introLabel: string;\n  setDateFunction: (value: string) => void;\n  inputName: string;\n  inputValue: string;\n  onChangeHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  triggers: Trigger[];\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\nfunction makeDateTooltipForRow(props: DateSelectionProps) {\n  if (printDebug()) {\n    log(`make tooltip with ${showObj(props)}`);\n  }\n  if (props.model.settings.length === 0) {\n    return '';\n  }\n  return makeDateTooltip(props.inputValue, props.triggers);\n}\nexport class DateSelectionRow extends Component<DateSelectionProps, {}> {\n  constructor(props: DateSelectionProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    if (e.target.value === 'today') {\n      e.target.value = new Date().toDateString();\n    }\n    this.props.onChangeHandler(e);\n  }\n\n  public render() {\n    return (\n      <Row>\n        <div className=\"col p-2 mb-2 bg-secondary text-white\">\n          {\n            this.props.introLabel // e.g. Date on which the income value is set:\n          }\n        </div>{' '}\n        {/* end col */}\n        <Col>\n          <TriggerOptionList\n            triggers={this.props.triggers}\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n            handleChange={this.props.setDateFunction}\n            selectedItem=\"\"\n          />\n        </Col>\n        <Col>\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={(props: any) => (\n              <Tooltip {...props}>{`${makeDateTooltipForRow(\n                this.props,\n              )}`}</Tooltip>\n            )}\n          >\n            <input\n              type={'text'}\n              name={\n                this.props.inputName // e.g. 'income valuation date'\n              }\n              value={\n                this.props.inputValue // e.g. this.state.VALUE_SET\n              }\n              placeholder={'Enter date'}\n              onChange={\n                this.handleChange\n                // e.g. this.handleValueSetChange\n              }\n              className=\"form-control\"\n            />\n          </OverlayTrigger>\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport {\n  ModelData,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport {\n  custom,\n  CASH_ASSET_NAME,\n  liquidateAsset,\n  conditional,\n  adjustableType,\n} from '../../localization/stringConstants';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport {\n  lessThan,\n  makeValueAbsPropFromString,\n  makeStringFromBoolean,\n  makeBooleanFromYesNo,\n  makeBooleanFromString,\n} from '../../stringUtils';\n\ninterface EditTransactionFormState {\n  NAME: string;\n  CATEGORY: string;\n  FROM: string;\n  FROM_ABSOLUTE: string;\n  FROM_VALUE: string;\n  FROM_INPUT_VALUE: string;\n  TO: string;\n  TO_ABSOLUTE: string;\n  TO_VALUE: string;\n  TO_INPUT_VALUE: string;\n  DATE: string;\n  STOP_DATE: string; // for regular transactions\n  RECURRENCE: string;\n  LIQUIDATE_FOR_CASH: string;\n}\ninterface EditTransactionProps extends FormProps {\n  checkFunction: (transaction: Transaction, model: ModelData) => string;\n  submitFunction: (transaction: Transaction, model: ModelData) => Promise<void>;\n  deleteFunction: (name: string) => Promise<boolean>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\nfunction assetOptions(model: ModelData, handleChange: any, id: string) {\n  const optionData = model.assets\n    .sort((a, b) => {\n      return lessThan(a.NAME, b.NAME);\n    })\n    .map(asset => {\n      return {\n        text: asset.NAME,\n        action: (e: FormEvent<Element>) => {\n          // log(`detected action`);\n          // e.persist();\n          e.preventDefault();\n          handleChange(asset.NAME);\n        },\n      };\n    })\n    .concat(\n      model.settings\n        .filter(setting => {\n          return setting.TYPE === adjustableType;\n        })\n        .sort((a, b) => {\n          return lessThan(a.NAME, b.NAME);\n        })\n        .map(setting => {\n          return {\n            text: setting.NAME,\n            action: (e: FormEvent<Element>) => {\n              // log(`detected action`);\n              // e.persist();\n              e.preventDefault();\n              handleChange(setting.NAME);\n            },\n          };\n        }),\n    );\n  const options = optionData.map(bd => (\n    <option\n      value={bd.text}\n      id={`option-asset-${bd.text}`}\n      key={bd.text}\n      className=\"text-muted\"\n    >\n      {bd.text}\n    </option>\n  ));\n  return (\n    <select\n      className=\"custom-select\"\n      id={id}\n      onChange={e => {\n        const found = optionData.find(od => {\n          return od.text === e.target.value;\n        });\n        if (found !== undefined) {\n          found.action(e);\n        }\n      }}\n    >\n      <option>Choose an asset/setting</option>\n      {options}\n    </select>\n  );\n}\n\nexport class AddDeleteTransactionForm extends Component<\n  EditTransactionProps,\n  EditTransactionFormState\n> {\n  public defaultState: EditTransactionFormState;\n\n  private transactionFromSelectID = 'fromAssetSelect';\n  private transactionToSelectID = 'toAssetSelect';\n\n  public constructor(props: EditTransactionProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteTransactionForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      CATEGORY: '',\n      FROM: '',\n      FROM_ABSOLUTE: '',\n      FROM_VALUE: '',\n      FROM_INPUT_VALUE: '',\n      TO: '',\n      TO_ABSOLUTE: '',\n      TO_VALUE: '',\n      TO_INPUT_VALUE: '',\n      DATE: '',\n      STOP_DATE: '',\n      RECURRENCE: '',\n      LIQUIDATE_FOR_CASH: 'No',\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleFromChange = this.handleFromChange.bind(this);\n    this.handleToChange = this.handleToChange.bind(this);\n    this.handleFromValueChange = this.handleFromValueChange.bind(this);\n    this.handleToValueChange = this.handleToValueChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleRecurrenceChange = this.handleRecurrenceChange.bind(this);\n    this.handleLiquidateForCashChange = this.handleLiquidateForCashChange.bind(\n      this,\n    );\n\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.setDate = this.setDate.bind(this);\n\n    this.handleStopDateChange = this.handleStopDateChange.bind(this);\n    this.setStopDate = this.setStopDate.bind(this);\n\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  public render() {\n    // log('rendering an AddDeleteTransactionForm');\n    return (\n      <form className=\"container-fluid\" onSubmit={this.add}>\n        <Row>\n          <Col>\n            <Input\n              title=\"Transaction name\"\n              type=\"text\"\n              name=\"transactionname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>{' '}\n        </Row>\n\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel=\"Date on which the transaction occurs\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setDate}\n            inputName=\"date\"\n            inputValue={this.state.DATE}\n            onChangeHandler={this.handleDateChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n        <Row>\n          <Col>\n            <label>Transact from asset (optional):</label>\n          </Col>{' '}\n          <Col>\n            <label>Transact to asset (optional):</label>\n          </Col>{' '}\n          {/* end col */}\n        </Row>\n        {/* end row */}\n        <Row>\n          <Col>\n            {assetOptions(\n              this.props.model,\n              this.handleFromChange,\n              this.transactionFromSelectID,\n            )}\n          </Col>{' '}\n          <Col>\n            {assetOptions(\n              this.props.model,\n              this.handleToChange,\n              this.transactionToSelectID,\n            )}\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"How much to reduce the value of the asset being sold (can be % of asset value)\"\n              type=\"text\"\n              name=\"fromValue\"\n              value={this.state.FROM_INPUT_VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleFromValueChange}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"How much to add to the value of the asset being purchased (can be % of transaction amount)\"\n              type=\"text\"\n              name=\"toValue\"\n              value={this.state.TO_INPUT_VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleToValueChange}\n            />\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"Transaction recurrence, e.g. 6m, 2y (optional)\"\n              type=\"text\"\n              name=\"recurrence\"\n              value={this.state.RECURRENCE}\n              placeholder=\"Enter recurrence\"\n              onChange={this.handleRecurrenceChange}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Liquidate asset to maintain cash-flow\"\n              type=\"text\"\n              name=\"liquidateForCash\"\n              value={this.state.LIQUIDATE_FOR_CASH}\n              placeholder=\"Enter whether we only transact to keep cash afloat\"\n              onChange={this.handleLiquidateForCashChange}\n            />\n          </Col>{' '}\n        </Row>\n        {/* end row */}\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel=\"Date on which any recurrence stops (optional)\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setStopDate}\n            inputName=\"stopDate\"\n            inputValue={this.state.STOP_DATE}\n            onChangeHandler={this.handleStopDateChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n        <Row>\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"transactioncategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>{' '}\n        </Row>\n        {makeButton(\n          'Create new transaction (over-writes any existing with the same name)',\n          this.add,\n          'addTransaction',\n          'addTransaction',\n          'primary',\n        )}\n      </form>\n    );\n  }\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({\n      NAME: value,\n    });\n  }\n  private handleFromChange(value: string) {\n    // log(`from value changed to ${value}`);\n    this.setState({\n      FROM: value,\n    });\n  }\n  private handleToChange(value: string) {\n    this.setState({\n      TO: value,\n    });\n  }\n  private handleFromValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    const parseResult = makeValueAbsPropFromString(value);\n    this.setState({\n      FROM_ABSOLUTE: makeStringFromBoolean(parseResult.absolute),\n    });\n    this.setState({\n      FROM_VALUE: parseResult.value,\n    });\n    this.setState({\n      FROM_INPUT_VALUE: value,\n    });\n  }\n  private handleToValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    const parseResult = makeValueAbsPropFromString(value);\n    this.setState({\n      TO_ABSOLUTE: makeStringFromBoolean(parseResult.absolute),\n    });\n    this.setState({\n      TO_VALUE: parseResult.value,\n    });\n    this.setState({\n      TO_INPUT_VALUE: value,\n    });\n  }\n  private handleCategoryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({\n      CATEGORY: value,\n    });\n  }\n  private handleRecurrenceChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({\n      RECURRENCE: value,\n    });\n  }\n  private handleLiquidateForCashChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({\n      LIQUIDATE_FOR_CASH: value,\n    });\n  }\n  private setDate(value: string): void {\n    this.setState({ DATE: value });\n  }\n  private handleDateChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setDate(value);\n  }\n  private setStopDate(value: string): void {\n    this.setState({ STOP_DATE: value });\n  }\n  private handleStopDateChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStopDate(value);\n  }\n  private resetSelect(id: string) {\n    const selector: any = document.getElementById(id);\n    if (selector !== null) {\n      selector.selectedIndex = '0';\n    }\n  }\n  private async add(e: FormEvent<Element>): Promise<void> {\n    e.preventDefault();\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.transactions.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        this.props.showAlert(\n          `There's already a transaction called ${this.state.NAME}`,\n        );\n        return;\n      }\n    }\n\n    let fromAbsolute = this.state.FROM_ABSOLUTE;\n    let fromValue = this.state.FROM_VALUE;\n    if (this.state.FROM === '') {\n      if (fromAbsolute === '') {\n        // log('setting fromAbsolute = True');\n        fromAbsolute = 'True';\n      }\n      if (fromValue === '') {\n        fromValue = '0';\n      }\n    }\n    let toAbsolute = this.state.TO_ABSOLUTE;\n    let toValue = this.state.TO_VALUE;\n    if (this.state.TO === '') {\n      if (toAbsolute === '') {\n        toAbsolute = 'True';\n      }\n      if (toValue === '') {\n        toValue = '0';\n      }\n    }\n    if (fromAbsolute === '') {\n      this.props.showAlert(\n        'From absolute should be T (absolute value) or F (relative value',\n      );\n      return;\n    }\n    if (toAbsolute === '') {\n      this.props.showAlert(\n        'To absolute should be T (absolute value) or F (relative value',\n      );\n      return;\n    }\n    const parsedLiquidateYN = makeBooleanFromYesNo(\n      this.state.LIQUIDATE_FOR_CASH,\n    );\n    if (!parsedLiquidateYN.checksOK) {\n      this.props.showAlert(\n        \"Whether we're keeping cash afloat should be 'y' or 'n'\",\n      );\n      return;\n    }\n    if (parsedLiquidateYN.value && this.state.TO !== CASH_ASSET_NAME) {\n      this.props.showAlert(\n        \"If we're liquidating assets to keep cash afloat, the TO asset should be CASH\",\n      );\n      return;\n    }\n\n    let type = custom;\n    let transactionName = this.state.NAME;\n    if (parsedLiquidateYN.value) {\n      type = liquidateAsset;\n      transactionName = `${conditional}${this.state.NAME}`;\n    }\n\n    const transaction: Transaction = {\n      NAME: transactionName,\n      CATEGORY: this.state.CATEGORY,\n      FROM: this.state.FROM,\n      FROM_ABSOLUTE: makeBooleanFromString(fromAbsolute),\n      FROM_VALUE: fromValue,\n      TO: this.state.TO,\n      TO_ABSOLUTE: makeBooleanFromString(toAbsolute),\n      TO_VALUE: toValue,\n      DATE: this.state.DATE,\n      STOP_DATE: this.state.STOP_DATE,\n      RECURRENCE: this.state.RECURRENCE,\n      TYPE: type,\n    };\n    // log('adding something ' + showObj(transaction));\n    const message = this.props.checkFunction(transaction, this.props.model);\n    if (message.length > 0) {\n      this.props.showAlert(message);\n    } else {\n      await this.props.submitFunction(transaction, this.props.model);\n      this.props.showAlert('added new transaction');\n      // clear fields\n      this.setState(this.defaultState);\n      this.resetSelect(this.transactionFromSelectID);\n      this.resetSelect(this.transactionToSelectID);\n    }\n  }\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteFunction(this.state.NAME)) {\n      this.props.showAlert('deleted transaction');\n      // clear fields\n      this.setState(this.defaultState);\n      this.resetSelect(this.transactionFromSelectID);\n      this.resetSelect(this.transactionToSelectID);\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n}\n","import React from 'react';\n\nimport assetsGraph from './sampleAssetGraph.png';\nimport expensesGraph from './sampleExpenseGraph.png';\nimport taxGraph from './sampleTaxGraph.png';\n\nexport function screenshotsDiv() {\n  return (\n    <>\n      <h3>Get a handle on your planned expenses</h3>\n      <img\n        src={expensesGraph}\n        alt=\"Sample expense graph screenshot\"\n        width={500}\n        height={300}\n      ></img>\n      <br />\n      <br />\n      <h3>See the prospects for your future financial health</h3>\n      <img\n        src={assetsGraph}\n        alt=\"Sample asset graph screenshot\"\n        width={500}\n        height={300}\n      ></img>\n      <br />\n      <br />\n      <h3>Check on your predicted tax payments</h3>\n      <img\n        src={taxGraph}\n        alt=\"Sample tax graph screenshot\"\n        width={500}\n        height={300}\n      ></img>\n    </>\n  );\n}\n","import React from 'react';\nimport { makeButton } from './reactComponents/Button';\nimport { screenshotsDiv } from './screenshotsPage';\nimport { Navbar } from 'react-bootstrap';\nimport { toggle } from '../App';\nimport { homeView } from '../localization/stringConstants';\n\nimport FinKittyCat from './cat.png';\nimport WaitGif from './catWait.gif';\nimport { log, printDebug } from '../utils';\n\nexport function navbarContent(isWaiting: boolean, rhContent: () => any) {\n  if (printDebug()) {\n    log(`drawing navbar content`);\n  }\n  log(`drawing navbar content; isWaiting = ${isWaiting}`);\n  return (\n    <Navbar expand=\"lg\" bg=\"light\" sticky=\"top\">\n      <Navbar.Brand href=\"#home\" id=\"finkitty-brand\">\n        <img\n          src={isWaiting ? WaitGif : FinKittyCat}\n          alt=\"FinKitty cat\"\n          width={70}\n          height={'auto'}\n          onClick={() => {\n            toggle(\n              homeView,\n              6, //call\n            );\n          }}\n          id=\"btn-Home\"\n        ></img>\n      </Navbar.Brand>\n      {rhContent()}\n    </Navbar>\n  );\n}\n\nexport function loginPage(loginWithRedirect: any, loginForTesting: any) {\n  return (\n    <>\n      {navbarContent(\n        false, // is not waiting\n        () => {\n          return <h3>An app for financial kitty forecasting</h3>;\n        },\n      )}\n      <div className=\"row\">\n        <div className=\"col-sm mb-4\">\n          <div className=\"alert alert-block\">\n            <h2>Get started</h2> To begin using this app, log in or use a shared\n            playpen\n            <br />\n            {makeButton(\n              'Login or create an account',\n              loginWithRedirect,\n              'buttonLogin',\n              'buttonLogin',\n              'outline-secondary',\n            )}\n            {makeButton(\n              'Shared playpen (no login)',\n              loginForTesting,\n              'buttonTestLogin',\n              'buttonTestLogin',\n              'outline-secondary',\n            )}\n          </div>\n          <div className=\"alert alert-block\">\n            <strong>How it works</strong> Build one or more models. Each tracks\n            the financial progress of one possible world, based on information\n            you provide for that model, about expenses, incomes, assets and\n            transactions. You can log out and come back another time and your\n            models will still be available for you to explore. For each model,\n            an overview page can be printed to PDF as a take-away customisable\n            report, which can include all the data you have provided to build up\n            the model.\n          </div>\n          <div className=\"alert alert-block\">\n            <strong>Data security</strong> Access to the app is controlled by\n            user authentication. Web communication uses secure HTTPS protocols\n            and model data is encypted using industry-standard algorithms before\n            it is stored in a database on the cloud. You can extract all your\n            data in readable JSON text format if you choose to delete your data\n            from this system. For the moment, the database and server are build\n            without additional levels of health checks and full resilience. If\n            you need guaranteed access to your data, a backup download of the\n            JSON data and a record of the PDF overview are advised.\n          </div>\n          <div className=\"alert alert-block\">\n            <strong>Modeling tax</strong> Income tax is calculated according to\n            UK tax regulations as at December 2019. Capital Gains tax is\n            implemented as a somewhat simplified version of the real thing in UK\n            as at December 2019. Whilst FinKitty accounts for tax relief on\n            pension contributions it does not cover any tax penalties incurred\n            for breaching the Annual Pension Allowance. For most people, this\n            allowance is £40,000pa, but it is reduced for high earners: always\n            seek independent financial advice. Assuming ongoing development,\n            future versions of the app will calculate incomes and gains to be\n            taxed according to the rules applicable at the time the income or\n            gain was made.\n          </div>\n          <div className=\"alert alert-block\">\n            <strong>Modeling assumptions</strong> In addition to the data you\n            enter for modeling incomes, expenses, assets and transactions, you\n            can provide a value for CPI to influence how values change over\n            time. Future tax regime is assumed to be the latest known one. Any\n            irregular losses such as stock market crashes or unexpected gains\n            and windfalls can be input as part of a model but unless they are\n            added, the future is assumed to progress smoothly (and\n            unrealistically) in a predictable and continuous fashion.\n          </div>\n          <div className=\"alert alert-block\">\n            <strong>Small print!</strong> This web app should not be used to\n            make important financial decisions without also getting independent\n            advice from a qualified&nbsp;\n            <a href=\"https://www.fca.org.uk/consumers/finding-adviser\">\n              &nbsp;independent financial advisor{' '}\n            </a>{' '}\n            to validate financial plans.\n          </div>\n        </div>\n        <div className=\"col-md mb-4\">{screenshotsDiv()}</div>\n      </div>\n    </>\n  );\n}\n","import { ChartData, ModelData } from '../types/interfaces';\nimport {\n  assetsDivWithHeadings,\n  debtsDivWithHeadings,\n  expensesTableDivWithHeading,\n  incomesTableDivWithHeading,\n  settingsTableDiv,\n  transactionFilteredTable,\n  transactionsForTable,\n  transactionsTableDiv,\n  triggersTableDivWithHeading,\n} from './tablePages';\nimport {\n  assetsOrDebtsChartDiv,\n  coarseFineList,\n  expensesChartDiv,\n  frequencyList,\n  getSmallerChartSettings,\n  incomesChartDiv,\n  taxChartDiv,\n} from './chartPages';\nimport {\n  autogen,\n  custom,\n  overview,\n  revalueExp,\n  revalueInc,\n} from '../localization/stringConstants';\n\nimport { AddDeleteEntryForm } from './reactComponents/AddDeleteEntryForm';\nimport React from 'react';\nimport { ViewSettings } from '../models/charting';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { log, printDebug } from '../utils';\nimport { getDisplay } from '../App';\n\nfunction suppressLegend(barData: ChartData) {\n  return {\n    ...barData,\n    displayLegend: false,\n  };\n}\nfunction chartsForOverview(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  assetChartData: ChartData,\n  debtChartData: ChartData,\n  expensesChartData: ChartData,\n  incomesChartData: ChartData,\n  taxChartData: ChartData,\n  getStartDate: () => string,\n  updateStartDate: (newDate: string) => Promise<void>,\n  getEndDate: () => string,\n  updateEndDate: (newDate: string) => Promise<void>,\n) {\n  return (\n    <Container>\n      <Row>\n        <Col>\n          {incomesChartDiv(\n            suppressLegend(incomesChartData),\n            getSmallerChartSettings(viewSettings, model.settings, 'Incomes'),\n            viewSettings,\n          )}\n        </Col>\n        <Col>\n          {expensesChartDiv(\n            suppressLegend(expensesChartData),\n            getSmallerChartSettings(viewSettings, model.settings, 'Expenses'),\n            viewSettings,\n          )}\n        </Col>\n        <Col>\n          {assetsOrDebtsChartDiv(\n            suppressLegend(assetChartData),\n            false,\n            getSmallerChartSettings(viewSettings, model.settings, 'Assets'),\n            viewSettings,\n          )}\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          {taxChartDiv(\n            suppressLegend(taxChartData),\n            getSmallerChartSettings(viewSettings, model.settings, 'Tax'),\n            viewSettings,\n          )}\n        </Col>\n        <Col>\n          {assetsOrDebtsChartDiv(\n            suppressLegend(debtChartData),\n            true,\n            getSmallerChartSettings(viewSettings, model.settings, 'Debts'),\n            viewSettings,\n          )}\n        </Col>\n        <Col>\n          <AddDeleteEntryForm\n            name=\"view start date\"\n            getValue={getStartDate}\n            submitFunction={updateStartDate}\n            showAlert={showAlert}\n          />\n          <AddDeleteEntryForm\n            name=\"view end date\"\n            getValue={getEndDate}\n            submitFunction={updateEndDate}\n            showAlert={showAlert}\n          />\n          {coarseFineList(viewSettings)}\n          {frequencyList(viewSettings)}\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nfunction transactionsOverviewDiv(\n  model: ModelData,\n  showAlert: (arg0: string) => void,\n) {\n  const customContents = transactionsForTable(model, custom);\n  const autogenContents = transactionsForTable(model, autogen);\n  if (customContents.length === 0 && autogenContents.length === 0) {\n    return;\n  }\n  return (\n    <>\n      {transactionsTableDiv(\n        customContents,\n        model,\n        showAlert,\n        'Custom transactions',\n        'Custom transactions',\n      )}\n      {transactionsTableDiv(\n        autogenContents,\n        model,\n        showAlert,\n        'Auto-generated transactions',\n        'Auto-generated transactions',\n      )}\n    </>\n  );\n}\n\nexport function overviewDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  assetChartData: ChartData,\n  debtChartData: ChartData,\n  expensesChartData: ChartData,\n  incomesChartData: ChartData,\n  taxChartData: ChartData,\n  getStartDate: () => string,\n  updateStartDate: (newDate: string) => Promise<void>,\n  getEndDate: () => string,\n  updateEndDate: (newDate: string) => Promise<void>,\n) {\n  if (printDebug()) {\n    log(`called overviewDiv with a model with ${model.assets.length} assets`);\n  }\n  if (!getDisplay(overview)) {\n    // log(`don't populate overview`);\n    return;\n  }\n  // log(`do populate overview`);\n\n  const chartDataExists =\n    incomesChartData.labels.length !== 0 ||\n    assetChartData.labels.length !== 0 ||\n    expensesChartData.labels.length !== 0 ||\n    taxChartData.labels.length !== 0 ||\n    debtChartData.labels.length !== 0;\n\n  return (\n    <div className=\"ml-3\">\n      {chartDataExists ? (\n        chartsForOverview(\n          model,\n          viewSettings,\n          showAlert,\n          assetChartData,\n          debtChartData,\n          expensesChartData,\n          incomesChartData,\n          taxChartData,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        )\n      ) : (\n        <></>\n      )}\n      <div className={chartDataExists ? 'scrollClass resizeClass' : ''}>\n        <br />\n        {triggersTableDivWithHeading(model, showAlert)}\n        {incomesTableDivWithHeading(model, showAlert)}\n        {transactionFilteredTable(\n          model,\n          showAlert,\n          revalueInc,\n          'Income revaluations',\n        )}\n        {expensesTableDivWithHeading(model, showAlert)}\n        {transactionFilteredTable(\n          model,\n          showAlert,\n          revalueExp,\n          'Expense revaluations',\n        )}\n        {assetsDivWithHeadings(model, showAlert)}\n        {debtsDivWithHeadings(model, showAlert)}\n        {transactionsOverviewDiv(model, showAlert)}\n        {settingsTableDiv(model, viewSettings, showAlert)}\n      </div>\n    </div>\n  );\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport {\n  checkIncomeLiability,\n  isNumberString,\n  isValidValue,\n} from '../../models/checks';\nimport {\n  Income,\n  ModelData,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport {\n  pensionDB,\n  incomeTax,\n  pension,\n  pensionSS,\n  separator,\n  pensionTransfer,\n  autogen,\n  revalue,\n  revalueInc,\n} from '../../localization/stringConstants';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport { isAnIncome, isATransaction } from '../../models/modelUtils';\nimport {\n  makeValueAbsPropFromString,\n  checkTriggerDate,\n  makeGrowthFromString,\n  makeBooleanFromYesNo,\n  makeIncomeLiabilityFromNameAndNI,\n} from '../../stringUtils';\n\ninterface EditIncomeFormState {\n  NAME: string;\n  VALUE: string;\n  VALUE_SET: string;\n  START: string;\n  END: string;\n  GROWTH: string;\n  GROWS_WITH_CPI: string;\n  LIABILITY: string;\n  CATEGORY: string;\n  inputting: string;\n  DB_INCOME_SOURCE: string;\n  DB_CONTRIBUTION_AMOUNT: string;\n  DB_ACCRUAL: string;\n  DB_SS: string;\n  DB_STOP_SOURCE: string;\n  DB_START: string;\n  DB_END: string;\n  DB_TRANSFER_TO: string;\n  DB_TRANSFER_PROPORTION: string;\n  DB_TRANSFERRED_STOP: string;\n}\n\nconst inputtingRevalue = 'revalue';\nconst inputtingIncome = 'income';\nconst inputtingPension = 'definedBenefitsPension';\n\ninterface EditIncomeProps extends FormProps {\n  checkIncomeFunction: (i: Income, model: ModelData) => string;\n  checkTransactionFunction: (t: Transaction, model: ModelData) => string;\n  submitIncomeFunction: (\n    incomeInput: Income,\n    modelData: ModelData,\n  ) => Promise<boolean>;\n  submitTransactionFunction: (\n    transactionInput: Transaction,\n    modelData: ModelData,\n  ) => Promise<void>;\n  deleteFunction: (name: string) => Promise<boolean>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\n\nexport function incomeOptions(model: ModelData, handleChange: any, id: string) {\n  const optionData = model.incomes.map(income => {\n    return {\n      text: income.NAME,\n      action: (e: FormEvent<Element>) => {\n        // log(`detected action`);\n        // e.persist();\n        e.preventDefault();\n        handleChange(income.NAME);\n      },\n    };\n  });\n\n  const options = optionData.map(bd => (\n    <option\n      value={bd.text}\n      id={`option-income-${bd.text}`}\n      key={bd.text}\n      className=\"text-muted\"\n    >\n      {bd.text}\n    </option>\n  ));\n  return (\n    <select\n      className=\"custom-select\"\n      id={id}\n      onChange={e => {\n        const found = optionData.find(od => {\n          return od.text === e.target.value;\n        });\n        if (found !== undefined) {\n          found.action(e);\n        }\n      }}\n    >\n      <option>Choose an income</option>\n      {options}\n    </select>\n  );\n}\n\nexport class AddDeleteIncomeForm extends Component<\n  EditIncomeProps,\n  EditIncomeFormState\n> {\n  public defaultState: EditIncomeFormState;\n\n  private incomeSourceSelectID = 'fromIncomeSelectIncomeForm';\n\n  public constructor(props: EditIncomeProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteIncomeForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      VALUE: '',\n      VALUE_SET: '',\n      START: '',\n      END: '',\n      GROWTH: '',\n      GROWS_WITH_CPI: '',\n      LIABILITY: '',\n      CATEGORY: '',\n      inputting: inputtingIncome,\n      DB_INCOME_SOURCE: '',\n      DB_CONTRIBUTION_AMOUNT: '',\n      DB_ACCRUAL: '',\n      DB_SS: '',\n      DB_STOP_SOURCE: '',\n      DB_START: '',\n      DB_END: '',\n      DB_TRANSFER_TO: '',\n      DB_TRANSFER_PROPORTION: '',\n      DB_TRANSFERRED_STOP: '',\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleGrowthChange = this.handleGrowthChange.bind(this);\n    this.handleGrowsWithCPIChange = this.handleGrowsWithCPIChange.bind(this);\n    this.handleLiabilityChange = this.handleLiabilityChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.revalue = this.revalue.bind(this);\n\n    this.handleDbpIncomeSourceChange = this.handleDbpIncomeSourceChange.bind(\n      this,\n    );\n    this.handleDbpSsChange = this.handleDbpSsChange.bind(this);\n    this.handleDbpAccrualChange = this.handleDbpAccrualChange.bind(this);\n    this.handleDbpTransferTo = this.handleDbpTransferTo.bind(this);\n    this.handleDbpContAmount = this.handleDbpContAmount.bind(this);\n    this.handleDbpTransferProportion = this.handleDbpTransferProportion.bind(\n      this,\n    );\n\n    this.handleValueSetChange = this.handleValueSetChange.bind(this);\n    this.setValueSet = this.setValueSet.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.handleEndChange = this.handleEndChange.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n    this.handleDbpStartChange = this.handleDbpStartChange.bind(this);\n    this.setDbpStart = this.setDbpStart.bind(this);\n    this.handleDbpEndChange = this.handleDbpEndChange.bind(this);\n    this.setDbpEnd = this.setDbpEnd.bind(this);\n    this.handleDbpStopSourceChange = this.handleDbpStopSourceChange.bind(this);\n    this.setDbpStopSource = this.setDbpStopSource.bind(this);\n    this.handleDbpTransferredStopChange = this.handleDbpTransferredStopChange.bind(\n      this,\n    );\n    this.setDbpTransferredStop = this.setDbpTransferredStop.bind(this);\n\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n    this.setInputincome = this.setInputincome.bind(this);\n    this.setInputDBP = this.setInputDBP.bind(this);\n    this.setInputRevalue = this.setInputRevalue.bind(this);\n  }\n\n  public render() {\n    // log('rendering an AddDeleteIncomeForm');\n    return (\n      <>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Add new income mode',\n            this.setInputincome,\n            'useIncomeInputs',\n            'useIncomeInputs',\n            this.state.inputting === inputtingIncome\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Add pension mode',\n            this.setInputDBP,\n            'useDBPInputs',\n            'useDBPInputs',\n            this.state.inputting === inputtingPension\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Revalue income mode',\n            this.setInputRevalue,\n            'useRevalueInputsIncome',\n            'useRevalueInputsIncome',\n            this.state.inputting === inputtingRevalue\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n        </div>\n        <form className=\"container-fluid\" onSubmit={this.add}>\n          <Row>\n            <Col>\n              <Input\n                title={\n                  this.state.inputting === inputtingPension\n                    ? 'Pension name'\n                    : 'Income name'\n                }\n                type=\"text\"\n                name=\"incomename\"\n                value={this.state.NAME}\n                placeholder=\"Enter name\"\n                onChange={this.handleNameChange}\n              />\n            </Col>\n            <Col>\n              <Input\n                title={`${\n                  this.state.inputting === inputtingPension\n                    ? 'Pension'\n                    : this.state.inputting === inputtingIncome\n                    ? 'Income'\n                    : 'New income'\n                } value (amount before tax, per month)`}\n                type=\"text\"\n                name=\"incomevalue\"\n                value={this.state.VALUE}\n                placeholder=\"Enter value\"\n                onChange={this.handleValueChange}\n              />\n            </Col>\n          </Row>\n          <div className=\"container-fluid\">\n            {/* fills width */}\n            <DateSelectionRow\n              introLabel={`${\n                this.state.inputting === inputtingPension\n                  ? \"Date on which the pension's value is set\"\n                  : this.state.inputting === inputtingIncome\n                  ? \"Date on which the new income's value is set\"\n                  : \"Date on which the income's new value is set\"\n              }`}\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setValueSet}\n              inputName=\"income valuation date\"\n              inputValue={this.state.VALUE_SET}\n              onChangeHandler={this.handleValueSetChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n          </div>\n          {this.inputsForGeneralIncome()}\n          {this.inputsForDefinedBenefitsPensionIncome()}\n          {this.growthsEtc()}\n          {this.revalueButton()}\n        </form>\n      </>\n    );\n  }\n  private growthsEtc(): React.ReactNode {\n    if (\n      this.state.inputting !== inputtingIncome &&\n      this.state.inputting !== inputtingPension\n    ) {\n      return;\n    }\n    return (\n      <>\n        <Row>\n          <Col>\n            <Input\n              title=\"Annual growth percentage (excluding inflation, e.g. 2 for 2% p.a.)\"\n              type=\"text\"\n              name=\"incomegrowth\"\n              value={this.state.GROWTH}\n              placeholder=\"Enter growth\"\n              onChange={this.handleGrowthChange}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Does value grow with inflation?\"\n              type=\"text\"\n              name=\"incomecpi-grows\"\n              value={this.state.GROWS_WITH_CPI}\n              placeholder=\"Enter Y/N\"\n              onChange={this.handleGrowsWithCPIChange}\n            />\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"Tax liability (empty or someone's name)\"\n              type=\"text\"\n              name=\"taxable\"\n              value={this.state.LIABILITY}\n              placeholder=\"Enter tax liability\"\n              onChange={this.handleLiabilityChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"incomecategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>{' '}\n        </Row>\n        {makeButton(\n          'Create new income (over-writes any existing with the same name)',\n          this.add,\n          'addIncome',\n          'addIncome',\n          'primary',\n        )}\n      </>\n    );\n  }\n  private revalueButton(): React.ReactNode {\n    if (this.state.inputting !== inputtingRevalue) {\n      return;\n    }\n    return makeButton(\n      'Add income revaluation',\n      this.revalue,\n      'revalueIncome',\n      'revalueIncome',\n      'primary',\n    );\n  }\n  private inputsForGeneralIncome(): React.ReactNode {\n    return (\n      <div\n        style={{\n          display: this.state.inputting === inputtingIncome ? 'block' : 'none',\n        }}\n      >\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel=\"Date on which the income starts\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setStart}\n            inputName=\"income start date\"\n            inputValue={this.state.START}\n            onChangeHandler={this.handleStartChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n          <DateSelectionRow\n            introLabel=\"Date on which the income ends\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setEnd}\n            inputName=\"income end date\"\n            inputValue={this.state.END}\n            onChangeHandler={this.handleEndChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  private inputsForDefinedBenefitsPensionIncome(): React.ReactNode {\n    return (\n      <div\n        style={{\n          display: this.state.inputting === inputtingPension ? 'block' : 'none',\n        }}\n      >\n        {/*\n * name of pension\n * contribution from which income - ???\nDB_INCOME_SOURCE\n * contribution amount = £ or %\nDB_CONTRIBUTION_AMOUNT\n * annual accrual rate is a fraction (of annual income amount)\nDB_ACCRUAL\n * whether it's salary sacrifice\nDB_SS\n * contribution stop date \nDB_STOP_SOURCE\n * growth rate\nDB_GROWTH, DB_CPI_IMMUNE\n * value - given all payments up to date value set - done\nVALUE\nhandleDbpValueChange\n * date value set - expected to be \"now\" or start of model - done\nVALUE_SET\n * standard date of pension start  - done\nDB_START\n * when to stop paying (someone dies)\nDB_END\n * who to transfer to\nDB_TRANSFER_TO\n - how much to transfer\nDB_TRANSFER_PROPORTION\n - when to stop paying second person (someone dies)\nDB_TRANSFERRED_STOP\n        */}\n\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel=\"Date on which contributions end (optional)\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setDbpStopSource}\n            inputName=\"end date\"\n            inputValue={this.state.DB_STOP_SOURCE}\n            onChangeHandler={this.handleDbpStopSourceChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n          <DateSelectionRow\n            introLabel=\"Date on which the pension starts\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setDbpStart}\n            inputName=\"pension start date\"\n            inputValue={this.state.DB_START}\n            onChangeHandler={this.handleDbpStartChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n          <DateSelectionRow\n            introLabel=\"Date on which the pension ends\" ///transfers\"\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setDbpEnd}\n            inputName=\"pension end/transfer date\"\n            inputValue={this.state.DB_END}\n            onChangeHandler={this.handleDbpEndChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n          {\n            <DateSelectionRow\n              introLabel=\"Date on which transferred pension stops (optional)\"\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setDbpTransferredStop}\n              inputName=\"transferred stop date\"\n              inputValue={this.state.DB_TRANSFERRED_STOP}\n              onChangeHandler={this.handleDbpTransferredStopChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n          }\n        </div>\n        <Row>\n          <Col>\n            <label>Income source (optional)</label>\n            {incomeOptions(\n              this.props.model,\n              this.handleDbpIncomeSourceChange,\n              this.incomeSourceSelectID,\n            )}\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Is contribution salary-sacrificed (optional)\"\n              type=\"text\"\n              name=\"contributionSSIncome\"\n              value={this.state.DB_SS}\n              placeholder=\"Enter Y/N\"\n              onChange={this.handleDbpSsChange}\n            />\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"Pension contribution amount (e.g. 0.05 for 5%, optional)\"\n              type=\"text\"\n              name=\"contributionAmountPensionIncome\"\n              value={this.state.DB_CONTRIBUTION_AMOUNT}\n              placeholder=\"Enter amount of contributions\"\n              onChange={this.handleDbpContAmount}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Contribution accrual to annual benefit (e.g. 0.02 for 1/50, optional)\"\n              type=\"text\"\n              name=\"incomeaccrual\"\n              value={this.state.DB_ACCRUAL}\n              placeholder=\"Enter accrual rate\"\n              onChange={this.handleDbpAccrualChange}\n            />\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"On death, pension transfers to (optional)\"\n              type=\"text\"\n              name=\"transferNameIncome\"\n              value={this.state.DB_TRANSFER_TO}\n              placeholder=\"Enter person to transfer to\"\n              onChange={this.handleDbpTransferTo}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Proportion transferred on death (e.g. 0.5 for 50%, optional)\"\n              type=\"text\"\n              name=\"transferProportion\"\n              value={this.state.DB_TRANSFER_PROPORTION}\n              placeholder=\"Enter transfer proportion\"\n              onChange={this.handleDbpTransferProportion}\n            />\n          </Col>{' '}\n        </Row>\n      </div>\n    );\n  }\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ NAME: e.target.value });\n  }\n  private handleGrowthChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ GROWTH: e.target.value });\n  }\n  private handleCategoryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ CATEGORY: e.target.value });\n  }\n  private handleLiabilityChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ LIABILITY: e.target.value });\n  }\n  private handleGrowsWithCPIChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ GROWS_WITH_CPI: e.target.value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ VALUE: e.target.value });\n  }\n  private handleDbpIncomeSourceChange(value: string) {\n    this.setState({ DB_INCOME_SOURCE: value });\n  }\n  private handleDbpSsChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DB_SS: e.target.value });\n  }\n  private handleDbpAccrualChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DB_ACCRUAL: e.target.value });\n  }\n  private handleDbpTransferProportion(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DB_TRANSFER_PROPORTION: e.target.value });\n  }\n\n  private setDbpStopSource(value: string) {\n    this.setState({ DB_STOP_SOURCE: value });\n  }\n  private handleDbpStopSourceChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setDbpStopSource(e.target.value);\n  }\n  private handleDbpTransferTo(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DB_TRANSFER_TO: e.target.value });\n  }\n  private handleDbpContAmount(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DB_CONTRIBUTION_AMOUNT: e.target.value });\n  }\n  private setDbpTransferredStop(value: string) {\n    this.setState({ DB_TRANSFERRED_STOP: value });\n  }\n  private handleDbpTransferredStopChange(\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) {\n    this.setDbpTransferredStop(e.target.value);\n  }\n\n  private setDbpEnd(value: string) {\n    this.setState({ DB_END: value });\n  }\n  private handleDbpEndChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setDbpEnd(e.target.value);\n  }\n\n  private setValueSet(value: string): void {\n    this.setState({ VALUE_SET: value });\n  }\n  private handleValueSetChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.setValueSet(e.target.value);\n  }\n\n  private setDbpStart(value: string): void {\n    this.setState({ DB_START: value });\n  }\n  private handleDbpStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setDbpStart(value);\n  }\n\n  private setStart(value: string): void {\n    this.setState({ START: value });\n  }\n  private handleStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStart(value);\n  }\n\n  private setEnd(value: string): void {\n    this.setState({ END: value });\n  }\n  private handleEndChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    this.setEnd(e.target.value);\n  }\n  private resetSelect(id: string) {\n    const selector: any = document.getElementById(id);\n    if (selector !== null) {\n      selector.selectedIndex = '0';\n    }\n  }\n  private async revalue(e: React.MouseEvent<HTMLButtonElement>): Promise<void> {\n    e.preventDefault();\n\n    if (!isAnIncome(this.state.NAME, this.props.model)) {\n      this.props.showAlert(\n        `Income name ${this.state.NAME} should be an existing income`,\n      );\n      return;\n    }\n\n    const parseVal = makeValueAbsPropFromString(this.state.VALUE);\n    if (!parseVal.checksOK) {\n      this.props.showAlert(\n        `Income value ${this.state.VALUE} should be a numerical or % value`,\n      );\n      return;\n    }\n    const date = checkTriggerDate(\n      this.state.VALUE_SET,\n      this.props.model.triggers,\n    );\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n    let count = 1;\n    while (\n      isATransaction(`${revalue} ${this.state.NAME} ${count}`, this.props.model)\n    ) {\n      count += 1;\n    }\n\n    const revalueIncomeTransaction: Transaction = {\n      NAME: `${revalue} ${this.state.NAME} ${count}`,\n      FROM: '',\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.0',\n      TO: this.state.NAME,\n      TO_ABSOLUTE: parseVal.absolute,\n      TO_VALUE: parseVal.value,\n      DATE: this.state.VALUE_SET, // match the income start date\n      TYPE: revalueInc,\n      RECURRENCE: '',\n      STOP_DATE: '',\n      CATEGORY: '',\n    };\n    const message = await this.props.checkTransactionFunction(\n      revalueIncomeTransaction,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n      return;\n    }\n    await this.props.submitTransactionFunction(\n      revalueIncomeTransaction,\n      this.props.model,\n    );\n\n    this.props.showAlert('added new data');\n    // clear fields\n    this.setState(this.defaultState);\n    this.resetSelect(this.incomeSourceSelectID);\n    return;\n  }\n\n  private async add(e: FormEvent<Element>): Promise<void> {\n    e.preventDefault();\n\n    log(`in income form's add function`);\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Income name should be non-empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.incomes.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        this.props.showAlert(\n          `There's already an income called ${this.state.NAME}`,\n        );\n        return;\n      }\n    }\n\n    const isNotValid = !isValidValue(this.state.VALUE, this.props.model);\n    if (isNotValid) {\n      this.props.showAlert(\n        `Income value ${this.state.VALUE} should be numerical or built from an Asset or setting`,\n      );\n      return;\n    }\n    let date = checkTriggerDate(\n      this.state.VALUE_SET,\n      this.props.model.triggers,\n    );\n    let isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n    const parsedGrowth = makeGrowthFromString(\n      this.state.GROWTH,\n      this.props.model.settings,\n    );\n    if (!parsedGrowth.checksOK) {\n      this.props.showAlert(\n        `Growth value '${this.state.GROWTH}' should be a numerical value`,\n      );\n      return;\n    }\n    const parseYNGrowsWithCPI = makeBooleanFromYesNo(this.state.GROWS_WITH_CPI);\n    if (!parseYNGrowsWithCPI.checksOK) {\n      this.props.showAlert(\n        `Grows with inflation '${this.state.GROWS_WITH_CPI}' should be a Y/N value`,\n      );\n      return;\n    }\n\n    if (this.state.inputting === inputtingPension) {\n      // do work to\n      // (a) check integrity of inputs\n      // (b) build an income for the pension, check integrity of income\n      // (c) build an income for the transferred pension, check integrity of income\n      // (d) build a transaction for the contributions to the income, check integrity of transaction\n      // (e) build a transaction for the accrual of the benefit, check integrity of transaction\n      // (f) submit income\n      // (g) submit transactions\n      // (h) reset to defaults\n\n      const parseYNDBSS = makeBooleanFromYesNo(this.state.DB_SS);\n      if (this.state.DB_INCOME_SOURCE !== '') {\n        if (!parseYNDBSS.checksOK) {\n          this.props.showAlert(\n            `Salary sacrifice '${this.state.DB_SS}' should be a Y/N value`,\n          );\n          return;\n        } else {\n          // log(`parseYNDBSS = ${showObj(parseYNDBSS)}`);\n        }\n\n        let isNotANumber = !isNumberString(this.state.DB_CONTRIBUTION_AMOUNT);\n        if (isNotANumber) {\n          this.props.showAlert(\n            `Contribution amount '${this.state.DB_CONTRIBUTION_AMOUNT}' should be a numerical value`,\n          );\n          return;\n        }\n\n        isNotANumber = !isNumberString(this.state.DB_ACCRUAL);\n        if (isNotANumber) {\n          this.props.showAlert(\n            `Accrual value '${this.state.DB_ACCRUAL}' should be a numerical value`,\n          );\n          return;\n        }\n      } else {\n        let isNotANumber = !isNumberString(this.state.DB_CONTRIBUTION_AMOUNT);\n        if (!isNotANumber) {\n          this.props.showAlert(\n            `Contribution amount '${this.state.DB_CONTRIBUTION_AMOUNT}' from no income?`,\n          );\n          return;\n        }\n\n        isNotANumber = !isNumberString(this.state.DB_ACCRUAL);\n        if (!isNotANumber) {\n          this.props.showAlert(\n            `Accrual value '${this.state.DB_ACCRUAL}' from no income?`,\n          );\n          return;\n        }\n      }\n      const inputLiability = makeIncomeLiabilityFromNameAndNI(\n        this.state.LIABILITY,\n        false, // no NI payable\n      );\n      let liabilityMessage = checkIncomeLiability(inputLiability);\n      if (liabilityMessage !== '') {\n        this.props.showAlert(liabilityMessage);\n        return;\n      }\n\n      const sourceIncome = this.props.model.incomes.find(i => {\n        return i.NAME === this.state.DB_INCOME_SOURCE;\n      });\n      if (sourceIncome === undefined && this.state.DB_INCOME_SOURCE !== '') {\n        this.props.showAlert(\n          `${this.state.DB_INCOME_SOURCE} not recognised as an income`,\n        );\n        return;\n      } else if (sourceIncome) {\n        const liabilities = sourceIncome.LIABILITY;\n        if (liabilities.length === 0) {\n          this.props.showAlert(\n            `Source income '${sourceIncome.NAME}' should pay income tax`,\n          );\n          return;\n        }\n        const words = liabilities.split(separator);\n        const incomeTaxWord = words.find(w => {\n          return w.endsWith(incomeTax);\n        });\n        if (incomeTaxWord === undefined) {\n          this.props.showAlert(\n            `Source income '${sourceIncome.NAME}' should have an income tax liability`,\n          );\n          return;\n        } else {\n          // insist incomeTaxWord matches inputLiability\n          if (incomeTaxWord !== inputLiability) {\n            log(`${incomeTaxWord} !== ${inputLiability}`);\n            this.props.showAlert(\n              `Source income '${sourceIncome.NAME}' should have income tax liability ${inputLiability}`,\n            );\n            return;\n          }\n        }\n      }\n      let builtLiability2: string | undefined;\n      if (this.state.DB_TRANSFER_TO !== '') {\n        const isNotANumber = !isNumberString(this.state.DB_TRANSFER_PROPORTION);\n        if (isNotANumber) {\n          this.props.showAlert(\n            `Transfer proportion ${this.state.DB_TRANSFER_PROPORTION} should be a numerical value`,\n          );\n          return;\n        }\n        builtLiability2 = makeIncomeLiabilityFromNameAndNI(\n          this.state.DB_TRANSFER_TO,\n          false, // no NI payable\n        );\n        liabilityMessage = checkIncomeLiability(builtLiability2);\n        if (liabilityMessage !== '') {\n          this.props.showAlert(liabilityMessage);\n          return;\n        }\n      }\n      const newIncomeName1 = pensionDB + this.state.NAME;\n      const pensionDbpIncome1: Income = {\n        START: this.state.DB_START,\n        END: this.state.DB_END,\n        NAME: newIncomeName1,\n        VALUE: this.state.VALUE,\n        VALUE_SET: this.state.VALUE_SET,\n        LIABILITY: inputLiability,\n        GROWTH: parsedGrowth.value,\n        CPI_IMMUNE: !parseYNGrowsWithCPI.value,\n        CATEGORY: this.state.CATEGORY,\n      };\n      let message = await this.props.checkIncomeFunction(\n        pensionDbpIncome1,\n        this.props.model,\n      );\n      if (message.length > 0) {\n        this.props.showAlert(message);\n        return;\n      }\n      let pensionDbpIncome2: Income | undefined;\n      let newIncomeName2: string | undefined;\n      if (this.state.DB_TRANSFER_TO !== '' && builtLiability2 !== undefined) {\n        newIncomeName2 = pensionTransfer + this.state.NAME;\n        pensionDbpIncome2 = {\n          START: this.state.DB_START,\n          END: this.state.DB_TRANSFERRED_STOP,\n          NAME: newIncomeName2,\n          VALUE: '0.0',\n          VALUE_SET: this.state.VALUE_SET,\n          LIABILITY: builtLiability2,\n          GROWTH: parsedGrowth.value,\n          CPI_IMMUNE: !parseYNGrowsWithCPI.value,\n          CATEGORY: this.state.CATEGORY,\n        };\n        const message = await this.props.checkIncomeFunction(\n          pensionDbpIncome2,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          this.props.showAlert(message);\n          return;\n        }\n      }\n\n      await this.props.submitIncomeFunction(\n        pensionDbpIncome1,\n        this.props.model,\n      );\n      if (pensionDbpIncome2) {\n        await this.props.submitIncomeFunction(\n          pensionDbpIncome2,\n          this.props.model,\n        );\n      }\n      let pensionDbptran1: Transaction | undefined;\n      let pensionDbptran2: Transaction | undefined;\n      if (this.state.DB_INCOME_SOURCE !== '') {\n        pensionDbptran1 = {\n          NAME: (parseYNDBSS.value ? pensionSS : pension) + this.state.NAME,\n          FROM: this.state.DB_INCOME_SOURCE,\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: this.state.DB_CONTRIBUTION_AMOUNT,\n          TO: '',\n          TO_ABSOLUTE: false,\n          TO_VALUE: '0.0',\n          DATE: this.state.VALUE_SET, // match the income start date\n          STOP_DATE: this.state.DB_STOP_SOURCE, // match the income stop date\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n        };\n        message = await this.props.checkTransactionFunction(\n          pensionDbptran1,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          //log(`bad transaction1 ${showObj(pensionDbptran1)}`);\n          this.props.showAlert(message);\n          await this.props.deleteFunction(pensionDbpIncome1.NAME);\n          if (pensionDbpIncome2) {\n            await this.props.deleteFunction(pensionDbpIncome2.NAME);\n          }\n          return;\n        }\n        // log(`this.state.DB_ACCRUAL = ${this.state.DB_ACCRUAL}`);\n        const monthlyAccrualValue = `${parseFloat(this.state.DB_ACCRUAL) /\n          12.0}`;\n        // Why divide by 12 here?\n        // the accrual rate adds, say, 1/49th of an income to the\n        // annual pension benefit.\n        // If w3e earn money each month, or each week, it's still 1/49th\n        // of that income.\n        // But if we are tracking a future _monthly_ pension benefit,\n        // we should only add 1/49th /12 otherwise our pension will be\n        // very large from not many contributions!\n\n        // log(`monthlyAccrualValue = ${monthlyAccrualValue}`);\n        pensionDbptran2 = {\n          NAME: newIncomeName1, // kicks in when we see income java\n          FROM: this.state.DB_INCOME_SOURCE,\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: monthlyAccrualValue, // percentage of income offered up to pension\n          TO: newIncomeName1,\n          TO_ABSOLUTE: false,\n          TO_VALUE: '1.0',\n          DATE: this.state.VALUE_SET, // match the income start date\n          STOP_DATE: this.state.DB_STOP_SOURCE, // match the income stop date\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n        };\n        message = await this.props.checkTransactionFunction(\n          pensionDbptran2,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          //log(`bad transaction2 ${showObj(pensionDbptran2)}`);\n          this.props.showAlert(message);\n          await this.props.deleteFunction(pensionDbpIncome1.NAME);\n          if (pensionDbpIncome2) {\n            await this.props.deleteFunction(pensionDbpIncome2.NAME);\n          }\n          return;\n        }\n      }\n      let pensionDbptran3: Transaction | undefined;\n      if (this.state.DB_TRANSFER_TO !== '' && newIncomeName2) {\n        pensionDbptran3 = {\n          NAME: newIncomeName2,\n          FROM: newIncomeName1,\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: '1.0',\n          TO: newIncomeName2,\n          TO_ABSOLUTE: false,\n          TO_VALUE: this.state.DB_TRANSFER_PROPORTION,\n          DATE: this.state.DB_END,\n          STOP_DATE: this.state.DB_TRANSFERRED_STOP,\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n        };\n        message = await this.props.checkTransactionFunction(\n          pensionDbptran3,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          //log(`bad transaction3 ${showObj(pensionDbptran3)}`);\n          this.props.showAlert(message);\n          await this.props.deleteFunction(pensionDbpIncome1.NAME);\n          if (pensionDbpIncome2) {\n            await this.props.deleteFunction(pensionDbpIncome2.NAME);\n          }\n          return;\n        }\n      }\n\n      if (pensionDbptran1) {\n        await this.props.submitTransactionFunction(\n          pensionDbptran1,\n          this.props.model,\n        );\n      }\n      if (pensionDbptran2) {\n        await this.props.submitTransactionFunction(\n          pensionDbptran2,\n          this.props.model,\n        );\n      }\n      if (pensionDbptran3) {\n        await this.props.submitTransactionFunction(\n          pensionDbptran3,\n          this.props.model,\n        );\n      }\n\n      this.props.showAlert('added new data');\n      // clear fields\n      this.setState(this.defaultState);\n      this.resetSelect(this.incomeSourceSelectID);\n      return;\n    }\n\n    date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Start date '${this.state.START}' should be a date`);\n      return;\n    }\n    date = checkTriggerDate(this.state.END, this.props.model.triggers);\n    isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`End date '${this.state.END}' should be a date`);\n      return;\n    }\n\n    const builtLiability = makeIncomeLiabilityFromNameAndNI(\n      this.state.LIABILITY,\n      true, // NI payable\n    );\n    const liabilityMessage = checkIncomeLiability(builtLiability);\n    if (liabilityMessage !== '') {\n      this.props.showAlert(liabilityMessage);\n      return;\n    }\n\n    // log('adding something ' + showObj(this));\n    const income: Income = {\n      NAME: this.state.NAME,\n      VALUE: this.state.VALUE,\n      VALUE_SET: this.state.VALUE_SET,\n      START: this.state.START,\n      END: this.state.END,\n      GROWTH: parsedGrowth.value,\n      CPI_IMMUNE: !parseYNGrowsWithCPI.value,\n      LIABILITY: builtLiability,\n      CATEGORY: this.state.CATEGORY,\n    };\n    const message = await this.props.checkIncomeFunction(\n      income,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n    } else {\n      if (await this.props.submitIncomeFunction(income, this.props.model)) {\n        this.props.showAlert(`added new income ${income.NAME}`);\n        // clear fields\n        this.setState(this.defaultState);\n        this.resetSelect(this.incomeSourceSelectID);\n      }\n    }\n  }\n\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteFunction(this.state.NAME)) {\n      this.props.showAlert('deleted income');\n      // clear fields\n      this.setState(this.defaultState);\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n  private setInputDBP(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingPension,\n    });\n  }\n  private setInputincome(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingIncome,\n    });\n  }\n  private setInputRevalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingRevalue,\n    });\n  }\n}\n","import { ChartData, Item, ModelData, IncomeVal } from '../types/interfaces';\nimport { checkIncome, checkTransaction } from '../models/checks';\nimport {\n  collapsibleFragment,\n  defaultColumn,\n  incomesTableDivWithHeading,\n  transactionFilteredTable,\n  addIndices,\n} from './tablePages';\nimport {\n  deleteIncome,\n  getDisplay,\n  submitIncome,\n  submitTransaction,\n  submitTrigger,\n} from '../App';\nimport {\n  getDefaultChartSettings,\n  incomesChartDivWithButtons,\n} from './chartPages';\nimport { incomesView, revalueInc } from '../localization/stringConstants';\n\nimport { AddDeleteIncomeForm } from './reactComponents/AddDeleteIncomeForm';\nimport CashValueFormatter from './reactComponents/CashValueFormatter';\nimport DataGrid from './reactComponents/DataGrid';\nimport React from 'react';\nimport { SimpleFormatter } from './reactComponents/NameFormatter';\nimport { ViewSettings } from '../models/charting';\nimport { getTodaysDate } from '../models/modelUtils';\nimport { lessThan } from '../stringUtils';\nimport { log, printDebug } from '../utils';\n\nfunction addToMap(name: string, val: IncomeVal, myMap: Map<string, IncomeVal>) {\n  const existingEntry = myMap.get(name);\n  if (existingEntry === undefined) {\n    myMap.set(name, { ...val });\n  } else {\n    existingEntry.incomeVal += val.incomeVal;\n  }\n}\n\nfunction makeDataGrid(myMap: Map<string, IncomeVal>, model: ModelData) {\n  return (\n    <DataGrid\n      deleteFunction={undefined}\n      handleGridRowsUpdated={function() {\n        return false;\n      }}\n      rows={addIndices(\n        Array.from(myMap.entries())\n          .filter(key => {\n            return key[1].incomeVal !== 0.0;\n          })\n          .map(key => {\n            if (printDebug()) {\n              log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n            }\n            return {\n              NAME: key[0],\n              VALUE: `${key[1].incomeVal}`,\n              CATEGORY: `${key[1].category}`,\n            };\n          })\n          .sort((a: Item, b: Item) => lessThan(b.NAME, a.NAME)),\n      )}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: `value`,\n          formatter: <CashValueFormatter name=\"value\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'CATEGORY',\n          name: `category`,\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\n\nexport function todaysIncomesTable(\n  model: ModelData,\n  todaysValues: Map<string, IncomeVal>,\n) {\n  if (todaysValues.size === 0) {\n    return;\n  }\n\n  const categorisedValues = new Map<string, IncomeVal>();\n\n  const entries = Array.from(todaysValues.entries());\n  for (const key of entries) {\n    const cat = key[1].category;\n    if (cat === '') {\n      addToMap(key[0], key[1], categorisedValues);\n    } else {\n      const catName: string = key[1].category;\n      addToMap(catName, key[1], categorisedValues);\n    }\n  }\n\n  const today = getTodaysDate(model);\n  return (\n    <>\n      {collapsibleFragment(\n        makeDataGrid(todaysValues, model),\n        `Income values at ${today.toDateString()}`,\n      )}\n      {collapsibleFragment(\n        makeDataGrid(categorisedValues, model),\n        `Income values (categorised) at ${today.toDateString()}`,\n      )}\n    </>\n  );\n}\n\nexport function incomesDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  incomesChartData: ChartData,\n  todaysValues: Map<string, IncomeVal>,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (!getDisplay(incomesView)) {\n    // log(`don't populate incomesView`);\n    return;\n  }\n  // log(`do populate incomesView`);\n  return (\n    <div className=\"ml-3\">\n      {collapsibleFragment(\n        incomesChartDivWithButtons(\n          model,\n          viewSettings,\n          incomesChartData,\n          getDefaultChartSettings(viewSettings, model.settings),\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        ),\n        'Incomes data chart',\n      )}\n      {todaysIncomesTable(model, todaysValues)}\n      {incomesTableDivWithHeading(model, showAlert)}\n      {transactionFilteredTable(\n        model,\n        showAlert,\n        revalueInc,\n        'Income revaluations',\n      )}\n\n      {collapsibleFragment(\n        <div className=\"addNewIncome\">\n          <AddDeleteIncomeForm\n            checkIncomeFunction={checkIncome}\n            checkTransactionFunction={checkTransaction}\n            submitIncomeFunction={submitIncome}\n            submitTransactionFunction={submitTransaction}\n            deleteFunction={deleteIncome}\n            submitTriggerFunction={submitTrigger}\n            model={model}\n            showAlert={showAlert}\n          />\n        </div>,\n        'Add an income, a defined-benefits pension, or revalue an income',\n      )}\n    </div>\n  );\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport {\n  Expense,\n  ModelData,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport { isNumberString } from '../../models/checks';\nimport { revalue, revalueExp } from '../../localization/stringConstants';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport { isATransaction } from '../../models/modelUtils';\nimport {\n  makeValueAbsPropFromString,\n  checkTriggerDate,\n  makeGrowthFromString,\n  makeBooleanFromYesNo,\n} from '../../stringUtils';\n\ninterface EditExpenseFormState {\n  NAME: string;\n  VALUE: string;\n  VALUE_SET: string;\n  START: string;\n  END: string;\n  GROWTH: string;\n  GROWS_WITH_CPI: string;\n  CATEGORY: string;\n  RECURRENCE: string;\n  inputting: string;\n}\n\nconst inputtingRevalue = 'revalue';\nconst inputtingExpense = 'expense';\n\ninterface EditExpenseProps extends FormProps {\n  checkFunction: (e: Expense, model: ModelData) => string;\n  submitFunction: (expenseInput: Expense, modelData: ModelData) => Promise<any>;\n  deleteFunction: (name: string) => Promise<boolean>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n  checkTransactionFunction: (t: Transaction, model: ModelData) => string;\n  submitTransactionFunction: (\n    transactionInput: Transaction,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\nexport class AddDeleteExpenseForm extends Component<\n  EditExpenseProps,\n  EditExpenseFormState\n> {\n  public defaultState: EditExpenseFormState;\n\n  public constructor(props: EditExpenseProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteExpenseForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      VALUE: '',\n      VALUE_SET: '',\n      START: '',\n      END: '',\n      GROWTH: '',\n      GROWS_WITH_CPI: '',\n      CATEGORY: '',\n      RECURRENCE: '',\n      inputting: inputtingExpense,\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleGrowthChange = this.handleGrowthChange.bind(this);\n    this.handleGrowsWithCPIChange = this.handleGrowsWithCPIChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleRecurrenceChange = this.handleRecurrenceChange.bind(this);\n    this.setInputRevalue = this.setInputRevalue.bind(this);\n    this.setInputExpense = this.setInputExpense.bind(this);\n    this.twoExtraDates = this.twoExtraDates.bind(this);\n    this.newExpenseForm = this.newExpenseForm.bind(this);\n    this.revalue = this.revalue.bind(this);\n\n    this.handleValueSetChange = this.handleValueSetChange.bind(this);\n    this.setValueSet = this.setValueSet.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.setStart = this.setStart.bind(this);\n    this.handleEndChange = this.handleEndChange.bind(this);\n    this.setEnd = this.setEnd.bind(this);\n\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n  }\n\n  private newExpenseForm(): React.ReactNode {\n    if (this.state.inputting !== inputtingExpense) {\n      return;\n    }\n    return (\n      <>\n        <Row>\n          <Col>\n            <Input\n              title=\"Annual growth percentage (excluding inflation, e.g. 2 for 2% p.a.)\"\n              type=\"text\"\n              name=\"expensegrowth\"\n              value={this.state.GROWTH}\n              placeholder=\"Enter growth\"\n              onChange={this.handleGrowthChange}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Does value grow with inflation?\"\n              type=\"text\"\n              name=\"expensecpi-grows\"\n              value={this.state.GROWS_WITH_CPI}\n              placeholder=\"Enter Y/N\"\n              onChange={this.handleGrowsWithCPIChange}\n            />\n          </Col>{' '}\n        </Row>\n        <Row>\n          <Col>\n            <Input\n              title=\"Recurrence\"\n              type=\"text\"\n              name=\"expenserecurrence\"\n              value={this.state.RECURRENCE}\n              placeholder=\"recurrence\"\n              onChange={this.handleRecurrenceChange}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"expensecategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>{' '}\n        </Row>\n      </>\n    );\n  }\n\n  private twoExtraDates(): React.ReactNode {\n    if (this.state.inputting !== inputtingExpense) {\n      return;\n    }\n    return (\n      <>\n        <DateSelectionRow\n          introLabel=\"Date on which the expense starts\"\n          model={this.props.model}\n          showAlert={this.props.showAlert}\n          setDateFunction={this.setStart}\n          inputName=\"start date\"\n          inputValue={this.state.START}\n          onChangeHandler={this.handleStartChange}\n          triggers={this.props.model.triggers}\n          submitTriggerFunction={this.props.submitTriggerFunction}\n        />\n        <DateSelectionRow\n          introLabel=\"Date on which the expense ends\"\n          model={this.props.model}\n          showAlert={this.props.showAlert}\n          setDateFunction={this.setEnd}\n          inputName=\"end date\"\n          inputValue={this.state.END}\n          onChangeHandler={this.handleEndChange}\n          triggers={this.props.model.triggers}\n          submitTriggerFunction={this.props.submitTriggerFunction}\n        />\n      </>\n    );\n  }\n\n  private goButton(): React.ReactNode {\n    if (this.state.inputting === inputtingExpense) {\n      return makeButton(\n        'Create new expense (over-writes any existing with the same name)',\n        this.add,\n        'addExpense',\n        'addExpense',\n        'primary',\n      );\n    } else {\n      return makeButton(\n        'Revalue an expense',\n        this.revalue,\n        'revalueExpense',\n        'revalueExpense',\n        'primary',\n      );\n    }\n  }\n\n  public render() {\n    // log('rendering an AddDeleteExpenseForm');\n    return (\n      <>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Add new expense mode',\n            this.setInputExpense,\n            'useExpenseInputs',\n            'useExpenseInputs',\n            this.state.inputting === inputtingExpense\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Revalue expense mode',\n            this.setInputRevalue,\n            'useRevalueInputsExpense',\n            'useRevalueInputsExpense',\n            this.state.inputting === inputtingRevalue\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n        </div>\n        <form className=\"container-fluid\" onSubmit={this.add}>\n          <Row>\n            <Col>\n              <Input\n                title=\"Expense name\"\n                type=\"text\"\n                name=\"expensename\"\n                value={this.state.NAME}\n                placeholder=\"Enter name\"\n                onChange={this.handleNameChange}\n              />\n            </Col>\n            <Col>\n              <Input\n                title=\"Expense value\"\n                type=\"text\"\n                name=\"expensevalue\"\n                value={this.state.VALUE}\n                placeholder=\"Enter value\"\n                onChange={this.handleValueChange}\n              />\n            </Col>{' '}\n          </Row>\n          <div className=\"container-fluid\">\n            {/* fills width */}\n            <DateSelectionRow\n              introLabel=\"Date on which the expense value is set\"\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setValueSet}\n              inputName=\"expense valuation date\"\n              inputValue={this.state.VALUE_SET}\n              onChangeHandler={this.handleValueSetChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n            {this.twoExtraDates()}\n          </div>\n          {this.newExpenseForm()}\n          {this.goButton()}\n        </form>\n      </>\n    );\n  }\n\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ NAME: value });\n  }\n  private handleGrowthChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ GROWTH: value });\n  }\n  private handleRecurrenceChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ RECURRENCE: value });\n  }\n  private handleCategoryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ CATEGORY: value });\n  }\n  private handleGrowsWithCPIChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ GROWS_WITH_CPI: value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ VALUE: value });\n  }\n  private setInputRevalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingRevalue,\n    });\n  }\n  private setInputExpense(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingExpense,\n    });\n  }\n\n  private setValueSet(value: string): void {\n    this.setState({\n      VALUE_SET: value,\n    });\n  }\n  private handleValueSetChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setValueSet(value);\n  }\n  private setStart(value: string): void {\n    this.setState({ START: value });\n  }\n  private handleStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStart(value);\n  }\n  private setEnd(value: string): void {\n    this.setState({ END: value });\n  }\n  private handleEndChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setEnd(value);\n  }\n  private async revalue(e: React.MouseEvent<HTMLButtonElement>): Promise<void> {\n    e.preventDefault();\n\n    const parseVal = makeValueAbsPropFromString(this.state.VALUE);\n    if (!parseVal.checksOK) {\n      this.props.showAlert(\n        `Expense value ${this.state.VALUE} should be a numerical or % value`,\n      );\n      return;\n    }\n\n    const date = checkTriggerDate(\n      this.state.VALUE_SET,\n      this.props.model.triggers,\n    );\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n\n    let count = 1;\n    while (\n      isATransaction(`${revalue} ${this.state.NAME} ${count}`, this.props.model)\n    ) {\n      count += 1;\n    }\n\n    const revalueExpenseTransaction: Transaction = {\n      NAME: `${revalue} ${this.state.NAME} ${count}`,\n      FROM: '',\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.0',\n      TO: this.state.NAME,\n      TO_ABSOLUTE: parseVal.absolute,\n      TO_VALUE: parseVal.value,\n      DATE: this.state.VALUE_SET, // match the income start date\n      TYPE: revalueExp,\n      RECURRENCE: '',\n      STOP_DATE: '',\n      CATEGORY: '',\n    };\n    const message = await this.props.checkTransactionFunction(\n      revalueExpenseTransaction,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n      return;\n    }\n    await this.props.submitTransactionFunction(\n      revalueExpenseTransaction,\n      this.props.model,\n    );\n\n    this.props.showAlert('added new data');\n    // clear fields\n    this.setState(this.defaultState);\n    return;\n  }\n  private async add(e: FormEvent<Element>): Promise<void> {\n    e.preventDefault();\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.expenses.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        this.props.showAlert(\n          `There's already an expense called ${this.state.NAME}`,\n        );\n        return;\n      }\n    }\n\n    const isNotANumber = !isNumberString(this.state.VALUE);\n    if (isNotANumber) {\n      this.props.showAlert(\n        `Expense value ${this.state.VALUE} should be a numerical value`,\n      );\n      return;\n    }\n    let date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    let isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Start date '${this.state.START}' should be a date`);\n      return;\n    }\n    date = checkTriggerDate(this.state.END, this.props.model.triggers);\n    isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`End date '${this.state.END}' should be a date`);\n      return;\n    }\n    date = checkTriggerDate(this.state.VALUE_SET, this.props.model.triggers);\n    isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n    const parsedGrowth = makeGrowthFromString(\n      this.state.GROWTH,\n      this.props.model.settings,\n    );\n    if (!parsedGrowth.checksOK) {\n      this.props.showAlert(\n        `Growth value '${this.state.GROWTH}' should be a numerical value`,\n      );\n      return;\n    }\n    const parsedYN = makeBooleanFromYesNo(this.state.GROWS_WITH_CPI);\n    if (!parsedYN.checksOK) {\n      this.props.showAlert(\n        `Grows with inflation '${this.state.GROWS_WITH_CPI}' should be a Y/N value`,\n      );\n      return;\n    }\n\n    // log('adding something ' + showObj(this));\n    const expense: Expense = {\n      NAME: this.state.NAME,\n      VALUE: this.state.VALUE,\n      VALUE_SET: this.state.VALUE_SET,\n      START: this.state.START,\n      END: this.state.END,\n      GROWTH: parsedGrowth.value,\n      CPI_IMMUNE: !parsedYN.value,\n      CATEGORY: this.state.CATEGORY,\n      RECURRENCE: this.state.RECURRENCE,\n    };\n    const message = this.props.checkFunction(expense, this.props.model);\n    if (message.length > 0) {\n      this.props.showAlert(message);\n    } else {\n      await this.props.submitFunction(expense, this.props.model);\n      this.props.showAlert('added new expense');\n      // clear fields\n      this.setState(this.defaultState);\n    }\n  }\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteFunction(this.state.NAME)) {\n      this.props.showAlert('deleted expense');\n      // clear fields\n      this.setState(this.defaultState);\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n}\n","import { ChartData, Item, ModelData, ExpenseVal } from '../types/interfaces';\nimport { checkExpense, checkTransaction } from '../models/checks';\nimport {\n  defaultColumn,\n  expensesTableDivWithHeading,\n  transactionFilteredTable,\n  addIndices,\n} from './tablePages';\nimport {\n  deleteExpense,\n  getDisplay,\n  submitExpense,\n  submitTransaction,\n  submitTrigger,\n} from '../App';\nimport {\n  expensesChartDivWithButtons,\n  getDefaultChartSettings,\n} from './chartPages';\nimport { expensesView, revalueExp } from '../localization/stringConstants';\n\nimport { AddDeleteExpenseForm } from './reactComponents/AddDeleteExpenseForm';\nimport CashValueFormatter from './reactComponents/CashValueFormatter';\nimport DataGrid from './reactComponents/DataGrid';\nimport React from 'react';\nimport { SimpleFormatter } from './reactComponents/NameFormatter';\nimport { ViewSettings } from '../models/charting';\nimport { getTodaysDate } from '../models/modelUtils';\nimport { lessThan } from '../stringUtils';\nimport { collapsibleFragment } from './tablePages';\nimport { log, printDebug } from '../utils';\n\nfunction addToMap(\n  name: string,\n  val: ExpenseVal,\n  myMap: Map<string, ExpenseVal>,\n) {\n  const existingEntry = myMap.get(name);\n  if (existingEntry === undefined) {\n    myMap.set(name, { ...val });\n  } else {\n    existingEntry.expenseVal += val.expenseVal;\n  }\n}\n\nfunction makeDataGrid(myMap: Map<string, ExpenseVal>, model: ModelData) {\n  return (\n    <DataGrid\n      deleteFunction={undefined}\n      handleGridRowsUpdated={function() {\n        return false;\n      }}\n      rows={addIndices(\n        Array.from(myMap.entries())\n          .filter(key => {\n            return key[1].expenseVal !== 0.0;\n          })\n          .map(key => {\n            if (printDebug()) {\n              log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n            }\n            return {\n              NAME: key[0],\n              VALUE: `${key[1].expenseVal}`,\n              FREQ: `${key[1].expenseFreq}`,\n              CATEGORY: `${key[1].category}`,\n            };\n          }),\n      ).sort((a: Item, b: Item) => lessThan(a.NAME, b.NAME))}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: `value`,\n          formatter: <CashValueFormatter name=\"value\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'FREQ',\n          name: `frequency`,\n          formatter: <SimpleFormatter name=\"frequency\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'CATEGORY',\n          name: `category`,\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\n\nexport function todaysExpensesTable(\n  model: ModelData,\n  todaysValues: Map<string, ExpenseVal>,\n) {\n  if (todaysValues.size === 0) {\n    return;\n  }\n\n  const categorisedValues = new Map<string, ExpenseVal>();\n\n  const entries = Array.from(todaysValues.entries());\n  for (const key of entries) {\n    const cat = key[1].category;\n    if (cat === '') {\n      addToMap(key[0], key[1], categorisedValues);\n    } else {\n      const catName: string = key[1].category;\n      addToMap(`${catName}${key[1].expenseFreq}`, key[1], categorisedValues);\n    }\n  }\n\n  const today = getTodaysDate(model);\n  return (\n    <>\n      {collapsibleFragment(\n        makeDataGrid(todaysValues, model),\n        `Expense values at ${today.toDateString()}`,\n      )}\n      {collapsibleFragment(\n        makeDataGrid(categorisedValues, model),\n        `Expense values (categorised) at ${today.toDateString()}`,\n      )}\n    </>\n  );\n}\n\nexport function expensesDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  expensesChartData: ChartData,\n  todaysValues: Map<string, ExpenseVal>,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (!getDisplay(expensesView)) {\n    // log(`don't populate expensesView`);\n    return;\n  }\n  // log(`do populate expensesView`);\n  return (\n    <div className=\"ml-3\">\n      {collapsibleFragment(\n        expensesChartDivWithButtons(\n          model,\n          viewSettings,\n          expensesChartData,\n          getDefaultChartSettings(viewSettings, model.settings),\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        ),\n        'Expenses data chart',\n      )}\n      {todaysExpensesTable(model, todaysValues)}\n      {expensesTableDivWithHeading(model, showAlert)}\n      {transactionFilteredTable(\n        model,\n        showAlert,\n        revalueExp,\n        'Expense revaluations',\n      )}\n      {collapsibleFragment(\n        <div className=\"addNewExpense\">\n          <AddDeleteExpenseForm\n            checkFunction={checkExpense}\n            submitFunction={submitExpense}\n            deleteFunction={deleteExpense}\n            submitTriggerFunction={submitTrigger}\n            model={model}\n            showAlert={showAlert}\n            checkTransactionFunction={checkTransaction}\n            submitTransactionFunction={submitTransaction}\n          />\n        </div>,\n        'Add or revalue an expense',\n      )}\n    </div>\n  );\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport {\n  checkAssetLiability,\n  isNumberString,\n  isValidValue,\n} from '../../models/checks';\nimport {\n  Asset,\n  ModelData,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport {\n  cgt,\n  pension,\n  crystallizedPension,\n  pensionSS,\n  autogen,\n  revalue,\n  revalueAsset,\n  moveTaxFreePart,\n  taxFree,\n  transferCrystallizedPension,\n  dot,\n} from '../../localization/stringConstants';\nimport { incomeOptions } from './AddDeleteIncomeForm';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport { isATransaction, getSettings } from '../../models/modelUtils';\nimport {\n  makeValueAbsPropFromString,\n  checkTriggerDate,\n  makeBooleanFromYesNo,\n  makeQuantityFromString,\n} from '../../stringUtils';\n\ninterface EditAssetFormState {\n  NAME: string;\n  VALUE: string;\n  QUANTITY: string;\n  START: string;\n  GROWTH: string;\n  GROWS_WITH_INFLATION: string;\n  PURCHASE_PRICE: string;\n  LIABILITY: string;\n  CATEGORY: string;\n  inputting: string;\n  DCP_STOP: string;\n  DCP_CRYSTALLIZE: string;\n  DCP_SS: string;\n  DCP_INCOME_SOURCE: string;\n  DCP_CONTRIBUTION_AMOUNT: string;\n  DCP_EMP_CONTRIBUTION_AMOUNT: string;\n  DCP_TRANSFER_TO: string;\n  DCP_TRANSFER_DATE: string;\n}\n\nconst inputtingRevalue = 'revalue';\nconst inputtingAsset = 'asset';\nconst inputtingPension = 'definedContributionsPension';\n\ninterface EditAssetProps extends FormProps {\n  checkAssetFunction: (a: Asset, model: ModelData) => string;\n  submitAssetFunction: (arg0: Asset, arg1: ModelData) => Promise<void>;\n  deleteAssetFunction: (name: string) => Promise<boolean>;\n  checkTransactionFunction: (t: Transaction, model: ModelData) => string;\n  submitTransactionFunction: (\n    transactionInput: Transaction,\n    modelData: ModelData,\n  ) => Promise<void>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\nexport class AddDeleteAssetForm extends Component<\n  EditAssetProps,\n  EditAssetFormState\n> {\n  public defaultState: EditAssetFormState;\n\n  private incomeSourceSelectID = 'fromIncomeSelectAssetForm';\n\n  public constructor(props: EditAssetProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteAssetForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      VALUE: '',\n      QUANTITY: '',\n      START: '',\n      GROWTH: '',\n      GROWS_WITH_INFLATION: '',\n      PURCHASE_PRICE: '',\n      LIABILITY: '',\n      CATEGORY: '',\n      inputting: inputtingAsset,\n      DCP_STOP: '',\n      DCP_CRYSTALLIZE: '',\n      DCP_SS: '',\n      DCP_INCOME_SOURCE: '',\n      DCP_CONTRIBUTION_AMOUNT: '',\n      DCP_EMP_CONTRIBUTION_AMOUNT: '',\n      DCP_TRANSFER_TO: '',\n      DCP_TRANSFER_DATE: '',\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleQuantityChange = this.handleQuantityChange.bind(this);\n    this.handleGrowthChange = this.handleGrowthChange.bind(this);\n    this.handleLiabilityChange = this.handleLiabilityChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handlePurchasePriceChange = this.handlePurchasePriceChange.bind(this);\n    this.handleGrowsWithCPIChange = this.handleGrowsWithCPIChange.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.handleDcpTransferTo = this.handleDcpTransferTo.bind(this);\n    this.setDcpTransferDate = this.setDcpTransferDate.bind(this);\n    this.handleDcpTransferDateChange = this.handleDcpTransferDateChange.bind(\n      this,\n    );\n\n    this.setStart = this.setStart.bind(this);\n    this.inputPension = this.inputPension.bind(this);\n    this.inputAsset = this.inputAsset.bind(this);\n    this.inputRevalue = this.inputRevalue.bind(this);\n    this.setStop = this.setStop.bind(this);\n    this.handleStopChange = this.handleStopChange.bind(this);\n    this.setCrystallize = this.setCrystallize.bind(this);\n    this.handleCrystallizeChange = this.handleCrystallizeChange.bind(this);\n    this.handleDcpIncomeSourceChange = this.handleDcpIncomeSourceChange.bind(\n      this,\n    );\n    this.handleDcpContAmount = this.handleDcpContAmount.bind(this);\n    this.handleDcpEmpContAmount = this.handleDcpEmpContAmount.bind(this);\n    this.handleDcpSsChange = this.handleDcpSsChange.bind(this);\n\n    this.add = this.add.bind(this);\n    this.addFromButton = this.addFromButton.bind(this);\n    this.addFromForm = this.addFromForm.bind(this);\n    this.delete = this.delete.bind(this);\n    this.goButtons = this.goButtons.bind(this);\n    this.revalue = this.revalue.bind(this);\n    this.ValueQuantityAndCategory = this.ValueQuantityAndCategory.bind(this);\n    this.growthAndInflation = this.growthAndInflation.bind(this);\n  }\n\n  private inputsForGeneralAsset(): React.ReactNode {\n    return (\n      <div\n        style={{\n          display: this.state.inputting === inputtingAsset ? 'block' : 'none',\n        }}\n      >\n        <Row>\n          <Col>\n            <Input\n              title=\"Capital Gains Tax Liability (empty or someone's name)\"\n              type=\"text\"\n              name=\"liabilityCGT\"\n              value={this.state.LIABILITY}\n              placeholder=\"Enter liability\"\n              onChange={this.handleLiabilityChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Original purchase price (optional, needed for CGT purposes)\"\n              type=\"text\"\n              name=\"purchase\"\n              value={this.state.PURCHASE_PRICE}\n              placeholder=\"purchase\"\n              onChange={this.handlePurchasePriceChange}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  private growthAndInflation(): React.ReactNode {\n    if (this.state.inputting !== inputtingRevalue) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title=\"Annual growth percentage (excluding inflation, e.g. 2 for 2% p.a.)\"\n              type=\"text\"\n              name=\"assetgrowth\"\n              value={this.state.GROWTH}\n              placeholder=\"Enter growth\"\n              onChange={this.handleGrowthChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Does value grow with inflation?\"\n              type=\"text\"\n              name=\"assetcpi-grows\"\n              value={this.state.GROWS_WITH_INFLATION}\n              placeholder=\"Enter Y/N\"\n              onChange={this.handleGrowsWithCPIChange}\n            />\n          </Col>\n        </Row>\n      );\n    }\n  }\n\n  private ValueQuantityAndCategory(): React.ReactNode {\n    // log(`this.state.inputting = ${this.state.inputting}`);\n    if (this.state.inputting === inputtingRevalue) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={`${'Asset'} name`}\n              type=\"text\"\n              name=\"assetname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`Asset value`}\n              type=\"text\"\n              name=\"assetvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n        </Row>\n      );\n    } else if (this.state.inputting === inputtingPension) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={`${\n                this.state.inputting === inputtingPension ? 'Pension' : 'Asset'\n              } name`}\n              type=\"text\"\n              name=\"assetname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`${\n                this.state.inputting === inputtingPension ? 'Pension' : 'Asset'\n              } value`}\n              type=\"text\"\n              name=\"assetvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"assetcategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>\n        </Row>\n      );\n    } else {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={`${\n                this.state.inputting === inputtingPension ? 'Pension' : 'Asset'\n              } name`}\n              type=\"text\"\n              name=\"assetname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`${\n                this.state.inputting === inputtingPension ? 'Pension' : 'Asset'\n              } value`}\n              type=\"text\"\n              name=\"assetvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={'Quantity (optional)'}\n              type=\"text\"\n              name=\"assetquantity\"\n              value={this.state.QUANTITY}\n              placeholder=\"Enter quantity\"\n              onChange={this.handleQuantityChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"assetcategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>\n        </Row>\n      );\n    }\n  }\n\n  private goButtons(): React.ReactNode {\n    if (this.state.inputting === inputtingAsset) {\n      return makeButton(\n        'Create new asset (over-writes any existing with the same name)',\n        this.addFromButton,\n        'addAsset',\n        'addAsset',\n        'primary',\n      );\n    } else if (this.state.inputting === inputtingRevalue) {\n      return makeButton(\n        'Revalue this asset',\n        this.revalue,\n        'revalueAsset',\n        'revalueAsset',\n        'primary',\n      );\n    } else if (this.state.inputting === inputtingPension) {\n      return makeButton(\n        'Create new pension',\n        this.addFromButton,\n        'addPension',\n        'addPension',\n        'primary',\n      );\n    }\n  }\n\n  private inputsForDCP(): React.ReactNode {\n    return (\n      <div\n        style={{\n          display: this.state.inputting === inputtingPension ? 'block' : 'none',\n        }}\n      >\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel={`Stop date for contributions`}\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setStop}\n            inputName=\"stop date\"\n            inputValue={this.state.DCP_STOP}\n            onChangeHandler={this.handleStopChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel={`Date on which the pension crystallizes`}\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setCrystallize}\n            inputName=\"crystallize date\"\n            inputValue={this.state.DCP_CRYSTALLIZE}\n            onChangeHandler={this.handleCrystallizeChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n        <div className=\"container-fluid\">\n          {this.state.inputting === inputtingPension ? (\n            <DateSelectionRow\n              introLabel=\"On death, pension transfers to (optional)\"\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setDcpTransferDate}\n              inputName=\"transferred stop date\"\n              inputValue={this.state.DCP_TRANSFER_DATE}\n              onChangeHandler={this.handleDcpTransferDateChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n          ) : (\n            <div />\n          )}\n        </div>\n        <Row>\n          <Col>\n            <Input\n              title=\"Is contribution salary-sacrificed\"\n              type=\"text\"\n              name=\"contributionSSAsset\"\n              value={this.state.DCP_SS}\n              placeholder=\"Enter Y/N\"\n              onChange={this.handleDcpSsChange}\n            />\n          </Col>{' '}\n          <Col>\n            <label>Income from which pension contributions are made</label>\n            {incomeOptions(\n              this.props.model,\n              this.handleDcpIncomeSourceChange,\n              this.incomeSourceSelectID,\n            )}\n          </Col>{' '}\n        </Row>{' '}\n        <Row>\n          <Col>\n            <Input\n              title=\"Pension contribution amount (>0, e.g. 0.05 for 5%)\"\n              type=\"text\"\n              name=\"contributionAmountPensionAsset\"\n              value={this.state.DCP_CONTRIBUTION_AMOUNT}\n              placeholder=\"Enter amount of contributions\"\n              onChange={this.handleDcpContAmount}\n            />\n          </Col>{' '}\n          <Col>\n            <Input\n              title=\"Employer contribution amount (e.g. 0.05 for 5%)\"\n              type=\"text\"\n              name=\"contributionAmount\"\n              value={this.state.DCP_EMP_CONTRIBUTION_AMOUNT}\n              placeholder=\"Employer contributions\"\n              onChange={this.handleDcpEmpContAmount}\n            />\n          </Col>{' '}\n        </Row>{' '}\n        <Row>\n          <Col>\n            <Input\n              title=\"Income Tax Liability (someone's name)\"\n              type=\"text\"\n              name=\"liabilityIC\"\n              value={this.state.LIABILITY}\n              placeholder=\"Enter liability\"\n              onChange={this.handleLiabilityChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"On death, pension transfers to (optional)\"\n              type=\"text\"\n              name=\"transferNameAsset\"\n              value={this.state.DCP_TRANSFER_TO}\n              placeholder=\"Enter person to transfer to\"\n              onChange={this.handleDcpTransferTo}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n\n  public render() {\n    // log('rendering an AddDeleteAssetForm');\n    return (\n      <>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Add new asset mode',\n            this.inputAsset,\n            'inputAsset',\n            'inputAsset',\n            this.state.inputting === inputtingAsset\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Add pension mode',\n            this.inputPension,\n            'useDCPInputs',\n            'useDCPInputs',\n            this.state.inputting === inputtingPension\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Revalue asset mode',\n            this.inputRevalue,\n            'revalueAssetInputs',\n            'revalueAssetInputs',\n            this.state.inputting === inputtingRevalue\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n        </div>\n        <form className=\"container-fluid\" onSubmit={this.addFromForm}>\n          {this.ValueQuantityAndCategory()}\n          <div className=\"container-fluid\">\n            {/* fills width */}\n            <DateSelectionRow\n              introLabel={`Date on which the ${\n                this.state.inputting === inputtingRevalue\n                  ? 'revaluation occurs'\n                  : this.state.inputting === inputtingPension\n                  ? 'pension asset begins'\n                  : 'asset starts'\n              }`}\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setStart}\n              inputName=\"start date\"\n              inputValue={this.state.START}\n              onChangeHandler={this.handleStartChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n          </div>\n          {this.growthAndInflation()}\n          {this.inputsForGeneralAsset()}\n          {this.inputsForDCP()}\n          {this.goButtons()}\n        </form>\n      </>\n    );\n  }\n\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ NAME: value });\n  }\n  private handleGrowthChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ GROWTH: value });\n  }\n  private handleCategoryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ CATEGORY: value });\n  }\n  private handlePurchasePriceChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ PURCHASE_PRICE: value });\n  }\n  private handleLiabilityChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ LIABILITY: value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ VALUE: value });\n  }\n  private handleQuantityChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ QUANTITY: value });\n  }\n  private handleGrowsWithCPIChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ GROWS_WITH_INFLATION: value });\n  }\n  private setStart(value: string): void {\n    this.setState({ START: value });\n  }\n  private handleStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStart(value);\n  }\n  private setStop(value: string): void {\n    this.setState({ DCP_STOP: value });\n  }\n  private handleStopChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStop(value);\n  }\n  private setCrystallize(value: string): void {\n    this.setState({ DCP_CRYSTALLIZE: value });\n  }\n  private handleCrystallizeChange(\n    e: React.ChangeEvent<HTMLInputElement>,\n  ): void {\n    const value = e.target.value;\n    this.setCrystallize(value);\n  }\n  private handleDcpSsChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setState({ DCP_SS: value });\n  }\n  private handleDcpIncomeSourceChange(value: string): void {\n    this.setState({ DCP_INCOME_SOURCE: value });\n  }\n  private handleDcpContAmount(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setState({ DCP_CONTRIBUTION_AMOUNT: value });\n  }\n  private handleDcpEmpContAmount(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setState({ DCP_EMP_CONTRIBUTION_AMOUNT: value });\n  }\n  private handleDcpTransferTo(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setState({ DCP_TRANSFER_TO: e.target.value });\n  }\n  private setDcpTransferDate(value: string): void {\n    this.setState({ DCP_TRANSFER_DATE: value });\n  }\n  private handleDcpTransferDateChange(e: React.ChangeEvent<HTMLInputElement>) {\n    this.setDcpTransferDate(e.target.value);\n  }\n\n  private async revalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n\n    const parseVal = makeValueAbsPropFromString(this.state.VALUE);\n    if (!parseVal.checksOK) {\n      this.props.showAlert(\n        `Income value ${this.state.VALUE} should be a numerical or % value`,\n      );\n      return;\n    }\n\n    const date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n\n    let count = 1;\n    while (\n      isATransaction(`${revalue} ${this.state.NAME} ${count}`, this.props.model)\n    ) {\n      count += 1;\n    }\n\n    const revalueExpenseTransaction: Transaction = {\n      NAME: `${revalue} ${this.state.NAME} ${count}`,\n      FROM: '',\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.0',\n      TO: this.state.NAME,\n      TO_ABSOLUTE: parseVal.absolute,\n      TO_VALUE: parseVal.value,\n      DATE: this.state.START,\n      TYPE: revalueAsset,\n      RECURRENCE: '',\n      STOP_DATE: '',\n      CATEGORY: '',\n    };\n    // log(`adding transaction ${showObj(revalueExpenseTransaction)}`);\n    const message = this.props.checkTransactionFunction(\n      revalueExpenseTransaction,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n      return;\n    }\n    await this.props.submitTransactionFunction(\n      revalueExpenseTransaction,\n      this.props.model,\n    );\n\n    this.props.showAlert('added new data');\n    // clear fields\n    this.setState(this.defaultState);\n    this.resetSelect(this.incomeSourceSelectID);\n    return;\n  }\n\n  private async addFromForm(e: FormEvent<Element>) {\n    e.preventDefault();\n    this.add();\n  }\n  private async addFromButton(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.add();\n  }\n\n  private async add() {\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.assets.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        if (matchingItem.IS_A_DEBT) {\n          this.props.showAlert(\n            `There's already a debt called ${this.state.NAME}`,\n          );\n        } else {\n          this.props.showAlert(\n            `There's already an asset called ${this.state.NAME}`,\n          );\n        }\n        return;\n      }\n    }\n\n    const isNotValid = !isValidValue(this.state.VALUE, this.props.model);\n    if (isNotValid) {\n      this.props.showAlert(\n        `Asset value ${this.state.VALUE} should be a numerical value or built from a setting`,\n      );\n      return;\n    }\n    const date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Start date '${this.state.START}' should be a date`);\n      return;\n    }\n    const isNotANumber = !isNumberString(this.state.GROWTH);\n    if (isNotANumber) {\n      const setting = getSettings(\n        this.props.model.settings,\n        this.state.GROWTH,\n        '',\n        false, // allow for it not beinig there\n      );\n      if (setting === '') {\n        this.props.showAlert(\n          `Growth value '${this.state.GROWTH}' should be a numerical or setting value`,\n        );\n        return;\n      }\n    }\n\n    if (this.state.inputting === inputtingPension) {\n      const asset1Name = pension + this.state.NAME;\n      const asset2Name = taxFree + this.state.NAME;\n      const asset3Name =\n        crystallizedPension + this.state.LIABILITY + dot + this.state.NAME;\n      const asset4Name =\n        crystallizedPension +\n        this.state.DCP_TRANSFER_TO +\n        dot +\n        this.state.NAME;\n\n      const asset1: Asset = {\n        NAME: asset1Name,\n        VALUE: this.state.VALUE,\n        QUANTITY: '', // pensions are continuous\n        START: this.state.START,\n        GROWTH: this.state.GROWTH,\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: this.state.CATEGORY,\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      };\n      let message = this.props.checkAssetFunction(asset1, this.props.model);\n      if (message.length > 0) {\n        this.props.showAlert(message);\n        return;\n      }\n\n      const asset2: Asset = {\n        NAME: asset2Name,\n        VALUE: '0.0',\n        QUANTITY: '', // pensions are continuous\n        START: this.state.START,\n        GROWTH: this.state.GROWTH,\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: this.state.CATEGORY,\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      };\n      message = this.props.checkAssetFunction(asset2, this.props.model);\n      if (message.length > 0) {\n        this.props.showAlert(message);\n        return;\n      }\n\n      const asset3: Asset = {\n        NAME: asset3Name,\n        VALUE: '0.0',\n        QUANTITY: '', // pensions are continuous\n        START: this.state.START,\n        GROWTH: this.state.GROWTH,\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: this.state.CATEGORY,\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      };\n      message = this.props.checkAssetFunction(asset3, this.props.model);\n      if (message.length > 0) {\n        this.props.showAlert(message);\n        return;\n      }\n\n      const asset4: Asset = {\n        NAME: asset4Name,\n        VALUE: '0.0',\n        QUANTITY: '', // pensions are continuous\n        START: this.state.START,\n        GROWTH: this.state.GROWTH,\n        CPI_IMMUNE: false,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: this.state.CATEGORY,\n        PURCHASE_PRICE: '0.0',\n        LIABILITY: '',\n      };\n      if (this.state.DCP_TRANSFER_TO !== '') {\n        message = this.props.checkAssetFunction(asset4, this.props.model);\n        if (message.length > 0) {\n          this.props.showAlert(message);\n          return;\n        }\n      }\n\n      const parseYNSS = makeBooleanFromYesNo(this.state.DCP_SS);\n      if (!parseYNSS.checksOK) {\n        this.props.showAlert(\n          `Salary sacrifice '${this.state.DCP_SS}' should be a Y/N value`,\n        );\n        return;\n      }\n      let isNotANumber = !isNumberString(this.state.DCP_CONTRIBUTION_AMOUNT);\n      if (isNotANumber) {\n        this.props.showAlert(\n          `Contribution amount '${this.state.DCP_CONTRIBUTION_AMOUNT}' should be a numerical value`,\n        );\n        return;\n      }\n      isNotANumber = !isNumberString(this.state.DCP_EMP_CONTRIBUTION_AMOUNT);\n      if (isNotANumber) {\n        this.props.showAlert(\n          `Contribution amount '${this.state.DCP_EMP_CONTRIBUTION_AMOUNT}' should be a numerical value`,\n        );\n        return;\n      }\n      const contPc = parseFloat(this.state.DCP_CONTRIBUTION_AMOUNT);\n      const contEmpPc = parseFloat(this.state.DCP_EMP_CONTRIBUTION_AMOUNT);\n\n      const toProp = contPc === 0 ? 0.0 : (contPc + contEmpPc) / contPc;\n\n      const model = this.props.model;\n      await this.props.submitAssetFunction(asset1, model);\n      await this.props.submitAssetFunction(asset2, model);\n      await this.props.submitAssetFunction(asset3, model);\n      if (this.state.DCP_TRANSFER_TO !== '') {\n        await this.props.submitAssetFunction(asset4, model);\n      }\n\n      const contributions: Transaction = {\n        NAME: (parseYNSS.value ? pensionSS : pension) + this.state.NAME,\n        FROM: this.state.DCP_INCOME_SOURCE,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: this.state.DCP_CONTRIBUTION_AMOUNT,\n        TO: asset1Name,\n        TO_ABSOLUTE: false,\n        TO_VALUE: `${toProp}`,\n        DATE: this.state.START, // match the income start date\n        STOP_DATE: this.state.DCP_STOP, // match the income stop date\n        RECURRENCE: '',\n        CATEGORY: this.state.CATEGORY,\n        TYPE: autogen,\n      };\n      message = this.props.checkTransactionFunction(\n        contributions,\n        this.props.model,\n      );\n      if (message.length > 0) {\n        await this.props.deleteAssetFunction(asset1.NAME);\n        await this.props.deleteAssetFunction(asset2.NAME);\n        await this.props.deleteAssetFunction(asset3.NAME);\n        if (this.state.DCP_TRANSFER_TO !== '') {\n          await this.props.deleteAssetFunction(asset4.NAME);\n        }\n        this.props.showAlert(message);\n        return;\n      }\n      const crystallizeTaxFree: Transaction = {\n        NAME: moveTaxFreePart + this.state.NAME,\n        FROM: asset1Name,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '0.25', // TODO move hard coded value out of UI code\n        TO: asset2Name,\n        TO_ABSOLUTE: false,\n        TO_VALUE: `1.0`,\n        DATE: this.state.DCP_CRYSTALLIZE,\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: this.state.CATEGORY,\n        TYPE: autogen,\n      };\n      message = this.props.checkTransactionFunction(\n        crystallizeTaxFree,\n        this.props.model,\n      );\n      if (message.length > 0) {\n        await this.props.deleteAssetFunction(asset1.NAME);\n        await this.props.deleteAssetFunction(asset2.NAME);\n        await this.props.deleteAssetFunction(asset3.NAME);\n        if (this.state.DCP_TRANSFER_TO !== '') {\n          await this.props.deleteAssetFunction(asset4.NAME);\n        }\n        this.props.showAlert(message);\n        return;\n      }\n      const crystallize: Transaction = {\n        NAME: crystallizedPension + this.state.NAME,\n        FROM: asset1Name,\n        FROM_ABSOLUTE: false,\n        FROM_VALUE: '1.0',\n        TO: asset3Name,\n        TO_ABSOLUTE: false,\n        TO_VALUE: `1.0`,\n        DATE: this.state.DCP_CRYSTALLIZE, // +1 sec\n        STOP_DATE: '',\n        RECURRENCE: '',\n        CATEGORY: this.state.CATEGORY,\n        TYPE: autogen,\n      };\n      message = this.props.checkTransactionFunction(\n        crystallize,\n        this.props.model,\n      );\n      if (message.length > 0) {\n        await this.props.deleteAssetFunction(asset1.NAME);\n        await this.props.deleteAssetFunction(asset2.NAME);\n        await this.props.deleteAssetFunction(asset3.NAME);\n        if (this.state.DCP_TRANSFER_TO !== '') {\n          await this.props.deleteAssetFunction(asset4.NAME);\n        }\n        this.props.showAlert(message);\n        return;\n      }\n      let transfer: Transaction | undefined;\n      if (this.state.DCP_TRANSFER_TO !== '') {\n        transfer = {\n          NAME: transferCrystallizedPension + this.state.NAME,\n          FROM: asset3Name,\n          FROM_ABSOLUTE: false,\n          FROM_VALUE: '1.0',\n          TO: asset4Name,\n          TO_ABSOLUTE: false,\n          TO_VALUE: '1.0',\n          DATE: this.state.DCP_TRANSFER_DATE,\n          STOP_DATE: '',\n          RECURRENCE: '',\n          CATEGORY: this.state.CATEGORY,\n          TYPE: autogen,\n        };\n        message = this.props.checkTransactionFunction(\n          transfer,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          await this.props.deleteAssetFunction(asset1.NAME);\n          await this.props.deleteAssetFunction(asset2.NAME);\n          await this.props.deleteAssetFunction(asset3.NAME);\n          await this.props.deleteAssetFunction(asset4.NAME);\n          this.props.showAlert(message);\n          return;\n        }\n      }\n\n      await this.props.submitTransactionFunction(\n        contributions,\n        this.props.model,\n      );\n      await this.props.submitTransactionFunction(\n        crystallizeTaxFree,\n        this.props.model,\n      );\n      await this.props.submitTransactionFunction(crystallize, this.props.model);\n      if (transfer) {\n        await this.props.submitTransactionFunction(transfer, this.props.model);\n      }\n\n      this.props.showAlert('added assets and transactions');\n      // clear fields\n      this.setState(this.defaultState);\n      this.resetSelect(this.incomeSourceSelectID);\n    } else {\n      const parsedQuantity = makeQuantityFromString(this.state.QUANTITY);\n      if (!parsedQuantity.checksOK) {\n        this.props.showAlert(\n          `Quantity '${this.state.QUANTITY}' should empty or a whole number value`,\n        );\n        return;\n      }\n\n      const name = this.state.LIABILITY;\n      let builtLiability = '';\n      if (name !== '') {\n        builtLiability = name + cgt;\n      }\n      const liabilityMessage = checkAssetLiability(builtLiability);\n      if (liabilityMessage !== '') {\n        this.props.showAlert(liabilityMessage);\n        return;\n      }\n      let purchasePrice = this.state.PURCHASE_PRICE;\n      if (purchasePrice === '') {\n        purchasePrice = '0';\n      }\n      const parsedYNCPI = makeBooleanFromYesNo(this.state.GROWS_WITH_INFLATION);\n      if (!parsedYNCPI.checksOK) {\n        this.props.showAlert(\n          `Grows with CPI: '${this.state.GROWS_WITH_INFLATION}' should be a Y/N value`,\n        );\n        return;\n      }\n\n      // log('adding something ' + showObj(this));\n      const asset: Asset = {\n        NAME: this.state.NAME,\n        VALUE: this.state.VALUE,\n        QUANTITY: this.state.QUANTITY,\n        START: this.state.START,\n        GROWTH: this.state.GROWTH,\n        CPI_IMMUNE: !parsedYNCPI.value,\n        CAN_BE_NEGATIVE: false,\n        IS_A_DEBT: false,\n        CATEGORY: this.state.CATEGORY,\n        PURCHASE_PRICE: purchasePrice,\n        LIABILITY: builtLiability,\n      };\n      // log(`Adding asset s${showObj(asset)}`);\n      const message = this.props.checkAssetFunction(asset, this.props.model);\n      if (message.length > 0) {\n        this.props.showAlert(message);\n      } else {\n        await this.props.submitAssetFunction(asset, this.props.model);\n        this.props.showAlert('added new asset');\n        // clear fields\n        this.setState(this.defaultState);\n        this.resetSelect(this.incomeSourceSelectID);\n      }\n    }\n  }\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteAssetFunction(this.state.NAME)) {\n      this.props.showAlert('deleted asset');\n      // clear fields\n      this.setState(this.defaultState);\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n  private inputPension(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingPension,\n    });\n  }\n  private inputAsset(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingAsset,\n    });\n  }\n  private inputRevalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingRevalue,\n    });\n  }\n  private resetSelect(id: string) {\n    const selector: any = document.getElementById(id);\n    if (selector !== null) {\n      selector.selectedIndex = '0';\n    }\n  }\n}\n","import { AssetVal, ChartData, Item, ModelData } from './../types/interfaces';\nimport { assetsDivWithHeadings, defaultColumn, addIndices } from './tablePages';\nimport { checkAsset, checkTransaction } from '../models/checks';\nimport {\n  deleteAsset,\n  getDisplay,\n  submitAsset,\n  submitTransaction,\n  submitTrigger,\n} from './../App';\n\nimport { AddDeleteAssetForm } from './reactComponents/AddDeleteAssetForm';\nimport CashValueFormatter from './reactComponents/CashValueFormatter';\nimport DataGrid from './reactComponents/DataGrid';\nimport React from 'react';\nimport { SimpleFormatter } from './reactComponents/NameFormatter';\nimport { assetsOrDebtsChartDivWithButtons } from './chartPages';\nimport { assetsView } from '../localization/stringConstants';\nimport { ViewSettings } from '../models/charting';\nimport { getTodaysDate } from '../models/modelUtils';\nimport { lessThan } from '../stringUtils';\nimport { collapsibleFragment } from './tablePages';\nimport { log, printDebug } from '../utils';\n\nfunction addToMap(name: string, val: AssetVal, myMap: Map<string, AssetVal>) {\n  const existingEntry = myMap.get(name);\n  if (existingEntry === undefined) {\n    myMap.set(name, { ...val });\n  } else {\n    existingEntry.assetVal += val.assetVal;\n    if (existingEntry.assetQ && val.assetQ) {\n      existingEntry.assetQ += val.assetQ;\n    } else if (val.assetQ) {\n      existingEntry.assetQ = val.assetQ;\n    }\n  }\n}\n\nfunction makeDataGrid(myMap: Map<string, AssetVal>, model: ModelData) {\n  return (\n    <DataGrid\n      deleteFunction={undefined}\n      handleGridRowsUpdated={function() {\n        return false;\n      }}\n      rows={addIndices(\n        Array.from(myMap.entries())\n          .filter(key => {\n            return key[1].assetVal !== 0.0;\n          })\n          .map(key => {\n            if (printDebug()) {\n              log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n            }\n            const quantityText = key[1].assetQ ? `${key[1].assetQ}` : '';\n            return {\n              NAME: key[0],\n              VALUE: `${key[1].assetVal}`,\n              QUANTITY: quantityText,\n              CATEGORY: `${key[1].category}`,\n            };\n          })\n          .sort((a: Item, b: Item) => lessThan(b.NAME, a.NAME)),\n      )}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: `value`,\n          formatter: <CashValueFormatter name=\"value\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'QUANTITY',\n          name: `quantity`,\n          formatter: <SimpleFormatter name=\"quantity\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'CATEGORY',\n          name: `category`,\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\n\nexport function todaysAssetsTable(\n  model: ModelData,\n  todaysValues: Map<string, AssetVal>,\n) {\n  if (todaysValues.size === 0) {\n    return;\n  }\n  const categorisedValues = new Map<string, AssetVal>();\n\n  const entries = Array.from(todaysValues.entries());\n  for (const key of entries) {\n    const cat = key[1].category;\n    if (cat === '') {\n      addToMap(key[0], key[1], categorisedValues);\n    } else {\n      const catName: string = key[1].category;\n      addToMap(catName, key[1], categorisedValues);\n    }\n  }\n  const today = getTodaysDate(model);\n  return (\n    <>\n      {collapsibleFragment(\n        makeDataGrid(todaysValues, model),\n        `Asset values at ${today.toDateString()}`,\n      )}\n      {collapsibleFragment(\n        makeDataGrid(categorisedValues, model),\n        `Asset values (categorised) at ${today.toDateString()}`,\n      )}\n    </>\n  );\n}\n\nexport function assetsDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  assetChartData: ChartData,\n  todaysValues: Map<string, AssetVal>,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (!getDisplay(assetsView)) {\n    // log(`don't populate assetsView`);\n    return;\n  }\n  // log(`do populate assetsView`);\n\n  return (\n    <div className=\"ml-3\">\n      {collapsibleFragment(\n        assetsOrDebtsChartDivWithButtons(\n          model,\n          viewSettings,\n          assetChartData,\n          false,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        ),\n        'Asset data chart',\n      )}\n      {todaysAssetsTable(model, todaysValues)}\n      {assetsDivWithHeadings(model, showAlert)}\n\n      {collapsibleFragment(\n        <div className=\"addNewAsset\">\n          <AddDeleteAssetForm\n            checkAssetFunction={checkAsset}\n            submitAssetFunction={submitAsset}\n            checkTransactionFunction={checkTransaction}\n            submitTransactionFunction={submitTransaction}\n            deleteAssetFunction={deleteAsset}\n            submitTriggerFunction={submitTrigger}\n            model={model}\n            showAlert={showAlert}\n          />\n        </div>,\n        `Add an asset, a defined-contributions pension, or revalue an asset`,\n      )}\n    </div>\n  );\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\n\nimport { isNumberString } from '../../models/checks';\nimport {\n  Asset,\n  ModelData,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport { log, printDebug, showObj } from '../../utils';\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport {\n  revalue,\n  revalueDebt,\n  payOffDebt,\n  conditional,\n  CASH_ASSET_NAME,\n} from '../../localization/stringConstants';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport { isATransaction } from '../../models/modelUtils';\nimport {\n  makeValueAbsPropFromString,\n  checkTriggerDate,\n} from '../../stringUtils';\n\ninterface EditDebtFormState {\n  NAME: string;\n  VALUE: string;\n  START: string;\n  GROWTH: string;\n  CATEGORY: string;\n  PAYMENT: string;\n  inputting: string;\n}\ninterface EditDebtProps extends FormProps {\n  checkAssetFunction: (a: Asset, model: ModelData) => string;\n  submitAssetFunction: (arg0: Asset, arg1: ModelData) => Promise<void>;\n  deleteAssetFunction: (name: string) => Promise<boolean>;\n  checkTransactionFunction: (t: Transaction, model: ModelData) => string;\n  submitTransactionFunction: (\n    transactionInput: Transaction,\n    modelData: ModelData,\n  ) => Promise<void>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\n\nconst inputtingRevalue = 'revalue';\nconst inputtingDebt = 'debt';\n\nexport class AddDeleteDebtForm extends Component<\n  EditDebtProps,\n  EditDebtFormState\n> {\n  public defaultState: EditDebtFormState;\n\n  public constructor(props: EditDebtProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteDebtForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      VALUE: '',\n      START: '',\n      GROWTH: '',\n      CATEGORY: '',\n      PAYMENT: '',\n      inputting: inputtingDebt,\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleGrowthChange = this.handleGrowthChange.bind(this);\n    this.handlePaymentChange = this.handlePaymentChange.bind(this);\n    this.handleCategoryChange = this.handleCategoryChange.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.setStart = this.setStart.bind(this);\n\n    this.add = this.add.bind(this);\n    this.delete = this.delete.bind(this);\n\n    this.inputDebt = this.inputDebt.bind(this);\n    this.inputRevalue = this.inputRevalue.bind(this);\n    this.growthAndInflation = this.growthAndInflation.bind(this);\n    this.revalue = this.revalue.bind(this);\n  }\n\n  private ValueAndCategory(): React.ReactNode {\n    if (this.state.inputting === inputtingRevalue) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={'Debt name'}\n              type=\"text\"\n              name=\"debtname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`Debt value`}\n              type=\"text\"\n              name=\"debtvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n        </Row>\n      );\n    } else {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={'Debt name'}\n              type=\"text\"\n              name=\"debtname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`Debt value`}\n              type=\"text\"\n              name=\"debtvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Category (optional)\"\n              type=\"text\"\n              name=\"debtcategory\"\n              value={this.state.CATEGORY}\n              placeholder=\"category\"\n              onChange={this.handleCategoryChange}\n            />\n          </Col>\n        </Row>\n      );\n    }\n  }\n\n  private growthAndInflation(): React.ReactNode {\n    if (this.state.inputting !== inputtingRevalue) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title=\"Annual interest rate (excluding inflation, e.g. 2 for 2% p.a.)\"\n              type=\"text\"\n              name=\"debtgrowth\"\n              value={this.state.GROWTH}\n              placeholder=\"Enter growth\"\n              onChange={this.handleGrowthChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title=\"Monthly repayment (optional)\"\n              type=\"text\"\n              name=\"debtpayoff\"\n              value={this.state.PAYMENT}\n              placeholder=\"Enter payment\"\n              onChange={this.handlePaymentChange}\n            />\n          </Col>\n        </Row>\n      );\n    }\n  }\n\n  private async revalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n\n    const parseVal = makeValueAbsPropFromString(`-${this.state.VALUE}`);\n    if (!parseVal.checksOK) {\n      this.props.showAlert(\n        `Debt value ${this.state.VALUE} should be a numerical or % value`,\n      );\n      return;\n    }\n\n    const date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Value set date should be a date`);\n      return;\n    }\n\n    let count = 1;\n    while (\n      isATransaction(`${revalue} ${this.state.NAME} ${count}`, this.props.model)\n    ) {\n      count += 1;\n    }\n\n    const revalueTransaction: Transaction = {\n      NAME: `${revalue} ${this.state.NAME} ${count}`,\n      FROM: '',\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.0',\n      TO: this.state.NAME,\n      TO_ABSOLUTE: parseVal.absolute,\n      TO_VALUE: parseVal.value,\n      DATE: this.state.START,\n      TYPE: revalueDebt,\n      RECURRENCE: '',\n      STOP_DATE: '',\n      CATEGORY: '',\n    };\n    // log(`adding transaction ${showObj(revalueExpenseTransaction)}`);\n    const message = await this.props.checkTransactionFunction(\n      revalueTransaction,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n      return;\n    }\n    await this.props.submitTransactionFunction(\n      revalueTransaction,\n      this.props.model,\n    );\n\n    this.props.showAlert('added new data');\n    // clear fields\n    this.setState(this.defaultState);\n    return;\n  }\n\n  private goButtons(): React.ReactNode {\n    if (this.state.inputting === inputtingDebt) {\n      return makeButton(\n        'Create new debt (over-writes any existing with the same name)',\n        this.add,\n        'addDebt',\n        'addDebt',\n        'primary',\n      );\n    } else if (this.state.inputting === inputtingRevalue) {\n      return makeButton(\n        'Revalue this debt',\n        this.revalue,\n        'revalueDebt',\n        'revalueDebt',\n        'primary',\n      );\n    }\n  }\n\n  public render() {\n    // log('rendering an AddDeleteDebtForm');\n    return (\n      <>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Add new debt mode',\n            this.inputDebt,\n            'inputDebt',\n            'inputDebt',\n            this.state.inputting === inputtingDebt\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Revalue debt mode',\n            this.inputRevalue,\n            'revalueDebtInputs',\n            'revalueDebtInputs',\n            this.state.inputting === inputtingRevalue\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n        </div>\n        <form className=\"container-fluid\" onSubmit={this.add}>\n          {this.ValueAndCategory()}\n          <div className=\"container-fluid\">\n            {/* fills width */}\n            <DateSelectionRow\n              introLabel={`Date on which the ${\n                this.state.inputting === inputtingRevalue\n                  ? 'revaluation occurs'\n                  : 'debt starts'\n              }`}\n              model={this.props.model}\n              showAlert={this.props.showAlert}\n              setDateFunction={this.setStart}\n              inputName=\"start date\"\n              inputValue={this.state.START}\n              onChangeHandler={this.handleStartChange}\n              triggers={this.props.model.triggers}\n              submitTriggerFunction={this.props.submitTriggerFunction}\n            />\n          </div>\n          {this.growthAndInflation()}\n          {this.goButtons()}\n        </form>\n      </>\n    );\n  }\n\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ NAME: value });\n  }\n  private handleGrowthChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ GROWTH: value });\n  }\n  private handlePaymentChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ PAYMENT: value });\n  }\n  private handleCategoryChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ CATEGORY: value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ VALUE: value });\n  }\n  private setStart(value: string): void {\n    this.setState({ START: value });\n  }\n  private handleStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStart(value);\n  }\n\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.assets.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        if (matchingItem.IS_A_DEBT) {\n          this.props.showAlert(\n            `There's already a debt called ${this.state.NAME}`,\n          );\n        } else {\n          this.props.showAlert(\n            `There's already an asset called ${this.state.NAME}`,\n          );\n        }\n        return;\n      }\n    }\n\n    let isNotANumber = !isNumberString(this.state.VALUE);\n    if (isNotANumber) {\n      this.props.showAlert(\n        `Debt value ${this.state.VALUE} should be a numerical value`,\n      );\n      return;\n    }\n    const date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Start date '${this.state.START}' should be a date`);\n      return;\n    }\n    isNotANumber = !isNumberString(this.state.GROWTH);\n    if (isNotANumber) {\n      this.props.showAlert(\n        `Growth value '${this.state.GROWTH}' should be a numerical value`,\n      );\n      return;\n    }\n    if (this.state.PAYMENT !== '') {\n      isNotANumber = !isNumberString(this.state.PAYMENT);\n      if (isNotANumber) {\n        this.props.showAlert(\n          `Payment value '${this.state.PAYMENT}' should be a numerical value`,\n        );\n        return;\n      }\n    }\n\n    // log('adding something ' + showObj(this));\n    const asset: Asset = {\n      NAME: this.state.NAME,\n      VALUE: `-${parseFloat(this.state.VALUE)}`,\n      QUANTITY: '', // debts are continuous\n      START: this.state.START,\n      GROWTH: this.state.GROWTH,\n      CPI_IMMUNE: true, // debts never grow with CPI\n      CAN_BE_NEGATIVE: true,\n      IS_A_DEBT: true,\n      CATEGORY: this.state.CATEGORY,\n      PURCHASE_PRICE: '0.0',\n      LIABILITY: '',\n    };\n    const message = this.props.checkAssetFunction(asset, this.props.model);\n    if (message.length > 0) {\n      this.props.showAlert(message);\n    } else {\n      await this.props.submitAssetFunction(asset, this.props.model);\n      if (this.state.PAYMENT !== '') {\n        let count = 1;\n        while (\n          isATransaction(\n            `Payment to ${this.state.NAME} ${count}`,\n            this.props.model,\n          )\n        ) {\n          count += 1;\n        }\n        const transaction: Transaction = {\n          NAME: `${conditional}Payment to ${this.state.NAME} ${count}`,\n          CATEGORY: this.state.CATEGORY,\n          FROM: CASH_ASSET_NAME,\n          FROM_ABSOLUTE: true,\n          FROM_VALUE: this.state.PAYMENT,\n          TO: this.state.NAME,\n          TO_ABSOLUTE: false,\n          TO_VALUE: '1.0',\n          DATE: this.state.START,\n          STOP_DATE: '',\n          RECURRENCE: '1m',\n          TYPE: payOffDebt,\n        };\n        // log('adding something ' + showObj(transaction));\n        const message = await this.props.checkTransactionFunction(\n          transaction,\n          this.props.model,\n        );\n        if (message.length > 0) {\n          this.props.showAlert(message);\n          await this.props.deleteAssetFunction(asset.NAME);\n        } else {\n          await this.props.submitTransactionFunction(\n            transaction,\n            this.props.model,\n          );\n          this.props.showAlert('added new debt and payment');\n          // clear fields\n          this.setState(this.defaultState);\n        }\n      } else {\n        this.props.showAlert('added new debt');\n        // clear fields\n        this.setState(this.defaultState);\n      }\n    }\n  }\n\n  private async delete(e: React.ChangeEvent<HTMLInputElement>) {\n    e.preventDefault();\n    // log('deleting something ' + showObj(this));\n    if (await this.props.deleteAssetFunction(this.state.NAME)) {\n      this.props.showAlert('deleted debt');\n      // clear fields\n      this.setState(this.defaultState);\n    } else {\n      this.props.showAlert(`failed to delete ${this.state.NAME}`);\n    }\n  }\n  private inputDebt(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingDebt,\n    });\n  }\n  private inputRevalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingRevalue,\n    });\n  }\n}\n","import { ChartData, Item, ModelData, DebtVal } from './../types/interfaces';\nimport { checkAsset, checkTransaction } from '../models/checks';\nimport { debtsDivWithHeadings, defaultColumn, addIndices } from './tablePages';\nimport {\n  deleteAsset,\n  getDisplay,\n  submitAsset,\n  submitTransaction,\n  submitTrigger,\n} from './../App';\n\nimport { AddDeleteDebtForm } from './reactComponents/AddDeleteDebtForm';\nimport CashValueFormatter from './reactComponents/CashValueFormatter';\nimport DataGrid from './reactComponents/DataGrid';\nimport React from 'react';\nimport { SimpleFormatter } from './reactComponents/NameFormatter';\nimport { assetsOrDebtsChartDivWithButtons } from './chartPages';\nimport { debtsView } from '../localization/stringConstants';\nimport { ViewSettings } from '../models/charting';\nimport { getTodaysDate } from '../models/modelUtils';\nimport { lessThan } from '../stringUtils';\nimport { collapsibleFragment } from './tablePages';\nimport { log, printDebug } from '../utils';\n\nfunction addToMap(name: string, val: DebtVal, myMap: Map<string, DebtVal>) {\n  const existingEntry = myMap.get(name);\n  if (existingEntry === undefined) {\n    myMap.set(name, { ...val });\n  } else {\n    existingEntry.debtVal += val.debtVal;\n  }\n}\n\nfunction makeDataGrid(myMap: Map<string, DebtVal>, model: ModelData) {\n  return (\n    <DataGrid\n      deleteFunction={undefined}\n      handleGridRowsUpdated={function() {\n        return false;\n      }}\n      rows={addIndices(\n        Array.from(myMap.entries())\n          .filter(key => {\n            return key[1].debtVal !== 0.0;\n          })\n          .map(key => {\n            if (printDebug()) {\n              log(`key[0] = ${key[0]}, key[1] = ${key[1]}`);\n            }\n            return {\n              NAME: key[0],\n              VALUE: `${key[1].debtVal}`,\n              CATEGORY: `${key[1].category}`,\n            };\n          }),\n      ).sort((a: Item, b: Item) => lessThan(a.NAME, b.NAME))}\n      columns={[\n        /*\n        {\n          ...defaultColumn,\n          key: 'index',\n          name: 'index',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        */\n        {\n          ...defaultColumn,\n          key: 'NAME',\n          name: 'name',\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'VALUE',\n          name: `value`,\n          formatter: <CashValueFormatter name=\"value\" value=\"unset\" />,\n          editable: false,\n        },\n        {\n          ...defaultColumn,\n          key: 'CATEGORY',\n          name: `category`,\n          formatter: <SimpleFormatter name=\"name\" value=\"unset\" />,\n          editable: false,\n        },\n      ]}\n      triggers={model.triggers}\n    />\n  );\n}\n\nexport function todaysDebtsTable(\n  model: ModelData,\n  todaysValues: Map<string, DebtVal>,\n) {\n  if (todaysValues.size === 0) {\n    return;\n  }\n  const categorisedValues = new Map<string, DebtVal>();\n\n  const entries = Array.from(todaysValues.entries());\n  for (const key of entries) {\n    const cat = key[1].category;\n    if (cat === '') {\n      addToMap(key[0], key[1], categorisedValues);\n    } else {\n      const catName: string = key[1].category;\n      addToMap(catName, key[1], categorisedValues);\n    }\n  }\n\n  const today = getTodaysDate(model);\n  return (\n    <>\n      {collapsibleFragment(\n        makeDataGrid(todaysValues, model),\n        `Debt values at ${today.toDateString()}`,\n      )}\n      {collapsibleFragment(\n        makeDataGrid(categorisedValues, model),\n        `Debt values (categorised) at ${today.toDateString()}`,\n      )}\n    </>\n  );\n}\n\nexport function debtsDiv(\n  model: ModelData,\n  viewSettings: ViewSettings,\n  showAlert: (arg0: string) => void,\n  debtChartData: ChartData,\n  todaysValues: Map<string, DebtVal>,\n  getStartDate: (() => string) | undefined = undefined,\n  updateStartDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n  getEndDate: (() => string) | undefined = undefined,\n  updateEndDate: ((newDate: string) => Promise<void>) | undefined = undefined,\n) {\n  if (!getDisplay(debtsView)) {\n    // log(`don't populate debtsView`);\n    return;\n  }\n  // log(`do populate debtsView`);\n\n  return (\n    <div className=\"ml-3\">\n      {collapsibleFragment(\n        assetsOrDebtsChartDivWithButtons(\n          model,\n          viewSettings,\n          debtChartData,\n          true,\n          showAlert,\n          getStartDate,\n          updateStartDate,\n          getEndDate,\n          updateEndDate,\n        ),\n        'Debts data chart',\n      )}\n      {todaysDebtsTable(model, todaysValues)}\n      {debtsDivWithHeadings(model, showAlert)}\n      {collapsibleFragment(\n        <div className=\"addNewDebt\">\n          <AddDeleteDebtForm\n            checkAssetFunction={checkAsset}\n            submitAssetFunction={submitAsset}\n            checkTransactionFunction={checkTransaction}\n            submitTransactionFunction={submitTransaction}\n            deleteAssetFunction={deleteAsset}\n            submitTriggerFunction={submitTrigger}\n            model={model}\n            showAlert={showAlert}\n          />\n        </div>,\n        'Add or revalue a debt',\n      )}\n    </div>\n  );\n}\n","import { DbInterface } from './database';\nimport { ModelData } from '../types/interfaces';\nimport { log, printDebug } from '../utils';\nimport { minimalModel } from '../models/exampleModels';\nimport { makeModelFromJSON } from '../models/modelUtils';\n\nconst url = process.env.REACT_APP_SERVER_URL_NOT_SECRET;\n\nexport class RESTDB implements DbInterface {\n  getModelNames(userID: string): Promise<string[]> {\n    if (printDebug()) {\n      log(`url for REST requests = ${url}`);\n    }\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return new Promise((resolve, reject) => {\n      const requestOptions: {\n        method: string;\n        headers: Headers;\n        redirect: 'follow' | 'error' | 'manual' | undefined;\n      } = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow',\n      };\n      const address = `${url}models?userID=${userID}`;\n      // console.log(`address for fetch is ${address}`);\n      return fetch(address, requestOptions)\n        .then(response => response.text())\n        .then(result => {\n          // console.log(result);\n          try {\n            const parsedResult = JSON.parse(result);\n            // console.log(`model names are ${parsedResult}`);\n            resolve(parsedResult);\n          } catch (err) {\n            reject('Query failed');\n          }\n        })\n        .catch(error => {\n          console.log('error', error);\n          reject(error);\n        });\n    });\n  }\n\n  loadModel(userID: string, modelName: string): Promise<ModelData> {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    return new Promise((resolve, reject) => {\n      const requestOptions: {\n        method: string;\n        headers: Headers;\n        redirect: 'follow' | 'error' | 'manual' | undefined;\n      } = {\n        method: 'GET',\n        headers: myHeaders,\n        redirect: 'follow',\n      };\n\n      return fetch(\n        `${url}find?userID=${userID}&modelName=${modelName}`,\n        requestOptions,\n      )\n        .then(response => response.text())\n        .then(result => {\n          // console.log(`in find model for ${modelName}, result = ${result}`);\n          // console.log(`typeof result from find query ${typeof result}`);\n          if (result === '' || result === 'Query failed') {\n            reject('no model found');\n            return;\n          }\n          // console.log(`result has ${JSON.parse(result).assets.length} assets`);\n          try {\n            //log('make model from REST data');\n            resolve(makeModelFromJSON(result));\n          } catch (err) {\n            reject(`no model found err = ${err}`);\n          }\n        })\n        .catch(error => {\n          console.log('error', error);\n          reject(error);\n        });\n    });\n  }\n\n  ensureModel(userID: string, modelName: string) {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const urlencoded = new URLSearchParams();\n    urlencoded.append('userID', userID);\n    urlencoded.append('modelName', modelName);\n    urlencoded.append('model', JSON.stringify(minimalModel));\n\n    const requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'POST',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow',\n    };\n    // console.log(`go to fetch for create for ${modelName}`);\n\n    return fetch(`${url}create`, requestOptions)\n      .then(response => response.text())\n      .then(result => {\n        if (printDebug()) {\n          console.log(`create result = ${result}`);\n        }\n      })\n      .catch(error => console.log('error', error));\n    //throw new Error(\"Method not implemented.\");\n  }\n\n  saveModel(userID: string, modelName: string, model: ModelData) {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const urlencoded = new URLSearchParams();\n    urlencoded.append('userID', userID);\n    urlencoded.append('modelName', modelName);\n    // before save to DB, discard undo stack\n    const modelCopy = {\n      ...model,\n    };\n    delete modelCopy.undoModel;\n    delete modelCopy.redoModel;\n    urlencoded.append('model', JSON.stringify(modelCopy));\n\n    // console.log(`update DB for user ${userID}`);\n    // console.log(`update DB for modelName ${modelName}`);\n    // console.log(`update DB for model ${JSON.stringify(model)}`);\n\n    const requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'PUT',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow',\n    };\n\n    // console.log('go to fetch for update');\n\n    return fetch(`${url}update`, requestOptions)\n      .then(response => {\n        console.log(`update successful`);\n        const result = response.text();\n        console.log(`response.text() = ${result}`);\n        return result;\n      })\n      .then(result => {\n        //if (printDebug()) {\n        console.log(result);\n        //}\n      })\n      .catch(error => {\n        return console.log('error', error);\n      });\n  }\n\n  deleteModel(userID: string, modelName: string) {\n    const myHeaders = new Headers();\n    myHeaders.append('Content-Type', 'application/x-www-form-urlencoded');\n\n    const urlencoded = new URLSearchParams();\n    urlencoded.append('userID', userID);\n    urlencoded.append('modelName', modelName);\n\n    const requestOptions: {\n      method: string;\n      headers: Headers;\n      body: URLSearchParams;\n      redirect: 'follow' | 'error' | 'manual' | undefined;\n    } = {\n      method: 'DELETE',\n      headers: myHeaders,\n      body: urlencoded,\n      redirect: 'follow',\n    };\n\n    // console.log('go to fetch for delete');\n\n    return fetch(`${url}delete`, requestOptions)\n      .then(response => response.text())\n      .then(result => console.log(result))\n      .catch(error => console.log('error', error));\n  }\n}\n","import { ModelData } from './../types/interfaces';\nimport { RESTDB } from './REST_db';\n\nexport interface DbInterface {\n  getModelNames(userID: string): Promise<string[]>;\n  loadModel(userID: string, modelName: string): Promise<ModelData>;\n  ensureModel(userID: string, modelName: string): Promise<void>;\n  saveModel(userID: string, modelName: string, model: ModelData): Promise<void>;\n  deleteModel(userID: string, modelName: string): Promise<void>;\n}\n\nconst restdb = new RESTDB();\n\nexport function getDB(): DbInterface {\n  // TODO code a transient DB\n  // which stores all data on the client\n  // (e.g. in a map)\n  // for tests\n  return restdb;\n}\n","import {\n  Item,\n  Trigger,\n  Income,\n  Expense,\n  Asset,\n  Transaction,\n  Setting,\n  ModelData,\n} from './types/interfaces';\nimport { log, printDebug, showObj } from './utils';\n\nfunction diffItem(i1: Item, i2: Item): string {\n  if (i1.NAME !== i2.NAME) {\n    return `name ${i1.NAME}`;\n  }\n  return '';\n}\nfunction diffTriggers(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const t1 = it1 as Trigger;\n  const t2 = it2 as Trigger;\n  if (t1.DATE !== t2.DATE) {\n    return `${it1.NAME}: date ${t1.DATE} !== ${t2.DATE}`;\n  }\n  return '';\n}\nfunction diffIncomes(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const i1 = it1 as Income;\n  const i2 = it2 as Income;\n  if (i1.START !== i2.START) {\n    return `${it1.NAME}: start date ${i1.START} !== ${i2.START}`;\n  }\n  if (i1.END !== i2.END) {\n    return `${it1.NAME}: end date ${i1.END} !== ${i2.END}`;\n  }\n  if (i1.VALUE !== i2.VALUE) {\n    return `${it1.NAME}: value ${i1.VALUE} !== ${i2.VALUE}`;\n  }\n  if (i1.VALUE_SET !== i2.VALUE_SET) {\n    return `${it1.NAME}: value set date ${i1.VALUE_SET} !== ${i2.VALUE_SET}`;\n  }\n  if (i1.GROWTH !== i2.GROWTH) {\n    return `${it1.NAME}: growth ${i1.GROWTH} !== ${i2.GROWTH}`;\n  }\n  if (i1.CPI_IMMUNE !== i2.CPI_IMMUNE) {\n    return `${it1.NAME}: cpi-immunity ${i1.CPI_IMMUNE} !== ${i2.CPI_IMMUNE}`;\n  }\n  if (i1.LIABILITY !== i2.LIABILITY) {\n    return `${it1.NAME}: liability ${i1.LIABILITY} !== ${i2.LIABILITY}`;\n  }\n  if (i1.CATEGORY !== i2.CATEGORY) {\n    return `${it1.NAME}: category ${i1.CATEGORY} !== ${i2.CATEGORY}`;\n  }\n  return '';\n}\nfunction diffExpenses(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const e1 = it1 as Expense;\n  const e2 = it2 as Expense;\n  if (e1.START !== e2.START) {\n    return `${it1.NAME}: start date ${e1.START} !== ${e2.START}`;\n  }\n  if (e1.END !== e2.END) {\n    return `${it1.NAME}: end date ${e1.END} !== ${e2.END}`;\n  }\n  if (e1.VALUE !== e2.VALUE) {\n    return `${it1.NAME}: value ${e1.VALUE} !== ${e2.VALUE}`;\n  }\n  if (e1.VALUE_SET !== e2.VALUE_SET) {\n    return `${it1.NAME}: value set date ${e1.VALUE_SET} !== ${e2.VALUE_SET}`;\n  }\n  if (e1.GROWTH !== e2.GROWTH) {\n    return `${it1.NAME}: growth ${e1.GROWTH} !== ${e2.VALUE}`;\n  }\n  if (e1.CPI_IMMUNE !== e2.CPI_IMMUNE) {\n    return `${it1.NAME}: cpi-immunity ${e1.CPI_IMMUNE} !== ${e2.CPI_IMMUNE}`;\n  }\n  if (e1.RECURRENCE !== e2.RECURRENCE) {\n    return `${it1.NAME}: recurrence ${e1.RECURRENCE} !== ${e2.RECURRENCE}`;\n  }\n  if (e1.CATEGORY !== e2.CATEGORY) {\n    return `${it1.NAME}: category ${e1.CATEGORY} !== ${e2.CATEGORY}`;\n  }\n  return '';\n}\nfunction diffAssets(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const a1 = it1 as Asset;\n  const a2 = it2 as Asset;\n  if (a1.START !== a2.START) {\n    return `${it1.NAME}: start date ${a1.START} !== ${a2.START}`;\n  }\n  if (a1.VALUE !== a2.VALUE) {\n    return `${it1.NAME}: value ${a1.VALUE} !== ${a2.START}`;\n  }\n  if (a1.QUANTITY !== a2.QUANTITY) {\n    return `${it1.NAME}: quantity ${a1.QUANTITY} !== ${a2.START}`;\n  }\n  if (a1.CAN_BE_NEGATIVE !== a2.CAN_BE_NEGATIVE) {\n    return `${it1.NAME}: negativity ${a1.CAN_BE_NEGATIVE} !== ${a2.CAN_BE_NEGATIVE}`;\n  }\n  if (a1.IS_A_DEBT !== a2.IS_A_DEBT) {\n    return `${it1.NAME}: is-debt ${a1.IS_A_DEBT} !== ${a2.IS_A_DEBT}`;\n  }\n  if (a1.GROWTH !== a2.GROWTH) {\n    return `${it1.NAME}: growth ${a1.GROWTH} !== ${a2.GROWTH}`;\n  }\n  if (a1.CPI_IMMUNE !== a2.CPI_IMMUNE) {\n    return `${it1.NAME}: cpi-immunity ${a1.CPI_IMMUNE} !== ${a2.CPI_IMMUNE}`;\n  }\n  if (a1.PURCHASE_PRICE !== a2.PURCHASE_PRICE) {\n    return `${it1.NAME}: purchase price ${a1.PURCHASE_PRICE} !== ${a2.PURCHASE_PRICE}`;\n  }\n  if (a1.CATEGORY !== a2.CATEGORY) {\n    return `${it1.NAME}: category ${a1.CATEGORY} !== ${a2.CATEGORY}`;\n  }\n  return '';\n}\n\nfunction diffTransactions(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const t1 = it1 as Transaction;\n  const t2 = it2 as Transaction;\n  if (t1.DATE !== t2.DATE) {\n    return `${it1.NAME}: date ${t1.DATE} !== ${t2.DATE}`;\n  }\n  if (t1.STOP_DATE !== t2.STOP_DATE) {\n    return `${it1.NAME}: end date ${t1.STOP_DATE} !== ${t2.STOP_DATE}`;\n  }\n  if (t1.TO !== t2.TO) {\n    return `${it1.NAME}: to ${t1.TO} !== ${t2.DATE}`;\n  }\n  if (t1.TO_VALUE !== t2.TO_VALUE) {\n    return `${it1.NAME}: to value ${t1.TO_VALUE} !== ${t2.TO_VALUE}`;\n  }\n  if (t1.FROM !== t2.FROM) {\n    return `${it1.NAME}: from ${t1.FROM} !== ${t2.FROM}`;\n  }\n  if (t1.FROM_ABSOLUTE !== t2.FROM_ABSOLUTE) {\n    return `${it1.NAME}: from absolute date ${t1.FROM_ABSOLUTE} !== ${t2.FROM_ABSOLUTE}`;\n  }\n  if (t1.FROM_VALUE !== t2.FROM_VALUE) {\n    //log(`${showObj(t1)}, \\n${showObj(t2)}`); // Sometimes 0 and 0.0...\n    return `${it1.NAME}: from value ${t1.FROM_VALUE} !== ${t2.FROM_VALUE}`;\n  }\n  if (t1.TO_ABSOLUTE !== t2.TO_ABSOLUTE) {\n    return `${it1.NAME}: to absolute ${t1.TO_ABSOLUTE} !== ${t2.TO_ABSOLUTE}`;\n  }\n  if (t1.TYPE !== t2.TYPE) {\n    return `${it1.NAME}: type ${t1.TYPE} !== ${t2.TYPE}`;\n  }\n  if (t1.RECURRENCE !== t2.RECURRENCE) {\n    return `${it1.NAME}: recurrence ${t1.RECURRENCE} !== ${t2.RECURRENCE}`;\n  }\n  if (t1.CATEGORY !== t2.CATEGORY) {\n    return `${it1.NAME}: category ${t1.CATEGORY} !== ${t2.CATEGORY}`;\n  }\n  return '';\n}\nfunction diffSettings(it1: Item, it2: Item): string {\n  const s = diffItem(it1, it2);\n  if (s.length > 0) {\n    return s;\n  }\n  const s1 = it1 as Setting;\n  const s2 = it2 as Setting;\n  if (s1.VALUE !== s2.VALUE) {\n    return `${it1.NAME}: value ${s1.VALUE} !== ${s1.NAME}`;\n  }\n  if (s1.HINT !== s2.HINT) {\n    return `${it1.NAME}: hint ${s1.HINT} !== ${s1.HINT}`;\n  }\n  if (s1.TYPE !== s2.TYPE) {\n    return `${it1.NAME}: type ${s1.TYPE} !== ${s1.TYPE}`;\n  }\n  return '';\n}\nfunction diffItems(\n  is1: Item[],\n  is2: Item[],\n  diffFn: (i1: Item, i2: Item, quickExit: boolean) => string,\n  quickExit: boolean,\n  model1Name: string,\n  model2Name: string,\n): string[] {\n  // log(`diffItems between ${showObj(is1)} and ${showObj(is2)}`);\n\n  const matchedNames: string[] = [];\n  const result: string[] = [];\n  for (const i1 of is1) {\n    if (result.length > 0 && quickExit) {\n      break;\n    }\n    const matchedItems = is2.filter(i2 => {\n      // log(`compare ${i1.NAME} and ${i2.NAME}`);\n      return i1.NAME === i2.NAME;\n    });\n    if (matchedItems.length === 0) {\n      result.push(`${i1.NAME} in ${model1Name} but not in ${model2Name}`);\n    } else if (matchedItems.length > 1) {\n      result.push(`duplicated name ${i1.NAME} present in ${model2Name}`);\n    } else {\n      const s = diffFn(i1, matchedItems[0], quickExit);\n      // log(`comparison of ${i1.NAME} found diff ${s}`);\n      if (s.length > 0) {\n        result.push(s);\n        if (quickExit) {\n          break;\n        }\n      } else {\n        matchedNames.push(i1.NAME);\n      }\n    }\n  }\n  if (result.length > 0 && quickExit) {\n    return result;\n  }\n  if (printDebug()) {\n    log(`matchedNames = ${showObj(matchedNames)}`);\n  }\n  if (!quickExit || result.length === 0) {\n    is2.forEach(i2 => {\n      if (\n        matchedNames.find(m => {\n          return m === i2.NAME;\n        })\n      ) {\n        return;\n      }\n      result.push(`${i2.NAME} is in ${model2Name} but not in ${model1Name}`);\n    });\n  }\n  return result;\n}\n\nexport function diffModels(\n  m1: ModelData | undefined,\n  m2: ModelData | undefined,\n  quickExit: boolean,\n  model1Name: string,\n  model2Name: string,\n): string[] {\n  // log(`diff models ${m1} and ${m2}`);\n  if (m1 === undefined) {\n    if (m2 === undefined) {\n      return [];\n    } else {\n      return [`one model undefined, other defined`];\n    }\n  } else if (m2 === undefined) {\n    return [`one model defined, other undefined`];\n  }\n  let s = diffItems(\n    m1.triggers,\n    m2.triggers,\n    diffTriggers,\n    quickExit,\n    model1Name,\n    model2Name,\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  s = s.concat(\n    diffItems(\n      m1.incomes,\n      m2.incomes,\n      diffIncomes,\n      quickExit,\n      model1Name,\n      model2Name,\n    ),\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  s = s.concat(\n    diffItems(\n      m1.expenses,\n      m2.expenses,\n      diffExpenses,\n      quickExit,\n      model1Name,\n      model2Name,\n    ),\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  s = s.concat(\n    diffItems(\n      m1.assets,\n      m2.assets,\n      diffAssets,\n      quickExit,\n      model1Name,\n      model2Name,\n    ),\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  s = s.concat(\n    diffItems(\n      m1.transactions,\n      m2.transactions,\n      diffTransactions,\n      quickExit,\n      model1Name,\n      model2Name,\n    ),\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  s = s.concat(\n    diffItems(\n      m1.settings,\n      m2.settings,\n      diffSettings,\n      quickExit,\n      model1Name,\n      model2Name,\n    ),\n  );\n  if (s.length > 0 && quickExit) {\n    return s;\n  }\n  return s;\n}\n","import {\n  Expense,\n  Income,\n  Trigger,\n  Asset,\n  Transaction,\n  Setting,\n  Item,\n  ModelData,\n} from '../types/interfaces';\n\nimport { log, printDebug, showObj } from '../utils';\n\nimport { getDB } from './database';\n\nimport { adjustableType } from '../localization/stringConstants';\n\nimport { diffModels } from '../diffModels';\nimport { checkData } from '../models/checks';\nimport { doCheckModelBeforeChange } from '../App';\nimport { minimalModel } from '../models/exampleModels';\nimport { markForUndo, revertToUndoModel } from '../models/modelUtils';\n\nconst showDBInteraction = false;\nconst validateCache = false;\n\ninterface ModelStatus {\n  isDirty: boolean;\n}\n\ninterface CacheModel {\n  modelName: string;\n  status: ModelStatus;\n  model: ModelData;\n}\n\n// First time user X requests anything from this cache,\n// user X will be absent and all user X models will be loaded.\n// Models will be in 'clean' status\n// After that they can become dirty through local edits\n// or become clean through save to db\n\nconst localCache: Map<string, CacheModel[]> = new Map<string, CacheModel[]>();\n\nasync function getModelNamesDB(userID: string) {\n  if (showDBInteraction) {\n    log(`getDB get model names for user ${userID}`);\n  }\n  let modelNames: string[] = [];\n  try {\n    modelNames = await getDB().getModelNames(userID);\n  } catch (error) {\n    alert(`error contacting database ${error}`);\n  }\n  if (showDBInteraction) {\n    log(`getModelNames returning ${modelNames}`);\n  }\n  return modelNames;\n}\n\nasync function loadModelFromDB(\n  userID: string,\n  modelName: string,\n): Promise<ModelData | undefined> {\n  if (showDBInteraction) {\n    log(`loadModelFromDB for ${userID}, name = ${modelName}`);\n  }\n  let model: ModelData | undefined;\n  try {\n    model = await getDB().loadModel(userID, modelName);\n  } catch (err) {\n    alert(`Cannot load ${modelName}; err = ${err}`);\n  }\n  if (showDBInteraction) {\n    log(`loaded model ${modelName}`);\n  }\n  return model;\n}\n\nfunction logCache() {\n  if (showDBInteraction) {\n    log(\n      `set up ${Array.from(localCache.keys()).map(k => {\n        const cachedModel = localCache.get(k);\n        if (!cachedModel) {\n          return '';\n        } else {\n          return `[${k}, ${cachedModel.map(cm => {\n            return `${cm.modelName}${cm.status.isDirty}${cm.model.assets.length}`;\n          })}]`;\n        }\n      })}`,\n    );\n    //return `[${k}, ${showObj(localCache.get(k))}]`})}`);\n  }\n}\n\nasync function fillCacheFromDB(userID: string) {\n  const cachedModels: CacheModel[] = [];\n  const modelNames = await getModelNamesDB(userID);\n  if (showDBInteraction) {\n    log(`fill cache with these models ${modelNames}`);\n  }\n  async function getModel(modelName: string) {\n    if (showDBInteraction) {\n      log(`get this model ${modelName}`);\n    }\n    const model = await loadModelFromDB(userID, modelName);\n    if (model !== undefined) {\n      if (showDBInteraction) {\n        log(`got model for ${modelName}, go to add to cache`);\n      }\n      cachedModels.push({\n        modelName: modelName,\n        model: model,\n        status: { isDirty: false },\n      });\n      if (showDBInteraction) {\n        log(`got this model ${modelName}`);\n      }\n    } else {\n      throw new Error(\n        `model name ${modelName} from DB but no model present???`,\n      );\n    }\n    return;\n  }\n  // log('go to Promise.all(...)');\n  const result = await Promise.all(\n    modelNames.map(modelName => {\n      return getModel(modelName);\n    }),\n  );\n  if (printDebug()) {\n    log(`result from Promise.all(...) is ${result}`);\n  }\n  localCache.set(userID, cachedModels);\n  logCache();\n  return cachedModels;\n}\n\nexport async function getModelNames(userID: string) {\n  let cachedModels = localCache.get(userID);\n  if (!cachedModels) {\n    cachedModels = await fillCacheFromDB(userID);\n  }\n  return cachedModels.map(cm => {\n    return cm.modelName;\n  });\n}\n\nexport async function loadModel(userID: string, modelName: string) {\n  if (showDBInteraction) {\n    log(`loadModel for ${userID}, name = ${modelName}`);\n  }\n  if (localCache.get(userID) === undefined) {\n    await fillCacheFromDB(userID);\n  }\n\n  if (showDBInteraction) {\n    log(`filled cache - now go use it!`);\n  }\n  const cachedModels = localCache.get(userID);\n  let cachedModel = undefined;\n  if (cachedModels) {\n    cachedModel = cachedModels.find(cm => {\n      return cm.modelName === modelName;\n    });\n  }\n  if (cachedModel) {\n    if (showDBInteraction) {\n      log(`from cache load model ${modelName} for user ${userID}`);\n    }\n    if (validateCache && !cachedModel.status.isDirty) {\n      const dbModel = await loadModelFromDB(userID, modelName);\n      if (dbModel === undefined) {\n        throw new Error(`DBValidation error: cache has clean model \n          but DB has no model for ${modelName}`);\n      } else {\n        const diff = diffModels(\n          dbModel,\n          cachedModel.model,\n          true,\n          'this model',\n          'cached model',\n        );\n        if (diff !== []) {\n          throw new Error(`DBValidation error: ${diff} for ${modelName}`);\n        }\n      }\n    }\n    return cachedModel;\n  } else {\n    if (showDBInteraction) {\n      log(`didn't find ${modelName} in cache`);\n    }\n    return undefined;\n  }\n}\nasync function saveModelToCache(\n  userID: string,\n  modelName: string,\n  modelData: ModelData,\n) {\n  let cachedModels = localCache.get(userID);\n  if (!cachedModels) {\n    cachedModels = [];\n  }\n\n  const cachedModel = {\n    modelName: modelName,\n    model: modelData,\n    status: { isDirty: true },\n  };\n  const idx = cachedModels.findIndex(cm => {\n    return cm.modelName === modelName;\n  });\n  if (idx !== -1) {\n    cachedModels.splice(idx, 1, cachedModel);\n  } else {\n    cachedModels.push(cachedModel);\n  }\n}\n\nexport async function ensureModel(userID: string, modelName: string) {\n  if (showDBInteraction) {\n    log(`ensure model ${modelName} for user ${userID}`);\n  }\n  let cachedModels = localCache.get(userID);\n  if (!cachedModels) {\n    cachedModels = [];\n  }\n\n  const cachedModel = cachedModels.find(cm => {\n    return cm.modelName === modelName;\n  });\n  if (cachedModel) {\n    if (showDBInteraction) {\n      log(`nothing to do - model already exists in cache`);\n    }\n    return;\n  }\n  cachedModels.push({\n    modelName: modelName,\n    model: minimalModel,\n    status: { isDirty: true },\n  });\n  if (showDBInteraction) {\n    log(`added to cache:`);\n  }\n  logCache();\n  if (showDBInteraction) {\n    log(`ensured model ${modelName}`);\n  }\n  return;\n}\n\nexport async function saveModelLSM(\n  userID: string,\n  modelName: string,\n  model: ModelData,\n) {\n  // log(`save model ${showObj(model)}`);\n  if (showDBInteraction) {\n    log(`save model ${modelName} for user ${userID}`);\n    log(\n      `saving : diff to undo is ${diffModels(\n        model,\n        model.undoModel,\n        true,\n        'this model',\n        'undo model',\n      )}`,\n    );\n  }\n  saveModelToCache(userID, modelName, model);\n  return true;\n}\n\nfunction updateItemList(itemList: Item[], newData: Item) {\n  const idx = itemList.findIndex((i: Item) => {\n    return i.NAME === newData.NAME;\n  });\n  if (idx !== -1) {\n    itemList.splice(idx, 1);\n  }\n  itemList.push(newData);\n}\n\nasync function submitItemLSM(\n  inputItem: Item,\n  itemList: Item[],\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  markForUndo(modelData);\n  updateItemList(itemList, inputItem);\n\n  if (doCheckModelBeforeChange()) {\n    const checkResult = checkData(modelData);\n    if (checkResult !== '') {\n      revertToUndoModel(modelData);\n      return checkResult;\n    }\n  }\n\n  await saveModelLSM(userID, modelName, modelData);\n  return '';\n}\n\nexport async function submitExpenseLSM(\n  expenseInput: Expense,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  if (printDebug()) {\n    log(`in submitExpense with input : ${showObj(expenseInput)}`);\n  }\n  return submitItemLSM(\n    expenseInput,\n    modelData.expenses,\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function submitIncomeLSM(\n  incomeInput: Income,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  if (printDebug()) {\n    log(`in submitIncome with input : ${showObj(incomeInput)}`);\n  }\n  return submitItemLSM(\n    incomeInput,\n    modelData.incomes,\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function submitTriggerLSM(\n  trigger: Trigger,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  if (printDebug()) {\n    log(`go to submitTriggers with input : ${showObj(trigger)}`);\n  }\n  return submitItemLSM(\n    trigger,\n    modelData.triggers,\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function submitAssetLSM(\n  assetInput: Asset,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n): Promise<string> {\n  if (printDebug()) {\n    log(`in submitAsset with input : ${showObj(assetInput)}`);\n  }\n  return submitItemLSM(\n    assetInput,\n    modelData.assets,\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function submitTransactionLSM(\n  input: Transaction,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  if (printDebug()) {\n    log(`in submitTransaction with input : ${showObj(input)}`);\n  }\n  return submitItemLSM(\n    input,\n    modelData.transactions,\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function saveModelToDBLSM(\n  userID: string,\n  modelName: string,\n  modelData: ModelData,\n) {\n  if (showDBInteraction) {\n    log(`getDB go to save model ${modelName}`);\n  }\n  await saveModelLSM(userID, modelName, modelData);\n  const cachedModels = localCache.get(userID);\n  let status;\n  if (cachedModels) {\n    const cachedModel = cachedModels.find(cm => {\n      return cm.modelName === modelName;\n    });\n    if (cachedModel) {\n      status = cachedModel.status;\n    }\n  }\n  getDB().ensureModel(userID, modelName);\n  await getDB().saveModel(userID, modelName, modelData);\n  if (status) {\n    status.isDirty = false;\n  }\n  return true; // TODO there's no accounting for failure here\n}\n\nexport async function submitSettingLSM(\n  input: Setting, // if HINT or TYPE are empty, leave pre-existing values\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  if (printDebug()) {\n    log(`in submitSettingLSM with input : ${showObj(input)}`);\n  }\n  const idx = modelData.settings.find((i: Item) => {\n    return i.NAME === input.NAME;\n  });\n  if (idx !== undefined) {\n    if (input.HINT === '') {\n      input.HINT = idx.HINT;\n    }\n    if (input.TYPE === '') {\n      input.TYPE = idx.TYPE;\n    }\n  }\n  return submitItemLSM(input, modelData.settings, modelName, modelData, userID);\n}\n\nexport async function submitNewSettingLSM(\n  setting: Setting,\n  modelName: string,\n  modelData: ModelData,\n  userID: string,\n) {\n  let type = adjustableType;\n  const matchingSettings = modelData.settings.filter(s => {\n    return s.NAME === setting.NAME;\n  });\n  if (matchingSettings.length > 0) {\n    type = matchingSettings[0].TYPE;\n  }\n\n  submitSettingLSM(\n    {\n      NAME: setting.NAME,\n      VALUE: setting.VALUE,\n      HINT: setting.HINT,\n      TYPE: type,\n    },\n    modelName,\n    modelData,\n    userID,\n  );\n}\n\nexport async function deleteModel(userID: string, modelName: string) {\n  if (showDBInteraction) {\n    log(`getDB delete model ${modelName}`);\n  }\n  const cachedModels = localCache.get(userID);\n  if (cachedModels === undefined) {\n    log(`unexpected empty local cache - no models for ${userID}??`);\n  } else {\n    const idx = cachedModels.findIndex(cm => {\n      return cm.modelName === modelName;\n    });\n    if (idx === -1) {\n      log(`unexpected local cache - no model for ${userID} and ${modelName}??`);\n    } else {\n      cachedModels.splice(idx, 1);\n    }\n  }\n  return await getDB().deleteModel(userID, modelName);\n}\n","import React, { Component, FormEvent } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport {\n  ModelData,\n  Setting,\n  Transaction,\n  Trigger,\n  FormProps,\n} from '../../types/interfaces';\nimport {\n  adjustableType,\n  revalue,\n  revalueSetting,\n} from '../../localization/stringConstants';\nimport { log, printDebug, showObj } from '../../utils';\n\nimport { makeButton } from './Button';\nimport { DateSelectionRow } from './DateSelectionRow';\nimport { Input } from './Input';\nimport { doCheckBeforeOverwritingExistingData } from '../../App';\nimport { ViewSettings } from '../../models/charting';\nimport { isATransaction } from '../../models/modelUtils';\nimport {\n  checkTriggerDate,\n  makeValueAbsPropFromString,\n} from '../../stringUtils';\n\ninterface EditSettingFormState {\n  NAME: string;\n  VALUE: string;\n  START: string;\n  inputting: string;\n}\ninterface EditSettingProps extends FormProps {\n  viewSettings: ViewSettings;\n  submitSettingFunction: (\n    arg0: Setting,\n    arg1: ModelData,\n    arg2: ViewSettings,\n  ) => Promise<void>;\n  checkTransactionFunction: (t: Transaction, model: ModelData) => string;\n  submitTransactionFunction: (\n    transactionInput: Transaction,\n    modelData: ModelData,\n  ) => Promise<void>;\n  submitTriggerFunction: (\n    triggerInput: Trigger,\n    modelData: ModelData,\n  ) => Promise<void>;\n}\n\nconst inputtingRevalue = 'revalue';\nconst inputtingSetting = 'setting';\n\nexport class AddDeleteSettingForm extends Component<\n  EditSettingProps,\n  EditSettingFormState\n> {\n  public defaultState: EditSettingFormState;\n\n  public constructor(props: EditSettingProps) {\n    super(props);\n    if (printDebug()) {\n      log(`props for AddDeleteSettingForm has\n        ${showObj(props.model.triggers.length)} triggers`);\n    }\n    this.defaultState = {\n      NAME: '',\n      VALUE: '',\n      START: '',\n      inputting: inputtingSetting,\n    };\n\n    this.state = this.defaultState;\n\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleStartChange = this.handleStartChange.bind(this);\n    this.setStart = this.setStart.bind(this);\n\n    this.add = this.add.bind(this);\n\n    this.inputSetting = this.inputSetting.bind(this);\n    this.inputRevalue = this.inputRevalue.bind(this);\n    this.revalue = this.revalue.bind(this);\n  }\n\n  private ValueAndCategory(): React.ReactNode {\n    if (this.state.inputting === inputtingRevalue) {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={'Setting name'}\n              type=\"text\"\n              name=\"settingname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`Setting value`}\n              type=\"text\"\n              name=\"settingvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n        </Row>\n      );\n    } else {\n      return (\n        <Row>\n          <Col>\n            <Input\n              title={'Setting name'}\n              type=\"text\"\n              name=\"settingname\"\n              value={this.state.NAME}\n              placeholder=\"Enter name\"\n              onChange={this.handleNameChange}\n            />\n          </Col>\n          <Col>\n            <Input\n              title={`Setting value`}\n              type=\"text\"\n              name=\"settingvalue\"\n              value={this.state.VALUE}\n              placeholder=\"Enter value\"\n              onChange={this.handleValueChange}\n            />\n          </Col>\n        </Row>\n      );\n    }\n  }\n\n  private async revalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n\n    const date = checkTriggerDate(this.state.START, this.props.model.triggers);\n    const isNotADate = date === undefined;\n    if (isNotADate) {\n      this.props.showAlert(`Given date ${this.state.START} should be a date`);\n      return;\n    }\n\n    let count = 1;\n    while (\n      isATransaction(`${revalue} ${this.state.NAME} ${count}`, this.props.model)\n    ) {\n      count += 1;\n    }\n\n    let toAbsolute = true;\n    let toValue = this.state.VALUE;\n\n    const parsed = makeValueAbsPropFromString(toValue);\n    if (parsed.checksOK && !parsed.absolute) {\n      toAbsolute = false;\n      toValue = parsed.value;\n    }\n\n    const revalueTransaction: Transaction = {\n      NAME: `${revalue} ${this.state.NAME} ${count}`,\n      FROM: '',\n      FROM_ABSOLUTE: false,\n      FROM_VALUE: '0.0',\n      TO: this.state.NAME,\n      TO_ABSOLUTE: toAbsolute,\n      TO_VALUE: toValue,\n      DATE: this.state.START,\n      TYPE: revalueSetting,\n      RECURRENCE: '',\n      STOP_DATE: '',\n      CATEGORY: '',\n    };\n    // log(`adding transaction ${showObj(revalueExpenseTransaction)}`);\n    const message = await this.props.checkTransactionFunction(\n      revalueTransaction,\n      this.props.model,\n    );\n    if (message.length > 0) {\n      this.props.showAlert(message);\n      return;\n    }\n    await this.props.submitTransactionFunction(\n      revalueTransaction,\n      this.props.model,\n    );\n\n    this.props.showAlert('added new data');\n    // clear fields\n    this.setState(this.defaultState);\n    return;\n  }\n\n  private goButtons(): React.ReactNode {\n    if (this.state.inputting === inputtingSetting) {\n      return makeButton(\n        'Create new setting (over-writes any existing with the same name)',\n        this.add,\n        'addSetting',\n        'addSetting',\n        'primary',\n      );\n    } else if (this.state.inputting === inputtingRevalue) {\n      return makeButton(\n        'Revalue this setting',\n        this.revalue,\n        'revalueSetting',\n        'revalueSetting',\n        'primary',\n      );\n    }\n  }\n\n  private startDate(): React.ReactNode {\n    if (this.state.inputting === inputtingRevalue) {\n      return (\n        <div className=\"container-fluid\">\n          {/* fills width */}\n          <DateSelectionRow\n            introLabel={'Date on which the revaluation occurs'}\n            model={this.props.model}\n            showAlert={this.props.showAlert}\n            setDateFunction={this.setStart}\n            inputName=\"start date\"\n            inputValue={this.state.START}\n            onChangeHandler={this.handleStartChange}\n            triggers={this.props.model.triggers}\n            submitTriggerFunction={this.props.submitTriggerFunction}\n          />\n        </div>\n      );\n    }\n  }\n\n  public render() {\n    // log('rendering an AddDeleteSettingForm');\n    return (\n      <>\n        <div className=\"btn-group ml-3\" role=\"group\">\n          {makeButton(\n            'Add new setting mode',\n            this.inputSetting,\n            'inputSetting',\n            'inputSetting',\n            this.state.inputting === inputtingSetting\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n          {makeButton(\n            'Revalue setting mode',\n            this.inputRevalue,\n            'revalueSettingInputs',\n            'revalueSettingInputs',\n            this.state.inputting === inputtingRevalue\n              ? 'primary'\n              : 'outline-secondary',\n          )}\n        </div>\n        <form className=\"container-fluid\" onSubmit={this.add}>\n          {this.ValueAndCategory()}\n          {this.startDate()}\n          {this.goButtons()}\n        </form>\n      </>\n    );\n  }\n\n  private handleNameChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ NAME: value });\n  }\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    this.setState({ VALUE: value });\n  }\n  private setStart(value: string): void {\n    this.setState({ START: value });\n  }\n  private handleStartChange(e: React.ChangeEvent<HTMLInputElement>): void {\n    const value = e.target.value;\n    this.setStart(value);\n  }\n\n  private async add(e: FormEvent<Element>) {\n    e.preventDefault();\n\n    if (this.state.NAME === '') {\n      this.props.showAlert(`Name should be not empty`);\n      return;\n    }\n\n    if (doCheckBeforeOverwritingExistingData()) {\n      const matchingItem = this.props.model.settings.find(a => {\n        return a.NAME === this.state.NAME;\n      });\n      if (matchingItem !== undefined) {\n        log(\n          `this.props.model.settings = ${showObj(this.props.model.settings)}`,\n        );\n        this.props.showAlert(\n          `There's already a setting called ${this.state.NAME}`,\n        );\n        return;\n      }\n    }\n\n    // log('adding something ' + showObj(this));\n    const setting: Setting = {\n      NAME: this.state.NAME,\n      VALUE: this.state.VALUE,\n      HINT: '',\n      TYPE: adjustableType,\n    };\n\n    await this.props.submitSettingFunction(\n      setting,\n      this.props.model,\n      this.props.viewSettings,\n    );\n\n    this.props.showAlert(`added new setting ${this.state.NAME}`);\n    // clear fields\n    this.setState(this.defaultState);\n  }\n\n  private inputSetting(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingSetting,\n    });\n  }\n  private inputRevalue(e: React.MouseEvent<HTMLButtonElement>) {\n    e.preventDefault();\n    this.setState({\n      ...this.state,\n      inputting: inputtingRevalue,\n    });\n  }\n}\n","import React, { Component, FormEvent } from 'react';\n\nimport { log, printDebug } from '../../utils';\nimport { Input } from './Input';\nimport { replaceWithModel } from '../../App';\nimport { makeModelFromJSON } from '../../models/modelUtils';\nimport { makeButton } from './Button';\n\ninterface ReplaceWithJSONFormState {\n  JSON: string;\n}\ninterface ReplaceWithJSONFormProps {\n  modelName: string;\n  modelNames: string[];\n  userID: string;\n  showAlert: (arg0: string) => void;\n  setReportKey: (args0: string) => void;\n  toggleCheckOverwrite: () => void;\n  toggleOverview: () => void;\n  doCheckOverwrite: () => boolean;\n  eval: () => void;\n}\n\nexport class ReplaceWithJSONForm extends Component<\n  ReplaceWithJSONFormProps,\n  ReplaceWithJSONFormState\n> {\n  public defaultState: ReplaceWithJSONFormState;\n\n  public constructor(props: ReplaceWithJSONFormProps) {\n    super(props);\n    this.defaultState = {\n      JSON: '',\n    };\n\n    this.state = this.defaultState;\n\n    this.replace = this.replace.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    // log(`setting new value for JSON form ${value}`);\n    this.setState({ JSON: value });\n  }\n\n  private handleSubmit(e: React.ChangeEvent<HTMLInputElement>) {\n    // log(`setting new value for JSON form ${value}`);\n    this.replace(e);\n  }\n\n  public render() {\n    return (\n      <form className=\"container-fluid\" onSubmit={this.replace}>\n        <Input\n          type={'text'}\n          title={\n            'input report:{sourceMatcher:regexp,sourceExcluder:regexp}|newModelName:{jsonModelData}'\n          }\n          name={'replaceWithJSON'}\n          value={this.state.JSON}\n          placeholder={'Enter text input here'}\n          onChange={this.handleValueChange}\n          onSubmit={this.handleSubmit}\n        />\n        {makeButton(\n          'toggle evaluate on definition change',\n          async (e: FormEvent<Element>) => {\n            await this.setState({\n              JSON: 'eval',\n            });\n            this.replace(e);\n          },\n          'toggleEDC',\n          'toggleEDC',\n          'outline-secondary',\n        )}\n        <br></br>\n        {makeButton(\n          'toggle jump to overview',\n          async (e: FormEvent<Element>) => {\n            await this.setState({\n              JSON: 'overview',\n            });\n            this.replace(e);\n          },\n          'toggleJTO',\n          'toggleJTO',\n          'outline-secondary',\n        )}\n        <br></br>\n        {makeButton(\n          'toggle check before overwrite',\n          async (e: FormEvent<Element>) => {\n            await this.setState({\n              JSON: 'overwrite',\n            });\n            this.replace(e);\n          },\n          'toggleCBO',\n          'toggleCBO',\n          'outline-secondary',\n        )}\n      </form>\n    );\n  }\n\n  private async replace(e: FormEvent<Element>) {\n    e.preventDefault();\n    let modelName = this.props.modelName;\n\n    // special words\n    const reportStarter = 'report:';\n    const overwriteWord = 'overwrite';\n    const gotoOverview = 'overview';\n    const evalWord = 'eval';\n\n    // log(`modelName from props is ${modelName}`);\n    let JSON = this.state.JSON.trim();\n    if (JSON.startsWith(reportStarter)) {\n      this.props.setReportKey(JSON.substring(reportStarter.length));\n      this.setState({ JSON: '' });\n      return;\n    }\n    if (JSON === overwriteWord) {\n      this.props.toggleCheckOverwrite();\n      this.setState({ JSON: '' });\n      return;\n    }\n    if (JSON === evalWord) {\n      this.props.eval();\n      this.setState({ JSON: '' });\n      return;\n    }\n    if (JSON === gotoOverview) {\n      this.props.toggleOverview();\n      this.setState({ JSON: '' });\n      return;\n    }\n\n    const i = this.state.JSON.indexOf(`{`);\n    if (printDebug()) {\n      log(`index of { in ${JSON} is ${i}`);\n    }\n    if (i !== 0) {\n      modelName = JSON.substring(0, i);\n      // log(`modelName from JSON is ${modelName}`);\n      JSON = JSON.substring(i);\n    }\n    const alreadyExists = this.props.modelNames.find(existing => {\n      return existing === modelName;\n    });\n    if (\n      !alreadyExists ||\n      !this.props.doCheckOverwrite() ||\n      window.confirm(\n        `will replace ${modelName} which already exists, you sure?`,\n      )\n    ) {\n      const newModel = makeModelFromJSON(JSON);\n      replaceWithModel(this.props.userID, modelName, newModel, false);\n      this.props.showAlert('replaced data OK');\n      this.setState({ JSON: '' });\n    }\n  }\n}\n","import React from 'react';\nimport { Component, FormEvent } from 'react';\n\nimport { Input } from './Input';\nimport { ModelData } from '../../types/interfaces';\nimport { makeButton } from './Button';\nimport { log, printDebug } from '../../utils';\nimport { minimalModel } from '../../models/exampleModels';\nimport dateFormat from 'dateformat';\nimport FileSaver from 'file-saver';\n\ninterface CreateModelFormState {\n  newName: string;\n}\ninterface CreateModelFormProps {\n  userID: string;\n  currentModelName: string;\n  saveModel: (\n    userID: string,\n    modelName: string,\n    modelData: ModelData,\n  ) => Promise<void>;\n  modelData: ModelData;\n  showAlert: (arg0: string) => void;\n  cloneModel: (newName: string, oldModel: ModelData) => Promise<boolean>;\n  exampleModels: {\n    name: string;\n    model: string;\n  }[];\n  getExampleModel: (JSONdata: string) => ModelData;\n  getModelNames: (userID: string) => Promise<string[]>;\n}\n\nexport class CreateModelForm extends Component<\n  CreateModelFormProps,\n  CreateModelFormState\n> {\n  public defaultState: CreateModelFormState;\n\n  public constructor(props: CreateModelFormProps) {\n    super(props);\n    this.defaultState = {\n      newName: '',\n    };\n\n    this.state = this.defaultState;\n\n    this.clonePropsModel = this.clonePropsModel.bind(this);\n    this.handleValueChange = this.handleValueChange.bind(this);\n    this.backupModel = this.backupModel.bind(this);\n  }\n\n  private handleValueChange(e: React.ChangeEvent<HTMLInputElement>) {\n    const value = e.target.value;\n    // log(`setting new value for JSON form ${value}`);\n    this.setState({ newName: value });\n  }\n\n  private exampleButtonList() {\n    const buttons: JSX.Element[] = this.props.exampleModels.map(x => {\n      return makeButton(\n        `Create ${x.name} example`,\n        async () => {\n          return this.copyModel(this.props.getExampleModel(x.model));\n        },\n        `btn-create-${x.name}-example`,\n        `btn-create-${x.name}-example`,\n        'outline-primary',\n      );\n    });\n    return <div role=\"group\">{buttons}</div>;\n  }\n\n  public render() {\n    return (\n      <form\n        className=\"container-fluid\"\n        onSubmit={async e => {\n          e.preventDefault();\n          // log(`make copy of minimal model`);\n          this.copyModel(minimalModel);\n        }}\n      >\n        <Input\n          type={'text'}\n          title={'Create new model'}\n          name={'createModel'}\n          value={this.state.newName}\n          placeholder={'Enter new model name here'}\n          onChange={this.handleValueChange}\n        />\n        {makeButton(\n          'New model',\n          async () => {\n            if (printDebug()) {\n              log(`action on button for new model`);\n            }\n            this.copyModel(minimalModel);\n          },\n          `btn-createMinimalModel`,\n          `btn-createMinimalModel`,\n          'outline-primary',\n        )}\n        {makeButton(\n          'Make backup of model',\n          this.backupModel,\n          `btn-backup`,\n          `btn-backup`,\n          'outline-primary',\n        )}\n        {makeButton(\n          'Clone model',\n          this.clonePropsModel,\n          `btn-clone`,\n          `btn-clone`,\n          'outline-primary',\n        )}\n        {this.exampleButtonList()}\n      </form>\n    );\n  }\n\n  private async clonePropsModel(e: FormEvent<Element>) {\n    // log(`in clonePropsModel`);\n    e.preventDefault();\n    this.copyModel(this.props.modelData);\n  }\n\n  private async backupModel(e: FormEvent<Element>) {\n    e.preventDefault();\n    const d = new Date();\n\n    const backupName =\n      this.props.currentModelName +\n      'backup ' +\n      dateFormat(d, 'yyyy-mm-dd HH:MM:ss');\n\n    if (window.confirm(`Save a local text file for this model?`)) {\n      const backupText = JSON.stringify(this.props.modelData);\n\n      const blob = new Blob([backupText], { type: 'text/plain;charset=utf-8' });\n      FileSaver.saveAs(blob, `${backupName}.txt`);\n    }\n\n    await this.props.saveModel(\n      this.props.userID,\n      this.props.currentModelName +\n        'backup ' +\n        dateFormat(d, 'yyyy-mm-dd HH:MM:ss'),\n      this.props.modelData,\n    );\n  }\n\n  private async copyModel(model: ModelData) {\n    // log(`in copyModel`);\n    const newName = this.state.newName;\n    if (newName.length === 0) {\n      this.props.showAlert('Please provide a new name for the model');\n      return;\n    }\n    // log(`going to create an example model called ${newName}`);\n    if (\n      !(await this.props.getModelNames(this.props.userID)).includes(newName) ||\n      window.confirm(`will replace ${newName}, you sure?`)\n    ) {\n      log(`go to clone model`);\n      if (await this.props.cloneModel(newName, model)) {\n        // log('cloned ok -  clear name field');\n        this.setState({ newName: '' });\n      } else {\n        log('failed to clone ok');\n      }\n    }\n  }\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from './contexts/auth0-context';\n\nReactDOM.render(\n  <Auth0Provider>\n    <App />\n  </Auth0Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/catWait.87e7c7f7.gif\";","module.exports = __webpack_public_path__ + \"static/media/sampleAssetGraph.405ff0cd.png\";","module.exports = __webpack_public_path__ + \"static/media/sampleExpenseGraph.5581786d.png\";","module.exports = __webpack_public_path__ + \"static/media/sampleTaxGraph.c9aa7cfc.png\";","module.exports = __webpack_public_path__ + \"static/media/cat.50c12de4.png\";"],"sourceRoot":""}